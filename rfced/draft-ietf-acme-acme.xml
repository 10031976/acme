<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-acme-acme-latest" category="std">

  <front>
    <title abbrev="ACME">Automatic Certificate Management Environment (ACME)</title>

    <author initials="R." surname="Barnes" fullname="Richard Barnes">
      <organization>Cisco</organization>
      <address>
        <email>rlb@ipv.sx</email>
      </address>
    </author>
    <author initials="J." surname="Hoffman-Andrews" fullname="Jacob Hoffman-Andrews">
      <organization>EFF</organization>
      <address>
        <email>jsha@eff.org</email>
      </address>
    </author>
    <author initials="D." surname="McCarney" fullname="Daniel McCarney">
      <organization>Let's Encrypt</organization>
      <address>
        <email>cpu@letsencrypt.org</email>
      </address>
    </author>
    <author initials="J." surname="Kasten" fullname="James Kasten">
      <organization>University of Michigan</organization>
      <address>
        <email>jdkasten@umich.edu</email>
      </address>
    </author>

    <date year="2019" month="February"/>

    
    <workgroup>ACME Working Group</workgroup>
    <keyword>certificate</keyword> <keyword>HTTPS</keyword> <keyword>PKI</keyword> <keyword>X.509</keyword>

    <abstract>


<t>Public Key Infrastructure using X.509 (PKIX) certificates are used for a number of purposes,
the most significant of which is the authentication of domain names.  Thus,
certification authorities (CAs) in the Web PKI are trusted to verify that an applicant
for a certificate legitimately represents the domain name(s) in the certificate.
As of this writing, this verification is done through a collection of ad hoc mechanisms.
This document describes a protocol that a CA and an
applicant can use to automate the process of verification and certificate
issuance.  The protocol also provides facilities for other certificate
management functions, such as certificate revocation.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Certificates <xref target="RFC5280"/> in the Web PKI are most commonly used to authenticate
domain names.  Thus, certification authorities (CAs) in the Web PKI are trusted to
verify that an applicant for a certificate legitimately represents the domain
name(s) in the certificate.</t>

<t>Different types of certificates reflect different kinds of CA verification of
information about the certificate subject.  “Domain Validation” (DV)
certificates are by far the most common type.  The only validation
the CA is required to perform in the DV issuance process is to
verify that the requester has effective control of the domain <xref target="CABFBR"></xref>.  The CA is not
required to attempt to verify the requester’s
real-world identity.  (This is as opposed to “Organization Validation” (OV) and
“Extended Validation” (EV) certificates, where the process is intended to also
verify the real-world identity of the requester.)</t>

<t>Existing Web PKI certificate authorities tend to use a set of ad hoc
protocols for certificate issuance and identity verification.  In the case of DV
certificates, a typical user experience is something like:</t>

<t><list style="symbols">
  <t>Generate a PKCS#10 <xref target="RFC2986"/> Certificate Signing Request (CSR).</t>
  <t>Cut and paste the CSR into a CA’s web page.</t>
  <t>Prove ownership of the domain by one of the following methods:
  <list style="symbols">
      <t>Put a CA-provided challenge at a specific place on the web server.</t>
      <t>Put a CA-provided challenge in a DNS record corresponding to the target
domain.</t>
      <t>Receive a CA-provided challenge at (hopefully) an administrator-controlled email
address corresponding to the domain, and then respond to it on the CA’s web
page.</t>
    </list></t>
  <t>Download the issued certificate and install it on their Web Server.</t>
</list></t>

<t>With the exception of the CSR itself and the certificates that are issued, these
are all completely ad hoc procedures and are accomplished by getting the human
user to follow interactive natural-language instructions from the CA rather than
by machine-implemented published protocols.  In many cases, the instructions are
difficult to follow and cause significant frustration and confusion.  Informal usability tests
by the authors indicate that webmasters often need 1-3 hours to obtain and
install a certificate for a domain.  Even in the best case, the lack of
published, standardized mechanisms presents an obstacle to the wide deployment
of HTTPS and other PKIX-dependent systems because it inhibits mechanization of
tasks related to certificate issuance, deployment, and revocation.</t>

<t>This document describes an extensible framework for automating the issuance and
domain validation procedure, thereby allowing servers and infrastructure
software to obtain certificates without user interaction.  Use of this protocol
should radically simplify the deployment of HTTPS and the practicality of PKIX-based
authentication for other protocols based on Transport Layer Security (TLS)
<xref target="RFC5246"/>.</t>

<t>It should be noted that while the focus of this document is on validating
domain names for purposes of issuing certificates in the Web PKI, ACME supports
extensions for uses with other identifiers in other PKI contexts.  For example,
as of this writing, there is ongoing work to use ACME for issuance of Web PKI
certificates attesting to IP addresses <xref target="I-D.ietf-acme-ip"/> and Secure Telephone Identity Revisited (STIR)
certificates attesting to telephone numbers <xref target="I-D.ietf-acme-telephone"/>.</t>

<t>ACME can also be used to automate some aspects of certificate management even
where non-automated processes are still needed.  For example, the external
account binding feature (see <xref target="external-account-binding"/>) can allow an ACME
account to use authorizations that have been granted to an external, non-ACME
account.  This allows ACME to address issuance scenarios that cannot yet be
fully automated, such as the issuance of “Extended Validation” certificates.</t>

</section>
<section anchor="deployment-model-and-operator-experience" title="Deployment Model and Operator Experience">

<t>The guiding use case for ACME is obtaining certificates for websites
(HTTPS <xref target="RFC2818"/>).  In this case, a web server is intended to speak
for one or more domains, and the process of certificate issuance is intended to
verify that this web server actually speaks for the domain(s).</t>

<t>DV certificate validation commonly checks claims about properties related to
control of a domain name – properties that can be observed by the certificate
issuer in an interactive process that can be conducted purely online.  That
means that under typical circumstances, all steps in the request, verification,
and issuance process can be represented and performed by Internet protocols with
no out-of-band human intervention.</t>

<t>Prior to ACME, when deploying an HTTPS server, a server operator typically gets a
prompt to generate a self-signed certificate.  If the operator were instead
deploying an HTTPS server using ACME, the experience would be something like this:</t>

<t><list style="symbols">
  <t>The operator’s ACME client prompts the operator for the intended domain name(s) that the
web server is to stand for.</t>
  <t>The ACME client presents the operator with a list of CAs from which it could
get a certificate.  (This list will change over time based on the capabilities
of CAs and updates to ACME configuration.) The ACME client might prompt the
operator for payment information at this point.</t>
  <t>The operator selects a CA.</t>
  <t>In the background, the ACME client contacts the CA and requests that it
issue a certificate for the intended domain name(s).</t>
  <t>The CA verifies that the client controls the requested domain name(s) by
having the ACME client perform some action(s) that can only be done
with control of the domain name(s).
For example, the CA might require a client requesting example.com
to provision DNS record under example.com or an HTTP resource
under http://example.com.</t>
  <t>Once the CA is satisfied, it issues the certificate and the ACME client
automatically downloads and installs it, potentially notifying the operator
via email, SMS, etc.</t>
  <t>The ACME client periodically contacts the CA to get updated certificates,
stapled Online Certificate Status Protocol (OCSP) responses, or whatever else would be required to keep the web server functional and its credentials up to date.</t>
</list></t>

<t>In this way, it would be nearly as easy to deploy with a CA-issued certificate
as with a self-signed certificate. Furthermore, the maintenance of that
CA-issued certificate would require minimal manual intervention.  Such close
integration of ACME with HTTPS servers allows the immediate and automated
deployment of certificates as they are issued, sparing the human administrator
from much of the time-consuming work described in the previous section.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in BCP
14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>

<t>The two main roles in ACME are “client” and “server”.  The ACME client uses the
protocol to request certificate management actions, such as issuance or
revocation.  An ACME client may run on a web server, mail server, or some other
server system that requires valid X.509 certificates.  Or, it may run on a separate
server that does not consume the certificate but is authorized to respond to a
CA-provided challenge.  The ACME server runs at a certification authority
and responds to client requests, performing the requested actions if the client is
authorized.</t>

<t>An ACME client authenticates to the server by means of an “account key pair”.  The client uses the
private key of this key pair to sign all messages sent to the server.  The
server uses the public key to verify the authenticity and integrity of messages
from the client.</t>

</section>
<section anchor="protocol-overview" title="Protocol Overview">

<t>ACME allows a client to request certificate management actions using a set of
JavaScript Object Notation (JSON) messages carried over HTTPS <xref target="RFC8259"/> <xref target="RFC2818"/>.
Issuance using ACME resembles a traditional CA’s issuance process, in which a user creates an account,
requests a certificate, and proves control of the domain(s) in that certificate in
order for the CA to issue the requested certificate.</t>

<t>The first phase of ACME is for the client to request an account with the
ACME server.  The client generates an asymmetric key pair and requests a
new account, optionally providing contact information, agreeing to terms
of service (ToS), and/or associating the account with an existing account
in another system. The creation request is signed with the generated
private key to prove that the client controls it.</t>

<figure title="Account Creation"><artwork><![CDATA[
      Client                                                   Server

      [Contact Information]
      [ToS Agreement]
      [Additional Data]
      Signature                     ------->
                                                          Account URL
                                    <-------           Account Object


                [] Information covered by request signatures
]]></artwork></figure>

<t>Once an account is registered, there are four major steps the client needs to take to
get a certificate:</t>

<t><list style="numbers">
  <t>Submit an order for a certificate to be issued</t>
  <t>Prove control of any identifiers requested in the certificate</t>
  <t>Finalize the order by submitting a CSR</t>
  <t>Await issuance and download the issued certificate</t>
</list></t>

<t>The client’s order for a certificate describes the desired identifiers
plus a few additional fields that
capture semantics that are not supported in the CSR format.  If the server is
willing to consider issuing such a certificate, it responds with a list of
requirements that the client must satisfy before the certificate will be issued.</t>

<t>For example, in most cases, the server will require the client to demonstrate
that it controls the identifiers in the requested certificate.  Because there
are many different ways to validate possession of different types of
identifiers, the server will choose from an extensible set of challenges that
are appropriate for the identifier being claimed.  The client responds with a
set of responses that tell the server which challenges the client has completed.
The server then validates that the client has completed the challenges.</t>

<t>Once the validation process is complete and the server is satisfied that the
client has met its requirements, the client finalizes the order by submitting
a PKCS#10 Certificate Signing Request (CSR). The server will issue the requested
certificate and make it available to the client.</t>

<figure title="Certificate Issuance"><artwork><![CDATA[
      Client                                                   Server

      [Order]
      Signature                     ------->
                                    <-------  Required Authorizations

      [Responses]
      Signature                     ------->

                          <~~~~~~~~Validation~~~~~~~~>

      [CSR]
      Signature                     ------->
                                    <-------          Acknowledgement

                          <~~~~~~Await issuance~~~~~~>

      POST-as-GET request           ------->
                                    <-------              Certificate

                [] Information covered by request signatures
]]></artwork></figure>

<t>To revoke a certificate, the client sends a signed revocation request indicating
the certificate to be revoked:</t>

<figure title="Certificate Revocation"><artwork><![CDATA[
      Client                                                 Server

      [Revocation request]
      Signature                    -------->

                                   <--------                 Result

                [] Information covered by request signatures
]]></artwork></figure>

<t>Note that while ACME is defined with enough flexibility to handle different
types of identifiers in principle, the primary use case addressed by this
document is the case where domain names are used as identifiers.  For example,
all of the identifier validation challenges described in
<xref target="identifier-validation-challenges"/> address validation of domain names.
The use of ACME for other identifiers will require further specification in order
to describe how these identifiers are encoded in the protocol and what types of
validation challenges the server might require.</t>

</section>
<section anchor="character-encoding" title="Character Encoding">

<t>All requests and responses sent via HTTP by ACME clients, ACME servers, and
validation servers as well as any inputs for digest computations MUST be encoded
using the UTF-8 character set <xref target="RFC3629"/>. Note that identifiers that appear in
certificates may have their own encoding considerations (e.g., DNS names containing
non-ASCII characters are expressed as A-labels rather than U-labels). Any such
encoding considerations are to be applied prior to the aforementioned UTF-8
encoding.</t>

</section>
<section anchor="message-transport" title="Message Transport">

<t>Communications between an ACME client and an ACME server are done over HTTPS,
using JSON Web Signature (JWS) <xref target="RFC7515"/> to provide some additional security
properties for messages sent from
the client to the server.  HTTPS provides server authentication and
confidentiality.  With some ACME-specific extensions, JWS provides
authentication of the client’s request payloads, anti-replay protection, and
integrity for the HTTPS request URL.</t>

<section anchor="https-requests" title="HTTPS Requests">

<t>Each ACME function is accomplished by the client sending a sequence of HTTPS
requests to the server, carrying JSON messages <xref target="RFC2818"/><xref target="RFC8259"/>.  Use of
HTTPS is REQUIRED. Each subsection of
<xref target="certificate-management"/> below describes the message formats used by the
function and the order in which messages are sent.</t>

<t>In most HTTPS transactions used by ACME, the ACME client is the HTTPS client
and the ACME server is the HTTPS server. The ACME server acts as a
client when validating challenges: an HTTP client when
validating an ‘http-01’ challenge, a DNS client with ‘dns-01’, etc.</t>

<t>ACME servers SHOULD follow the recommendations of <xref target="RFC7525"/> when configuring
their TLS implementations.  ACME servers that support TLS 1.3 MAY allow clients
to send early data (0-RTT).  This is safe because the ACME protocol itself
includes anti-replay protections (see <xref target="replay-protection"/>) in all cases where
they are required.  For this reason, there are no restrictions on what ACME
data can be carried in 0-RTT.</t>

<t>ACME clients MUST send a User-Agent header field, in accordance with
<xref target="RFC7231"/>. This header field SHOULD include the name and version of the
ACME software in addition to the name and version of the underlying
HTTP client software.</t>

<t>ACME clients SHOULD send an Accept-Language header field in accordance with
<xref target="RFC7231"/> to enable localization of error messages.</t>

<t>ACME servers that are intended to be generally accessible need to use
Cross-Origin Resource Sharing (CORS) in order to be accessible from
browser-based clients <xref target="W3C.REC-cors-20140116"/>.  Such servers SHOULD set the
Access-Control-Allow-Origin header field to the value “*”.</t>

<t>Binary fields in the JSON objects used by ACME are encoded using base64url
encoding described in Section 5 of <xref target="RFC4648"/> according to the profile specified
in JSON Web Signature in Section 2 of <xref target="RFC7515"/>. This encoding uses a URL safe
character set. Trailing ‘=’ characters MUST be stripped. Encoded
values that include trailing ‘=’ characters MUST be rejected as
improperly encoded.</t>

</section>
<section anchor="request-authentication" title="Request Authentication">

<t>All ACME requests with a non-empty body MUST encapsulate their payload
in a JSON Web Signature (JWS) <xref target="RFC7515"/> object, signed using the account’s
private key unless otherwise specified.  The server MUST verify the JWS before
processing the request. Encapsulating request bodies in JWS provides
authentication of requests.</t>

<t>JWS objects sent in ACME requests MUST meet the following additional criteria:</t>

<t><list style="symbols">
  <t>The JWS MUST be in the  Flattened JSON Serialization <xref target="RFC7515"/></t>
  <t>The JWS MUST NOT have multiple signatures</t>
  <t>The JWS Unencoded Payload Option <xref target="RFC7797"/> MUST NOT be used</t>
  <t>The JWS Unprotected Header <xref target="RFC7515"/> MUST NOT be used</t>
  <t>The JWS Payload MUST NOT be detached</t>
  <t>The JWS Protected Header MUST include the following fields:
  <list style="symbols">
      <t>“alg” (Algorithm)
      <list style="symbols">
          <t>This field MUST NOT contain “none” or a Message Authentication Code (MAC) algorithm (e.g. one in which the algorithm registry description mentions MAC/HMAC).</t>
        </list></t>
      <t>“nonce” (defined in <xref target="replay-protection"/>)</t>
      <t>“url” (defined in <xref target="request-url-integrity"/>)</t>
      <t>Either “jwk” (JSON Web Key) or “kid” (Key ID) as specified below</t>
    </list></t>
</list></t>

<t>An ACME server MUST implement the “ES256” signature algorithm <xref target="RFC7518"/> and SHOULD implement the “EdDSA” signature algorithm using the “Ed25519” variant (indicated by “crv”) <xref target="RFC8037"/>.</t>

<t>The “jwk” and “kid” fields are mutually exclusive. Servers MUST reject requests
that contain both.</t>

<t>For newAccount requests, and for revokeCert requests authenticated by a certificate
key, there MUST be a “jwk” field. This field MUST contain the public key
corresponding to the private key used to sign the JWS.</t>

<t>For all other requests, the request is signed using an existing account, and
there MUST be a “kid” field. This field MUST contain the account URL received by
POSTing to the newAccount resource.</t>

<t>If the client sends a JWS signed with an algorithm that the server does not
support, then the server MUST return an error with status code 400 (Bad Request)
and type “urn:ietf:params:acme:error:badSignatureAlgorithm”.  The problem
document returned with the error MUST include an “algorithms” field with an
array of supported “alg” values.  See <xref target="errors"/> for more details on
the structure of error responses.</t>

<t>If the server supports the signature algorithm “alg” but either does not support
or chooses to reject the public key “jwk”, then the server MUST return an error
with status code 400 (Bad Request) and type
“urn:ietf:params:acme:error:badPublicKey”.  The problem document detail SHOULD
describe the reason for rejecting the public key; some example reasons are:</t>

<t><list style="symbols">
  <t>“alg” is “RS256” but the modulus “n” is too small (e.g., 512-bit)</t>
  <t>“alg” is “ES256” but “jwk” does not contain a valid P-256 public key</t>
  <t>“alg” is “EdDSA” and “crv” is “Ed448”, but the server only supports “EdDSA”
with “Ed25519”</t>
  <t>the corresponding private key is known to have been compromised</t>
</list></t>

<t>Because client requests in ACME carry JWS objects in the Flattened
JSON Serialization, they must have the Content-Type header field
set to “application/jose+json”.  If a request does not meet this
requirement, then the server MUST return a response with status code
415 (Unsupported Media Type).</t>

</section>
<section anchor="post-as-get" title="GET and POST-as-GET Requests">

<t>Note that authentication via signed JWS request bodies implies that
requests without an entity body are not authenticated, in particular
GET requests.  Except for the cases described in this section, if
the server receives a GET request, it MUST return an error with
status code 405 (Method Not Allowed) and type “malformed”.</t>

<t>If a client wishes to fetch a resource from the server (which would
otherwise be done with a GET), then it MUST send a POST request with
a JWS body as described above, where the payload of the JWS is a
zero-length octet string.  In other words, the “payload” field of the
JWS object MUST be present and set to the empty string (“”).</t>

<t>We will refer to these as “POST-as-GET” requests. On receiving a
request with a zero-length (and thus non-JSON) payload, the server
MUST authenticate the sender and verify any access control rules.
Otherwise, the server MUST treat this request as having the same
semantics as a GET request for the same resource.</t>

<t>The server MUST allow GET requests for the directory and newNonce
resources (see <xref target="resources"/>), in addition to POST-as-GET requests
for these resources.  This enables clients to bootstrap into the
ACME authentication system.</t>

</section>
<section anchor="request-url-integrity" title="Request URL Integrity">

<t>It is common in deployment for the entity terminating TLS for HTTPS to be different
from the entity operating the logical HTTPS server, with a “request routing”
layer in the middle.  For example, an ACME CA might have a content delivery
network terminate TLS connections from clients so that it can inspect client
requests for denial-of-service (DoS) protection.</t>

<t>These intermediaries can also change values in the request that are not signed
in the HTTPS request, e.g., the request URL and header fields.  ACME uses JWS to
provide an integrity mechanism, which protects against an intermediary
changing the request URL to another ACME URL.</t>

<t>As noted in <xref target="request-authentication"/>, all ACME request objects carry a
“url” header parameter in their protected header.  This header parameter encodes
the URL to which the client is directing the request.  On receiving such an
object in an HTTP request, the server MUST compare the “url” header parameter to
the request URL.  If the two do not match, then the server MUST reject the
request as unauthorized.</t>

<t>Except for the directory resource, all ACME resources are addressed with URLs
provided to the client by the server.  In POST requests sent to these resources, the client MUST set
the “url” header parameter to the exact string provided by the server (rather
than performing any re-encoding on the URL).  The server SHOULD perform the
corresponding string equality check, configuring each resource with the URL
string provided to clients and having the resource check that requests have the
same string in their “url” header parameter. The server MUST reject the request
as unauthorized if the string equality check fails.</t>

<section anchor="url-url-jws-header-parameter" title="&quot;url&quot; (URL) JWS Header Parameter">

<t>The “url” header parameter specifies the URL <xref target="RFC3986"/> to which this JWS
object is directed.  The “url” header parameter MUST be carried in the protected
header of the JWS.  The value of the “url” header parameter MUST be a string
representing the target URL.</t>

</section>
</section>
<section anchor="replay-protection" title="Replay Protection">

<t>In order to protect ACME resources from any possible replay attacks, ACME
POST requests have a mandatory anti-replay mechanism.  This mechanism is based on the
server maintaining a list of nonces that it has issued, and requiring
any signed request from the client to carry such a nonce.</t>

<t>An ACME server provides nonces to clients using the HTTP Replay-Nonce header field,
as specified in <xref target="replay-nonce"/>.  The server MUST include a Replay-Nonce
header field in every successful response to a POST request and SHOULD provide
it in error responses as well.</t>

<t>Every JWS sent by an ACME client MUST include, in its protected header, the
“nonce” header parameter, with contents as defined in
<xref target="nonce-nonce-jws-header-parameter"/>.  As part of JWS verification, the
ACME server MUST verify that the value of the “nonce” header is a value that the
server previously provided in a Replay-Nonce header field.  Once a nonce value
has appeared in an ACME request, the server MUST consider it invalid, in the same
way as a value it had never issued.</t>

<t>When a server rejects a request because its nonce value was unacceptable (or not
present), it MUST provide HTTP status code 400 (Bad Request), and indicate the
ACME error type “urn:ietf:params:acme:error:badNonce”.  An error response with
the “badNonce” error type MUST include a Replay-Nonce header field with a
fresh nonce that the server will accept in a retry of the original
query (and possibly in other requests, according to the server’s
nonce scoping policy).
On receiving such a response, a client SHOULD retry the request using the new
nonce.</t>

<t>The precise method used to generate and track nonces is up to the server.  For
example, the server could generate a random 128-bit value for each response,
keep a list of issued nonces, and strike nonces from this list as they are used.</t>

<t>Other than the constraint above with regard to nonces issued in
“badNonce” responses, ACME does not constrain how servers
scope nonces. Clients MAY assume that nonces have broad scope,
e.g., by having a single pool of nonces used for all requests.
However, when retrying in response to a “badNonce” error, the client
MUST use the nonce provided in the error response. Servers should
scope nonces broadly enough that retries are not needed very often.</t>

<section anchor="replay-nonce" title="Replay-Nonce">

<t>The Replay-Nonce header field includes a server-generated value that the
server can use to detect unauthorized replay in future client requests.  The
server MUST generate the value provided in Replay-Nonce in such a way that
they are unique to each message, with high probability, and unpredictable to anyone besides the server. For instance, it is
acceptable to generate Replay-Nonces randomly.</t>

<t>The value of the Replay-Nonce field MUST be an octet string encoded according to
the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  Clients MUST
ignore invalid Replay-Nonce values.  The ABNF <xref target="RFC5234"/> for the Replay-Nonce
header field follows:</t>

<figure><artwork><![CDATA[
  base64url = ALPHA / DIGIT / "-" / "_"

  Replay-Nonce = 1*base64url
]]></artwork></figure>

<t>The Replay-Nonce header field SHOULD NOT be included in HTTP request messages.</t>

</section>
<section anchor="nonce-nonce-jws-header-parameter" title="&quot;nonce&quot; (Nonce) JWS Header Parameter">

<t>The “nonce” header parameter provides a unique value that enables the verifier
of a JWS to recognize when replay has occurred. The “nonce” header parameter
MUST be carried in the protected header of the JWS.</t>

<t>The value of the “nonce” header parameter MUST be an octet string, encoded
according to the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  If
the value of a “nonce” header parameter is not valid according to this encoding,
then the verifier MUST reject the JWS as malformed.</t>

</section>
</section>
<section anchor="rate-limits" title="Rate Limits">

<t>Creation of resources can be rate limited by ACME servers to ensure fair usage and
prevent abuse.  Once the rate limit is exceeded, the server MUST respond
with an error with the type “urn:ietf:params:acme:error:rateLimited”.
Additionally, the server SHOULD send a Retry-After header field <xref target="RFC7231"/> indicating
when the current request may succeed again.  If multiple rate limits are
in place, that is the time where all rate limits allow access again for
the current request with exactly the same parameters.</t>

<t>In addition to the human-readable “detail” field of the error response, the
server MAY send one or multiple link relations in the Link header field <xref target="RFC8288"/> pointing to
documentation about the specific rate limit that was hit, using the “help” link relation type.</t>

</section>
<section anchor="errors" title="Errors">

<t>Errors can be reported in ACME both at the HTTP layer and within challenge
objects as defined in <xref target="identifier-validation-challenges"/>. ACME servers can
return responses with an HTTP error response code (4XX or 5XX). For example,
if the client submits a request using a method not allowed in this document,
then the server MAY return status code 405 (Method Not Allowed).</t>

<t>When the server responds with an error status, it SHOULD provide additional
information using a problem document <xref target="RFC7807"/>.  To facilitate automatic
response to errors, this document defines the following standard tokens for use
in the “type” field (within the ACME URN namespace “urn:ietf:params:acme:error:”):</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>accountDoesNotExist</c>
      <c>The request specified an account that does not exist</c>
      <c>alreadyRevoked</c>
      <c>The request specified a certificate to be revoked that has already been revoked</c>
      <c>badCSR</c>
      <c>The CSR is unacceptable (e.g., due to a short key)</c>
      <c>badNonce</c>
      <c>The client sent an unacceptable anti-replay nonce</c>
      <c>badPublicKey</c>
      <c>The JWS was signed by a public key the server does not support</c>
      <c>badRevocationReason</c>
      <c>The revocation reason provided is not allowed by the server</c>
      <c>badSignatureAlgorithm</c>
      <c>The JWS was signed with an algorithm the server does not support</c>
      <c>caa</c>
      <c>Certification Authority Authorization (CAA) records forbid the CA from issuing a certificate</c>
      <c>compound</c>
      <c>Specific error conditions are indicated in the “subproblems” array.</c>
      <c>connection</c>
      <c>The server could not connect to validation target</c>
      <c>dns</c>
      <c>There was a problem with a DNS query during identifier validation</c>
      <c>externalAccountRequired</c>
      <c>The request must include a value for the “externalAccountBinding” field</c>
      <c>incorrectResponse</c>
      <c>Response received didn’t match the challenge’s requirements</c>
      <c>invalidContact</c>
      <c>A contact URL for an account was invalid</c>
      <c>malformed</c>
      <c>The request message was malformed</c>
      <c>orderNotReady</c>
      <c>The request attempted to finalize an order that is not ready to be finalized</c>
      <c>rateLimited</c>
      <c>The request exceeds a rate limit</c>
      <c>rejectedIdentifier</c>
      <c>The server will not issue certificates for the identifier</c>
      <c>serverInternal</c>
      <c>The server experienced an internal error</c>
      <c>tls</c>
      <c>The server received a TLS error during validation</c>
      <c>unauthorized</c>
      <c>The client lacks sufficient authorization</c>
      <c>unsupportedContact</c>
      <c>A contact URL for an account used an unsupported protocol scheme</c>
      <c>unsupportedIdentifier</c>
      <c>An identifier is of an unsupported type</c>
      <c>userActionRequired</c>
      <c>Visit the “instance” URL and take actions specified there</c>
</texttable>

<t>This list is not exhaustive. The server MAY return errors whose “type” field is
set to a URI other than those defined above.  Servers MUST NOT use the ACME URN
namespace for errors not listed in the appropriate IANA registry (see <xref target="acme-urn-space"/>).  Clients SHOULD display the
“detail” field of all errors.</t>

<t>In the remainder of this document, we use the tokens in the table above to refer
to error types, rather than the full URNs.  For example, an “error of type
‘badCSR’” refers to an error document with “type” value
“urn:ietf:params:acme:error:badCSR”.</t>

<section anchor="subproblems" title="Subproblems">

<t>Sometimes a CA may need to return multiple errors in response to a request.
Additionally, the CA may need to attribute errors to specific
identifiers.  For instance, a newOrder request may contain multiple
identifiers for which the CA cannot issue. In this situation, an ACME
problem document MAY contain the “subproblems” field, containing a JSON
array of problem documents, each of which MAY contain an “identifier”
field. If present, the “identifier” field MUST contain an ACME identifier
(<xref target="iana-identifier"/>). The “identifier” field MUST NOT be present at
the top level in ACME problem documents. It can only be present in subproblems.
Subproblems need not all have the same type, and they do not need to match the top level type.</t>

<t>ACME clients may choose to use the “identifier” field of a subproblem
as a hint that an operation would succeed if that identifier were omitted. For
instance, if an order contains ten DNS identifiers, and the newOrder
request returns a problem document with two subproblems (referencing two
of those identifiers), the ACME client may choose to submit another order
containing only the eight identifiers not listed in the problem document.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json
Link: <https://example.com/acme/directory>;rel="index"

{
    "type": "urn:ietf:params:acme:error:malformed",
    "detail": "Some of the identifiers requested were rejected",
    "subproblems": [
        {
            "type": "urn:ietf:params:acme:error:malformed",
            "detail": "Invalid underscore in DNS name \"_example.com\"",
            "identifier": {
                "type": "dns",
                "value": "_example.com"
            }
        },
        {
            "type": "urn:ietf:params:acme:error:rejectedIdentifier",
            "detail": "This CA will not issue for \"example.net\"",
            "identifier": {
                "type": "dns",
                "value": "example.net"
            }
        }
    ]
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="certificate-management" title="Certificate Management">

<t>In this section, we describe the certificate management functions that ACME
enables:</t>

<t><list style="symbols">
  <t>Account Creation</t>
  <t>Ordering a Certificate</t>
  <t>Identifier Authorization</t>
  <t>Certificate Issuance</t>
  <t>Certificate Revocation</t>
</list></t>

<section anchor="resources" title="Resources">

<t>ACME is structured as a HTTP-based application with the following types of resources:</t>

<t><list style="symbols">
  <t>Account resources, representing information about an account
(<xref target="account-objects"/>, <xref target="account-management"/>)</t>
  <t>Order resources, representing an account’s requests to issue certificates
(<xref target="order-objects"/>)</t>
  <t>Authorization resources, representing an account’s authorization to act for an
identifier (<xref target="authorization-objects"/>)</t>
  <t>Challenge resources, representing a challenge to prove control of an
identifier (<xref target="identifier-authorization"/>, <xref target="identifier-validation-challenges"/>)</t>
  <t>Certificate resources, representing issued certificates
(<xref target="downloading-the-certificate"/>)</t>
  <t>A “directory” resource (<xref target="directory"/>)</t>
  <t>A “newNonce” resource (<xref target="getting-a-nonce"/>)</t>
  <t>A “newAccount” resource (<xref target="account-management"/>)</t>
  <t>A “newOrder” resource (<xref target="applying-for-certificate-issuance"/>)</t>
  <t>A “revokeCert” resource (<xref target="certificate-revocation"/>)</t>
  <t>A “keyChange” resource (<xref target="account-key-roll-over"/>)</t>
</list></t>

<t>The server MUST provide “directory” and “newNonce” resources.</t>

<t>ACME uses different URLs for different management functions. Each function is
listed in a directory along with its corresponding URL, so clients only need to
be configured with the directory URL.  These URLs are connected by a few
different link relations <xref target="RFC5988"/>.</t>

<t>The “up” link relation is used with challenge resources to indicate the
authorization resource to which a challenge belongs.  It is also used, with some
media types, from certificate resources to indicate a resource from which the
client may fetch a chain of CA certificates that could be used to validate the
certificate in the original resource.</t>

<t>The “index” link relation is present on all resources other than the
directory and indicates the URL of the directory.</t>

<t>The following diagram illustrates the relations between resources on an ACME
server.  For the most part, these relations are expressed by URLs provided as
strings in the resources’ JSON representations.  Lines with labels in quotes
indicate HTTP link relations.</t>

<figure title="ACME Resources and Relationships"><artwork><![CDATA[
                               directory
                                   |
                                   +--> newNonce
                                   |
       +----------+----------+-----+-----+------------+
       |          |          |           |            |
       |          |          |           |            |
       V          V          V           V            V
  newAccount   newAuthz   newOrder   revokeCert   keyChange
       |          |          |
       |          |          |
       V          |          V
    account       |        order --+--> finalize
                  |          |     |
                  |          |     +--> cert
                  |          V
                  +---> authorization
                            | ^
                            | | "up"
                            V |
                          challenge
]]></artwork></figure>

<t>The following table illustrates a typical sequence of requests required to
establish a new account with the server, prove control of an identifier, issue a
certificate, and fetch an updated certificate some time after issuance.  The
“-&gt;” is a mnemonic for a Location header field pointing to a created resource.</t>

<texttable>
      <ttcol align='left'>Action</ttcol>
      <ttcol align='left'>Request</ttcol>
      <ttcol align='left'>Response</ttcol>
      <c>Get directory</c>
      <c>GET  directory</c>
      <c>200</c>
      <c>Get nonce</c>
      <c>HEAD newNonce</c>
      <c>200</c>
      <c>Create account</c>
      <c>POST newAccount</c>
      <c>201 -&gt; account</c>
      <c>Submit order</c>
      <c>POST newOrder</c>
      <c>201 -&gt; order</c>
      <c>Fetch challenges</c>
      <c>POST-as-GET order’s authorization urls</c>
      <c>200</c>
      <c>Respond to challenges</c>
      <c>POST authorization challenge urls</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Finalize order</c>
      <c>POST order’s finalize url</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Download certificate</c>
      <c>POST-as-GET order’s certificate url</c>
      <c>200</c>
</texttable>

<t>The remainder of this section provides the details of how these resources are
structured and how the ACME protocol makes use of them.</t>

<section anchor="directory" title="Directory">

<t>In order to help clients configure themselves with the right URLs for each ACME
operation, ACME servers provide a directory object. This should be the only URL
needed to configure clients. It is a JSON object, whose field names are drawn from
the resource registry (<xref target="iana-resource"/>) and whose values are the corresponding
URLs.</t>

<texttable>
      <ttcol align='left'>Field</ttcol>
      <ttcol align='left'>URL in Value</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>keyChange</c>
      <c>Key change</c>
</texttable>

<t>There is no constraint on the URL of the directory except that it
should be different from the other ACME server resources’ URLs, and that it
should not clash with other services. For instance:</t>

<t><list style="symbols">
  <t>a host that functions as both an ACME and a Web server may want to keep
the root path “/” for an HTML “front page” and place the ACME
directory under the path “/acme”.</t>
  <t>a host that only functions as an ACME server could place the directory
under the path “/”.</t>
</list></t>

<t>If the ACME server does not implement pre-authorization (<xref target="pre-authorization"/>), it
MUST omit the “newAuthz” field of the directory.</t>

<t>The object MAY additionally contain a “meta” field. If present, it MUST be a
JSON object; each field in the object is an item of metadata relating to
the service provided by the ACME server.</t>

<t>The following metadata items are defined (<xref target="iana-meta"/>), all of which are OPTIONAL:</t>

<t><list style="hanging">
  <t hangText='termsOfService (optional, string):'>
  A URL identifying the current terms of service.</t>
  <t hangText='website (optional, string):'>
  An HTTP or HTTPS URL locating a website providing more
information about the ACME server.</t>
  <t hangText='caaIdentities (optional, array of string):'>
  The hostnames that the ACME server recognizes as referring to
itself for the purposes of CAA record validation as defined in
<xref target="RFC6844"/>.  Each string MUST represent the same sequence of ASCII
code points that the server will expect to see as the “Issuer Domain
Name” in a CAA issue or issuewild property tag.  This allows clients
to determine the correct issuer domain name to use when configuring
CAA records.</t>
  <t hangText='externalAccountRequired (optional, boolean):'>
  If this field is present and set to “true”, then the CA requires that all
newAccount requests include an “externalAccountBinding” field associating the
new account with an external account.</t>
</list></t>

<t>Clients access the directory by sending a GET request to the directory URL.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "newNonce": "https://example.com/acme/new-nonce",
  "newAccount": "https://example.com/acme/new-account",
  "newOrder": "https://example.com/acme/new-order",
  "newAuthz": "https://example.com/acme/new-authz",
  "revokeCert": "https://example.com/acme/revoke-cert",
  "keyChange": "https://example.com/acme/key-change",
  "meta": {
    "termsOfService": "https://example.com/acme/terms/2017-5-30",
    "website": "https://www.example.com/",
    "caaIdentities": ["example.com"],
    "externalAccountRequired": false
  }
}
]]></artwork></figure>

</section>
<section anchor="account-objects" title="Account Objects">

<t>An ACME account resource represents a set of metadata associated with an account.
Account resources have the following structure:</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this account. Possible values are “valid”, “deactivated”, and
“revoked”.  The value “deactivated” should be used to indicate client-initiated
deactivation whereas “revoked” should be used to indicate server-initiated
deactivation. See <xref target="status-changes"/>.</t>
  <t hangText='contact (optional, array of string):'>
  An array of URLs that the server can use to contact the client for issues
related to this account. For example, the server may wish to notify the
client about server-initiated revocation or certificate expiration.
For information on supported URL schemes, see <xref target="account-management"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Including this field in a newAccount request, with a value of true, indicates
the client’s agreement with the terms of service. This field cannot be updated
by the client.</t>
  <t hangText='externalAccountBinding (optional, object):'>
  Including this field in a newAccount request indicates approval by the holder
of an existing non-ACME account to bind that account to this ACME account. This
field is not updateable by the client. (See <xref target="external-account-binding"/>).</t>
  <t hangText='orders (required, string):'>
  A URL from which a list of orders submitted by this account can be fetched via
a POST-as-GET request, as described in <xref target="orders-list"/>.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "contact": [
    "mailto:cert-admin@example.com",
    "mailto:admin@example.com"
  ],
  "termsOfServiceAgreed": true,
  "orders": "https://example.com/acme/orders/rzGoeA"
}
]]></artwork></figure>

<section anchor="orders-list" title="Orders List">

<t>Each account object includes an “orders” URL from which a list of orders created
by the account can be fetched via POST-as-GET request. The result of the request
MUST be a JSON object whose “orders” field is an array of URLs, each identifying
an order belonging to the account.  The server SHOULD include pending orders
and SHOULD NOT include orders that are invalid in the array of URLs. The server
MAY return an incomplete list, along with a Link header field with a “next” link
relation indicating where further entries can be acquired.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"
Link: <https://example.com/acme/orders/rzGoeA?cursor=2>;rel="next"

{
  "orders": [
    "https://example.com/acme/order/TOlocE8rfgo",
    "https://example.com/acme/order/4E16bbL5iSw",
    /* more URLs not shown for example brevity */
    "https://example.com/acme/order/neBHYLfw0mg"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="order-objects" title="Order Objects">

<t>An ACME order object represents a client’s request for a certificate and is
used to track the progress of that order through to issuance.  Thus, the object
contains information about the requested certificate, the authorizations that
the server requires the client to complete, and any certificates that have
resulted from this order.</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this order.  Possible values are “pending”,
“ready”, “processing”, “valid”, and “invalid”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this order invalid, encoded
in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED for
objects with “pending” or “valid” in the status field.</t>
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the order pertains to.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.  This document defines the “dns”
identifier type.  See the registry defined in <xref target="iana-identifier"/>
for any others.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='error (optional, object):'>
  The error that occurred while processing the order, if any.
This field is structured as a problem document <xref target="RFC7807"/>.</t>
  <t hangText='authorizations (required, array of string):'>
  For pending orders, the authorizations that the client needs to complete
before the requested certificate can be issued (see
<xref target="identifier-authorization"/>), including unexpired authorizations that the client has completed in the past for identifiers specified in the order. The authorizations required are dictated by server policy; there may not be a 1:1 relationship between the order identifiers and the authorizations required. For final orders (in the “valid” or “invalid” state), the authorizations that
were completed.  Each entry is a URL from which an authorization can be fetched
with a POST-as-GET request.</t>
  <t hangText='finalize (required, string):'>
  A URL that a CSR must be POSTed to once all of the order’s authorizations are
satisfied to finalize the order. The result of a successful finalization will be
the population of the certificate URL for the order.</t>
  <t hangText='certificate (optional, string):'>
  A URL for the certificate that has been issued in response to this order.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2015-03-01T14:09:07.99Z",

  "identifiers": [
    { "type": "dns", "value": "example.com" },
    { "type": "dns", "value": "www.example.com" }
  ],

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/jWCdfHVGY2M"
}
]]></artwork></figure>

<t>Any identifier of type “dns” in a newOrder request MAY have a wildcard domain
name as its value. A wildcard domain name consists of a single asterisk
character followed by a single full stop character (“*.”) followed by a domain
name as defined for use in the Subject Alternate Name Extension by
<xref target="RFC5280"/>. An authorization returned by the server for a wildcard domain name
identifier MUST NOT include the asterisk and full stop (“*.”) prefix in the
authorization identifier value. The returned authorization MUST include the
optional “wildcard” field, with a value of true.</t>

<t>The elements of the “authorizations” and “identifiers” arrays are immutable once
set.  The server MUST NOT change the contents of either array after they are
created. If a client observes a change in the contents of either array, then it
SHOULD consider the order invalid.</t>

<t>The “authorizations” array of the order SHOULD reflect all authorizations
that the CA takes into account in deciding to issue, even if some authorizations
were fulfilled in earlier orders or in pre-authorization transactions.  For
example, if a CA allows multiple orders to be fulfilled based on a single
authorization transaction, then it SHOULD reflect that authorization in all of
the orders.</t>

<t>Note that just because an authorization URL is listed in the
“authorizations” array of an order object doesn’t mean that the
client is required to take action.  There are several reasons that
the referenced authorizations may already be valid:</t>

<t><list style="symbols">
  <t>The client completed the authorization as part of a previous order</t>
  <t>The client previously pre-authorized the identifier (see <xref target="pre-authorization"/>)</t>
  <t>The server granted the client authorization based on an external account</t>
</list></t>

<t>Clients SHOULD check the “status” field of an order to determine
whether they need to take any action.</t>

</section>
<section anchor="authorization-objects" title="Authorization Objects">

<t>An ACME authorization object represents a server’s authorization for an account
to represent an identifier.  In addition to the identifier, an authorization
includes several metadata fields, such as the status of the authorization (e.g.,
“pending”, “valid”, or “revoked”) and which challenges were used to validate
possession of the identifier.</t>

<t>The structure of an ACME authorization resource is as follows:</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier that the account is authorized to represent.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier (see below and <xref target="iana-identifier"/>).</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='status (required, string):'>
  The status of this authorization.  Possible values are “pending”,
“valid”, “invalid”, “deactivated”, “expired”, and “revoked”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this authorization invalid,
encoded in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED
for objects with “valid” in the “status” field.</t>
  <t hangText='challenges (required, array of objects):'>
  For pending authorizations, the challenges that the client can
fulfill in order to prove possession of the identifier.  For valid
authorizations, the challenge that was validated.  For invalid
authorizations, the challenge that was attempted and failed.  Each
array entry is an object with parameters required to validate the
challenge.  A client should attempt to fulfill one of these
challenges, and a server should consider any one of the challenges
sufficient to make the authorization valid.</t>
  <t hangText='wildcard (optional, boolean):'>
  This field MUST be present and true for authorizations created as
a result of a newOrder request containing a DNS identifier with a
value that was a wildcard domain name.  For other authorizations,
it MUST be absent.  Wildcard domain names are described in <xref target="order-objects"/>.</t>
</list></t>

<t>The only type of identifier defined by this specification is a fully qualified
domain name (type: “dns”). The domain name MUST be encoded in the
form in which it would appear in a certificate.  That is, it MUST be
encoded according to the rules in Section 7 of <xref target="RFC5280"/>.  Servers MUST verify
any identifier values that begin with the ASCII-Compatible Encoding prefix
“xn--” as defined in <xref target="RFC5890"/> are properly encoded. Wildcard domain names
(with “*” as the first label) MUST NOT be included in authorization objects. If
an authorization object conveys authorization for the base domain of a newOrder
DNS identifier containing a wildcard domain name, then the optional authorizations
“wildcard” field MUST be present with a value of true.</t>

<t><xref target="identifier-validation-challenges"/> describes a set of challenges for domain
name validation.</t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2015-03-01T14:09:07.99Z",

  "identifier": {
    "type": "dns",
    "value": "example.org"
  },

  "challenges": [
    {
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "type": "http-01",
      "status": "valid",
      "token": "DGyRejmCefe7v4NfDGDKfA",
      "validated": "2014-12-01T12:05:58.16Z"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

</section>
<section anchor="challenge-objects" title="Challenge Objects">

<t>An ACME challenge object represents a server’s offer to validate a
client’s possession of an identifier in a specific way.  Unlike the
other objects listed above, there is not a single standard structure
for a challenge object.  The contents of a challenge object depend
on the validation method being used.  The general structure of
challenge objects and an initial set of validation methods are
described in <xref target="identifier-validation-challenges"/>.</t>

</section>
<section anchor="status-changes" title="Status Changes">

<t>Each ACME object type goes through a simple state machine over its
lifetime.  The “status” field of the object indicates which state
the object is currently in.</t>

<t>Challenge objects are created in the “pending” state.  They
transition to the “processing” state when the client responds to the
challenge (see <xref target="responding-to-challenges"/>) and the server begins
attempting to validate that the client has completed the challenge.
Note that within the “processing” state, the server may attempt to
validate the challenge multiple times (see <xref target="retrying-challenges"/>).
Likewise, client requests for retries do not cause a state change.
If validation is successful, the challenge moves to the “valid”
state; if there is an error, the challenge moves to the “invalid”
state.</t>

<figure title="State Transitions for Challenge Objects"><artwork><![CDATA[
         pending
            |
            | Receive
            | response
            V
        processing <-+
            |   |    | Server retry or
            |   |    | client retry request
            |   +----+
            |
            |
Successful  |   Failed
validation  |   validation
  +---------+---------+
  |                   |
  V                   V
valid              invalid
]]></artwork></figure>

<t>Authorization objects are created in the “pending” state.  If one of
the challenges listed in the authorization transitions to the
“valid” state, then the authorization also changes to the “valid”
state.  If the client attempts to fulfill a challenge and fails, or
if there is an error while the authorization is still
pending, then the authorization transitions to the “invalid” state.
Once the authorization is in the “valid” state, it can expire
(“expired”), be deactivated by the client (“deactivated”, see
<xref target="deactivating-an-authorization"/>), or revoked by the server
(“revoked”).</t>

<figure title="State Transitions for Authorization Objects"><artwork><![CDATA[
                   pending --------------------+
                      |                        |
    Challenge failure |                        |
           or         |                        |
          Error       |  Challenge valid       |
            +---------+---------+              |
            |                   |              |
            V                   V              |
         invalid              valid            |
                                |              |
                                |              |
                                |              |
                 +--------------+--------------+
                 |              |              |
                 |              |              |
          Server |       Client |   Time after |
          revoke |   deactivate |    "expires" |
                 V              V              V
              revoked      deactivated      expired
]]></artwork></figure>

<t>Order objects are created in the “pending” state.  Once all of the
authorizations listed in the order object are in the “valid” state,
the order transitions to the “ready” state.  The order moves to the
“processing” state after the client submits a request to the order’s
“finalize” URL and the CA begins the issuance process for the
certificate.  Once the certificate is issued, the order enters the
“valid” state.  If an error occurs at any of these stages, the
order moves to the “invalid” state.  The order also moves to the
“invalid” state if it expires or one of its authorizations enters a
final state other than “valid” (“expired”, “revoked”, or “deactivated”).</t>

<figure title="State Transitions for Order Objects"><artwork><![CDATA[
 pending --------------+
    |                  |
    | All authz        |
    | "valid"          |
    V                  |
  ready ---------------+
    |                  |
    | Receive          |
    | finalize         |
    | request          |
    V                  |
processing ------------+
    |                  |
    | Certificate      | Error or
    | issued           | Authorization failure
    V                  V
  valid             invalid
]]></artwork></figure>

<t>Account objects are created in the “valid” state, since no further
action is required to create an account after a successful
newAccount request.  If the account is deactivated by the client  or
revoked by the server, it moves to the corresponding state.</t>

<figure title="State Transitions for Account Objects"><artwork><![CDATA[
                  valid
                    |
                    |
        +-----------+-----------+
 Client |                Server |
deactiv.|                revoke |
        V                       V
   deactivated               revoked
]]></artwork></figure>

<t>Note that some of these states may not ever appear in a “status”
field, depending on server behavior.  For example, a server that
issues synchronously will never show an order in the “processing”
state.  A server that deletes expired authorizations immediately
will never show an authorization in the “expired” state.</t>

</section>
</section>
<section anchor="getting-a-nonce" title="Getting a Nonce">

<t>Before sending a POST request to the server, an ACME client needs to have a
fresh anti-replay nonce to put in the “nonce” header of the JWS.  In most cases,
the client will have gotten a nonce from a previous request.  However, the
client might sometimes need to get a new nonce, e.g., on its first request to
the server or if an existing nonce is no longer valid.</t>

<t>To get a fresh nonce, the client sends a HEAD request to the newNonce resource
on the server.  The server’s response MUST include a Replay-Nonce header field
containing a fresh nonce and SHOULD have status code 200 (OK).  The
server MUST also respond to GET requests for this resource, returning an empty
body (while still providing a Replay-Nonce header) with a status code of 204 (No Content).</t>

<figure><artwork><![CDATA[
HEAD /acme/new-nonce HTTP/1.1
Host: example.com

HTTP/1.1 200 OK
Replay-Nonce: oFvnlFP1wIhRlYS2jTaXbA
Cache-Control: no-store
Link: <https://example.com/acme/directory>;rel="index"
]]></artwork></figure>

<t>Proxy caching of responses from the newNonce resource can cause
clients to receive the same nonce repeatedly, leading to “badNonce” errors.
The server MUST include a Cache-Control header field with the “no-store”
directive in responses for the newNonce resource, in order to prevent
caching of this resource.</t>

</section>
<section anchor="account-management" title="Account Management">

<t>In this section, we describe how an ACME client can create an
account on an ACME server and perform some modifications to the
account after it has been created.</t>

<t>A client creates a new account with the server by sending a POST request to the
server’s newAccount URL.  The body of the request is a stub account object
containing some subset of the following fields:</t>

<t><list style="hanging">
  <t hangText='contact (optional, array of string):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='onlyReturnExisting (optional, boolean):'>
  If this field is present with the value “true”, then the server MUST NOT
create a new account if one does not already exist.  This allows a client to
look up an account URL based on an account key (see
<xref target="finding-an-account-url-given-a-key"/>).</t>
  <t hangText='externalAccountBinding (optional, object):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/></t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": {...},
    "nonce": "6S8IqOGY7eL2lsGoTZYifg",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "termsOfServiceAgreed": true,
    "contact": [
      "mailto:cert-admin@example.com",
      "mailto:admin@example.com"
    ]
  }),
  "signature": "RZPOnYoPs1PhjszF...-nh6X1qtOFPB519I"
}
]]></artwork></figure>

<t>The server MUST ignore any values provided in the “orders” fields in account
objects sent by the client, as well as any other fields that it does not
recognize. If new fields are specified in the future, the specification of those
fields MUST describe whether they can be provided by the client. The server MUST
NOT reflect the “onlyReturnExisting” field or any unrecognized fields in the
resulting account object. This allows clients to detect when servers do not
support an extension field.</t>

<t>The server SHOULD validate that the contact URLs in the “contact” field are
valid and supported by the server. If the server validates contact URLs, it MUST
support the “mailto” scheme.  Clients MUST NOT provide a “mailto” URL in the
“contact” field that contains <spanx style="verb">hfields</spanx> <xref target="RFC6068"/> or more than one
<spanx style="verb">addr-spec</spanx> in the <spanx style="verb">to</spanx> component.  If a server encounters a “mailto” contact
URL that does not meet these criteria, then it SHOULD reject it as invalid.</t>

<t>If the server rejects a contact URL for using an
unsupported scheme, it MUST return an error of type “unsupportedContact”, with
a description of the error and what types of contact URLs the server
considers acceptable. If the server rejects a contact URL for using a supported
scheme but an invalid value, then the server MUST return an error of type
“invalidContact”.</t>

<t>If the server wishes to require the client to agree to terms under which the ACME
service is to be used, it MUST indicate the URL where such terms can be accessed
in the “termsOfService” subfield of the “meta” field in the directory object,
and the server MUST reject newAccount requests that do not have the
“termsOfServiceAgreed” field set to “true”.  Clients SHOULD NOT automatically agree
to terms by default.  Rather, they SHOULD require some user interaction for
agreement to terms.</t>

<t>The server creates an account and stores the public key used to verify the
JWS (i.e., the “jwk” element of the JWS header) to authenticate future requests
from the account.  The server returns this account object in a 201 (Created)
response, with the account URL in a Location header field. The account URL is
used as the “kid” value in the JWS authenticating subsequent requests by this
account (see <xref target="request-authentication"/>).  The account URL is also used for
requests for management actions on this account, as described below.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Replay-Nonce: D8s4D2mLs8Vn-goWuPQeKA
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/acct/evOfKhNU60wg

{
  "status": "valid",

  "contact": [
    "mailto:cert-admin@example.com",
    "mailto:admin@example.com"
  ],

  "orders": "https://example.com/acme/acct/evOfKhNU60wg/orders"
}
]]></artwork></figure>

<section anchor="finding-an-account-url-given-a-key" title="Finding an Account URL Given a Key">

<t>If the server receives a newAccount request signed with a key for which it already has an account registered with the provided account key,
then it MUST return a response with status code 200 (OK) and provide the URL of
that account in the Location header field.  The body of this response represents the account object as it existed on the server before this request; any fields in the request object MUST be ignored.  This allows a client that has
an account key but not the corresponding account URL to recover the account URL.</t>

<t>If a client wishes to find the URL for an existing account and does not want an
account to be created if one does not already exist, then it SHOULD do so by
sending a POST request to the newAccount URL with a JWS whose payload has an
“onlyReturnExisting” field set to “true” ({“onlyReturnExisting”: true}).
If a client sends such a request and an account does not exist, then the server
MUST return an error response with status code 400 (Bad Request) and type
“urn:ietf:params:acme:error:accountDoesNotExist”.</t>

</section>
<section anchor="account-update" title="Account Update">

<t>If the client wishes to update this information in the future, it sends a POST
request with updated information to the account URL.  The server MUST ignore any
updates to the “orders” field, “termsOfServiceAgreed” field (see <xref target="changes-of-terms-of-service"/>), the “status” field (except as allowed by <xref target="account-deactivation"/>), or any other fields it does not recognize. If the server
accepts the update, it MUST return a response with a 200 (OK) status code and the
resulting account object.</t>

<t>For example, to update the contact information in the above account, the client
could send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ax5RnthDqp_Yf4_HZnFLmA",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "contact": [
      "mailto:certificates@example.com",
      "mailto:admin@example.com"
    ]
  }),
  "signature": "hDXzvcj8T6fbFbmn...rDzXzzvzpRy64N0o"
}
]]></artwork></figure>

</section>
<section anchor="changes-of-terms-of-service" title="Changes of Terms of Service">

<t>As described above, a client can indicate its agreement with the CA’s terms of
service by setting the “termsOfServiceAgreed” field in its account object to
“true”.</t>

<t>If the server has changed its terms of service since a client initially agreed,
and the server is unwilling to process a request without explicit agreement to
the new terms, then it MUST return an error response with status code 403
(Forbidden) and type “urn:ietf:params:acme:error:userActionRequired”.  This
response MUST include a Link header field with link relation “terms-of-service” and
the latest terms-of-service URL.</t>

<t>The problem document returned with the error MUST also include an “instance”
field, indicating a URL that the client should direct a human user to visit in
order for instructions on how to agree to the terms.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Replay-Nonce: T81bdZroZ2ITWSondpTmAw
Link: <https://example.com/acme/directory>;rel="index"
Link: <https://example.com/acme/terms/2017-6-02>;rel="terms-of-service"
Content-Type: application/problem+json
Content-Language: en

{
  "type": "urn:ietf:params:acme:error:userActionRequired",
  "detail": "Terms of service have changed",
  "instance": "https://example.com/acme/agreement/?token=W8Ih3PswD-8"
}
]]></artwork></figure>

</section>
<section anchor="external-account-binding" title="External Account Binding">

<t>The server MAY require a value for the “externalAccountBinding” field to be
present in “newAccount” requests.  This can be used to associate an ACME account with an
existing account in a non-ACME system, such as a CA customer database.</t>

<t>To enable ACME account binding, the CA operating the ACME server needs to provide the ACME client with a
MAC key and a key identifier, using some mechanism outside of ACME. The key
identifier MUST be an ASCII string. The MAC key SHOULD be provided in
base64url-encoded form, to maximize compatibility between non-ACME provisioning systems
and ACME clients.</t>

<t>The ACME client then computes a binding JWS to indicate the external account holder’s
approval of the ACME account key.  The payload of this JWS is the ACME account key
being registered, in JWK form.  The protected header of the JWS MUST meet the
following criteria:</t>

<t><list style="symbols">
  <t>The “alg” field MUST indicate a MAC-based algorithm</t>
  <t>The “kid” field MUST contain the key identifier provided by the CA</t>
  <t>The “nonce” field MUST NOT be present</t>
  <t>The “url” field MUST be set to the same value as the outer JWS</t>
</list></t>

<t>The “signature” field of the JWS will contain the MAC value computed with the
MAC key provided by the CA.</t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": /* account key */,
    "nonce": "K60BWPrMQG9SDxBDS_xtSw",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "contact": ["mailto:example@anonymous.invalid"],
    "termsOfServiceAgreed": true,

    "externalAccountBinding": {
      "protected": base64url({
        "alg": "HS256",
        "kid": /* key identifier from CA */,
        "url": "https://example.com/acme/new-account"
      }),
      "payload": base64url(/* same as in "jwk" above */),
      "signature": /* MAC using MAC key from CA */
    }
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>If such a CA requires that newAccount requests contain an “externalAccountBinding”
field, then it MUST provide the value “true” in the “externalAccountRequired” subfield
of the “meta” field in the directory object.  If the CA receives a
newAccount request without an “externalAccountBinding” field, then it SHOULD
reply with an error of type “externalAccountRequired”.</t>

<t>When a CA receives a newAccount request containing an
“externalAccountBinding” field, it decides whether or not to verify the
binding.  If the CA does not verify the binding, then it MUST NOT reflect the
“externalAccountBinding” field in the resulting account object (if any).  To
verify the account binding, the CA MUST take the following steps:</t>

<t><list style="numbers">
  <t>Verify that the value of the field is a well-formed JWS</t>
  <t>Verify that the JWS protected field meets the above criteria</t>
  <t>Retrieve the MAC key corresponding to the key identifier in the “kid” field</t>
  <t>Verify that the MAC on the JWS verifies using that MAC key</t>
  <t>Verify that the payload of the JWS represents the same key as was used to
verify the outer JWS (i.e., the “jwk” field of the outer JWS)</t>
</list></t>

<t>If all of these checks pass and the CA creates a new account, then the CA may
consider the new account associated with the external account corresponding to
the MAC key.  The account object the CA returns MUST include an
“externalAccountBinding” field with the same value as the field in
the request.  If any of these checks fail, then the CA MUST
reject the newAccount request.</t>

</section>
<section anchor="account-key-roll-over" title="Account Key Rollover">

<t>A client may wish to change the public key that is associated with an account in
order to recover from a key compromise or proactively mitigate the impact of an
unnoticed key compromise.</t>

<t>To change the key associated with an account, the client sends a
request to the server containing signatures by both the old and new
keys.  The signature by the new key covers the account URL and the
old key, signifying a request by the new key holder to take over the
account from the old key holder.  The signature by the old key
covers this request and its signature, and indicates the old key
holder’s assent to the rollover request.</t>

<t>To create this request object, the client first constructs a
keyChange object describing the account to be updated and its
account key:</t>

<t><list style="hanging">
  <t hangText='account (required, string):'>
  The URL for the account being modified.  The content of this field MUST be the
exact string provided in the Location header field in response to the
newAccount request that created the account.</t>
  <t hangText='oldKey (required, JWK):'>
  The JWK representation of the old key.</t>
</list></t>

<t>The client then encapsulates the keyChange object in an “inner” JWS, signed with the
requested new account key.
This “inner” JWS becomes the payload for the “outer” JWS that is the body of the ACME
request.</t>

<t>The outer JWS MUST meet the normal requirements for an ACME JWS (see
<xref target="request-authentication"/>).  The inner JWS MUST meet the normal requirements,
with the following differences:</t>

<t><list style="symbols">
  <t>The inner JWS MUST have a “jwk” header parameter, containing the public key of
the new key pair.</t>
  <t>The inner JWS MUST have the same “url” header parameter as the outer JWS.</t>
  <t>The inner JWS MUST omit the “nonce” header parameter.</t>
</list></t>

<t>This transaction has signatures from both the old and new keys so that the
server can verify that the holders of the two keys both agree to the change.
The signatures are nested to preserve the property that all signatures on POST
messages are signed by exactly one key.  The “inner” JWS effectively
represents a request by the holder of the new key to take over the
account form the holder of the old key.  The “outer” JWS represents
the current account holder’s assent to this request.</t>

<figure><artwork><![CDATA[
POST /acme/key-change HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "S9XaOcxP5McpnTcWPIhYuB",
    "url": "https://example.com/acme/key-change"
  }),
  "payload": base64url({
    "protected": base64url({
      "alg": "ES256",
      "jwk": /* new key */,
      "url": "https://example.com/acme/key-change"
    }),
    "payload": base64url({
      "account": "https://example.com/acme/acct/evOfKhNU60wg",
      "oldKey": /* old key */
    }),
    "signature": "Xe8B94RD30Azj2ea...8BmZIRtcSKPSd8gU"
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>On receiving keyChange request, the server MUST perform the following steps in
addition to the typical JWS validation:</t>

<t><list style="numbers">
  <t>Validate the POST request belongs to a currently active account, as described
in <xref target="message-transport"/>.</t>
  <t>Check that the payload of the JWS is a well-formed JWS object (the “inner
JWS”).</t>
  <t>Check that the JWS protected header of the inner JWS has a “jwk” field.</t>
  <t>Check that the inner JWS verifies using the key in its “jwk” field.</t>
  <t>Check that the payload of the inner JWS is a well-formed keyChange object
(as described above).</t>
  <t>Check that the “url” parameters of the inner and outer JWSs are the same.</t>
  <t>Check that the “account” field of the keyChange object contains the URL for
the account matching the old key (i.e., the “kid” field in the
outer JWS).</t>
  <t>Check that the “oldKey” field of the keyChange object is the
same as the account key for the account in question.</t>
  <t>Check that no account exists whose account key is the same as the key in the
“jwk” header parameter of the inner JWS.</t>
</list></t>

<t>If all of these checks pass, then the server updates the corresponding account
by replacing the old account key with the new public key and returns status
code 200 (OK). Otherwise, the server responds with an error status code and a
problem document describing the error.  If there is an existing account with
the new key provided, then the server SHOULD use status code 409 (Conflict) and
provide the URL of that account in the Location header field.</t>

<t>Note that changing the account key for an account SHOULD NOT have any other
impact on the account.  For example, the server MUST NOT invalidate pending
orders or authorization transactions based on a change of account key.</t>

</section>
<section anchor="account-deactivation" title="Account Deactivation">

<t>A client can deactivate an account by posting a signed update to the account URL with
a status field of “deactivated”.  Clients may wish to do this when the account
key is compromised or decommissioned. A deactivated account can no longer request
certificate issuance or access resources related to the account, such as orders
or authorizations.  If a server receives a POST or POST-as-GET from
a deactivated account, it MUST return an error response with status
code 401 (Unauthorized) and type “urn:ietf:params:acme:error:unauthorized”.</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ntuJWWSic4WVNSqeUmshgg",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "earzVLd3m5M4xJzR...bVTqn7R08AKOVf3Y"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key. If the
server accepts the deactivation request, it replies with a 200 (OK) status code
and the current contents of the account object.</t>

<t>Once an account is deactivated, the server MUST NOT accept further requests
authorized by that account’s key. The server SHOULD cancel any pending operations authorized
by the account’s key, such as certificate orders. A server may take a variety of actions in
response to an account deactivation, e.g., deleting data related to that account
or sending mail to the account’s contacts.  Servers SHOULD NOT revoke
certificates issued by the deactivated account, since this could cause
operational disruption for servers using these certificates. ACME does not
provide a way to reactivate a deactivated account.</t>

</section>
</section>
<section anchor="applying-for-certificate-issuance" title="Applying for Certificate Issuance">

<t>The client begins the certificate issuance process by sending a POST request to the server’s
newOrder resource.  The body of the POST is a JWS object whose JSON payload is
a subset of the order object defined in <xref target="order-objects"/>, containing the fields
that describe the certificate to be issued:</t>

<t><list style="hanging">
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the client wishes to submit an order for.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-order HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "5XJ1L3lEkMG7tR6pA00clA",
    "url": "https://example.com/acme/new-order"
  }),
  "payload": base64url({
    "identifiers": [
      { "type": "dns", "value": "example.com" }
    ],
    "notBefore": "2016-01-01T00:04:00+04:00",
    "notAfter": "2016-01-08T00:04:00+04:00"
  }),
  "signature": "H6ZXtGjTZyUnPeKn...wEA4TklBdh3e454g"
}
]]></artwork></figure>

<t>The server MUST return an error if it cannot fulfill the request as specified,
and it MUST NOT issue a certificate with contents other than those requested.  If
the server requires the request to be modified in a certain way, it should
indicate the required changes using an appropriate error type and description.</t>

<t>If the server is willing to issue the requested certificate, it responds with a
201 (Created) response.  The body of this response is an order object reflecting
the client’s request and any authorizations the client must complete before the
certificate will be issued.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Replay-Nonce: MYAuvOpaoIiywTezizk5vw
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "pending",
  "expires": "2016-01-01T00:00:00Z",

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "identifiers": [
    { "type": "dns", "value": "example.com" },
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize"
}
]]></artwork></figure>

<t>The order object returned by the server represents a promise that if the
client fulfills the server’s requirements before the “expires” time, then the
server will be willing to finalize the order upon request and issue the
requested certificate.  In the order object, any authorization referenced in the
“authorizations” array whose status is “pending” represents an authorization
transaction that the client must complete before the server will issue the
certificate (see <xref target="identifier-authorization"/>).  If the client fails to complete
the required actions before the “expires” time, then the server SHOULD change
the status of the order to “invalid” and MAY delete the order resource. Clients
MUST NOT make any assumptions about the sort order of “identifiers” or
“authorizations” elements in the returned order object.</t>

<t>Once the client believes it has fulfilled the server’s requirements, it should
send a POST request to the order resource’s finalize URL. The POST body MUST
include a CSR:</t>

<t><list style="hanging">
  <t hangText='csr (required, string):'>
  A CSR encoding the parameters for the certificate being requested <xref target="RFC2986"/>.
The CSR is sent in the base64url-encoded version of the DER format.  (Note:
Because this field uses base64url, and does not include headers, it is different
from PEM.)</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/order/TOlocE8rfgo/finalize HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "MSF2j2nawWHPxxkE3ZJtKQ",
    "url": "https://example.com/acme/order/TOlocE8rfgo/finalize"
  }),
  "payload": base64url({
    "csr": "MIIBPTCBxAIBADBFMQ...FS6aKdZeGsysoCo4H9P",
  }),
  "signature": "uOrUfIIk5RyQ...nw62Ay1cl6AB"
}
]]></artwork></figure>

<t>The CSR encodes the client’s requests with regard to the content of the
certificate to be issued.  The CSR MUST indicate the exact same set of requested
identifiers as the initial newOrder request.  Identifiers of type “dns” MUST appear either in the commonName portion
of the requested subject name or in an extensionRequest attribute <xref target="RFC2985"/>
requesting a subjectAltName extension, or both.  (These identifiers may appear
in any sort order.)  Specifications that define
new identifier types must specify where in the certificate signing
request these
identifiers can appear.</t>

<t>A request to finalize an order will result in an error if the CA is unwilling to issue a certificate corresponding to the submitted CSR.  For example:</t>

<t><list style="symbols">
  <t>If the CSR and order identifiers differ</t>
  <t>If the account is not authorized for the identifiers indicated in the CSR</t>
  <t>If the CSR requests extensions that the CA is not willing to include</t>
</list></t>

<t>In such cases, the problem document returned by the server SHOULD
use error code “badCSR” and describe specific reasons the CSR was
rejected in its “detail” field.  After returning such an error, the
server SHOULD leave the order in the “ready” state, to allow the
client to submit a new finalize request with an amended CSR.</t>

<t>A request to finalize an order will result in error if the order is not in the
“ready” state.  In such cases, the server MUST return a 403 (Forbidden) error
with a problem document of type “orderNotReady”.  The client should then send a
POST-as-GET request to the order resource to obtain its current state.  The
status of the order will indicate what action the client should take (see
below).</t>

<t>If a request to finalize an order is successful, the server will return a 200
(OK) with an updated order object.  The status of the order will indicate what
action the client should take:</t>

<t><list style="symbols">
  <t>“invalid”: The certificate will not be issued.  Consider this order process
abandoned.</t>
  <t>“pending”: The server does not believe that the client has fulfilled the
requirements.  Check the “authorizations” array for entries that are still
pending.</t>
  <t>“ready”: The server agrees that the requirements have been
fulfilled, and is awaiting finalization.  Submit a finalization
request.</t>
  <t>“processing”: The certificate is being issued. Send a POST-as-GET request after the
time given in the Retry-After header field of the response, if
any.</t>
  <t>“valid”: The server has issued the certificate and provisioned its URL to the
“certificate” field of the order.  Download the certificate.</t>
</list></t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: CGf81JWBsq8QyIgPCi9Q9X
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "valid",
  "expires": "2015-12-31T00:17:00.00-09:00",

  "notBefore": "2015-12-31T00:17:00.00-09:00",
  "notAfter": "2015-12-31T00:17:00.00-09:00",

  "identifiers": [
    { "type": "dns", "value": "example.com" },
    { "type": "dns", "value": "www.example.com" }
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/mAt3xBGaobw"
}
]]></artwork></figure>

<section anchor="pre-authorization" title="Pre-authorization">

<t>The order process described above presumes that authorization objects are
created reactively, in response to a certificate order.  Some servers
may also wish to enable clients to obtain authorization for an identifier
proactively, outside of the context of a specific issuance.  For example, a
client hosting virtual servers for a collection of names might wish to obtain
authorization before any virtual servers are created and only create a certificate when
a virtual server starts up.</t>

<t>In some cases, a CA running an ACME server might have a completely external,
non-ACME process for authorizing a client to issue certificates for an identifier.  In these
cases, the CA should provision its ACME server with authorization objects
corresponding to these authorizations and reflect them as already valid in any
orders submitted by the client.</t>

<t>If a CA wishes to allow pre-authorization within ACME, it can offer a “new
authorization” resource in its directory by adding the field “newAuthz” with a
URL for the newAuthz resource.</t>

<t>To request authorization for an identifier, the client sends a POST request to
the newAuthz resource specifying the identifier for which authorization
is being requested.</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier to appear in the resulting authorization object
(see <xref target="authorization-objects"/>).

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-authz HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/new-authz"
  }),
  "payload": base64url({
    "identifier": {
      "type": "dns",
      "value": "example.net"
    }
  }),
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}
]]></artwork></figure>

<t>Note that because the identifier in a pre-authorization request is
the exact identifier to be included in the authorization object,
pre-authorization cannot be used to authorize issuance of certificates
containing wildcard domain names.</t>

<t>Before processing the authorization request, the server SHOULD determine whether
it is willing to issue certificates for the identifier.  For example, the server
should check that the identifier is of a supported type.  Servers might also
check names against a blacklist of known high-value identifiers.  If the server
is unwilling to issue for the identifier, it SHOULD return an error
with status code 403 (Forbidden), with a problem document describing
the reason for the rejection.</t>

<t>If the server is willing to proceed, it builds a pending authorization object
from the inputs submitted by the client:</t>

<t><list style="symbols">
  <t>“identifier” the identifier submitted by the client</t>
  <t>“status” MUST be “pending” unless the server has out-of-band information
about the client’s authorization status</t>
  <t>“challenges” as selected by the server’s policy for this identifier</t>
</list></t>

<t>The server allocates a new URL for this authorization and returns a 201
(Created) response with the authorization URL in the Location header field and
the JSON authorization object in the body.  The client then follows the process
described in <xref target="identifier-authorization"/> to complete the authorization process.</t>

</section>
<section anchor="downloading-the-certificate" title="Downloading the Certificate">

<t>To download the issued certificate, the client simply sends a POST-as-GET request to the
certificate URL.</t>

<t>The default format of the certificate is application/pem-certificate-chain (see <xref target="iana-considerations"/>).</t>

<t>The server MAY provide one or more link relation header fields <xref target="RFC5988"/> with
relation “alternate”. Each such field SHOULD express an alternative certificate
chain starting with the same end-entity certificate. This can be used to express
paths to various trust anchors. Clients can fetch these alternates and use their
own heuristics to decide which is optimal.</t>

<figure><artwork><![CDATA[
POST /acme/cert/mAt3xBGaobw HTTP/1.1
Host: example.com
Content-Type: application/jose+json
Accept: application/pem-certificate-chain

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/cert/mAt3xBGaobw"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/pem-certificate-chain
Link: <https://example.com/acme/directory>;rel="index"

-----BEGIN CERTIFICATE-----
[End-entity certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Issuer certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Other certificate contents]
-----END CERTIFICATE-----
]]></artwork></figure>

<t>A certificate resource represents a single, immutable certificate. If the client
wishes to obtain a renewed certificate, the client initiates a new order process
to request one.</t>

<t>Because certificate resources are immutable once issuance is complete, the
server MAY enable the caching of the resource by adding Expires and
Cache-Control header fields specifying a point in time in the distant future. These
header fields have no relation to the certificate’s period of validity.</t>

<t>The ACME client MAY request other formats by including an Accept
header field <xref target="RFC7231"/> in its request.  For example, the client could use the media type
<spanx style="verb">application/pkix-cert</spanx> <xref target="RFC2585"/> or <spanx style="verb">application/pkcs7-mime</spanx> <xref target="RFC5751"/> to request the end-entity certificate
in DER format. Server support for alternate formats is OPTIONAL. For
formats that can only express a single certificate, the server SHOULD
provide one or more <spanx style="verb">Link: rel="up"</spanx> header fields pointing to an issuer or
issuers so that ACME clients can build a certificate chain as defined
in TLS (see Section 4.4.2 of <xref target="RFC8446"/>).</t>

</section>
</section>
<section anchor="identifier-authorization" title="Identifier Authorization">

<t>The identifier authorization process establishes the authorization of an account
to manage certificates for a given identifier.  This process assures the
server of two things:</t>

<t><list style="numbers">
  <t>That the client controls the private key of the account key pair, and</t>
  <t>That the client controls the identifier in question.</t>
</list></t>

<t>This process may be repeated to associate multiple identifiers to a key pair
(e.g., to request certificates with multiple identifiers) or to associate
multiple accounts with an identifier (e.g., to allow multiple entities to manage
certificates).</t>

<t>Authorization resources are created by the server in response to certificate
orders or authorization requests submitted by an account key holder; their
URLs are provided to the client in the responses to these requests.  The
authorization object is implicitly tied to the account key used to sign the
request.</t>

<t>When a client receives an order from the server in reply to a new order request, it downloads the authorization
resources by sending POST-as-GET requests to the indicated URLs.  If the client
initiates authorization using a request to the newAuthz resource, it
will have already received the pending authorization object in the response
to that request.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"

{
  "status": "pending",
  "expires": "2018-03-03T14:09:30Z",

  "identifier": {
    "type": "dns",
    "value": "example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    },
    {
      "type": "dns-01",
      "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

<section anchor="responding-to-challenges" title="Responding to Challenges">

<t>To prove control of the identifier and receive authorization, the client needs to
provision the required challenge response based on the challenge type and
indicate to the server that it is ready for the challenge validation to
be attempted.</t>

<t>The client indicates to the server that it is ready for the challenge validation by
sending an empty JSON body (<spanx style="verb">{}</spanx>) carried in a POST request to the challenge
URL (not the authorization URL).</t>

<t>For example, if the client were to respond to the “http-01” challenge in the
above authorization, it would send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4 HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "Q_s3MWoqT05TrdkM2MTDcw",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "9cbg5JO1Gf5YLjjz...SpkUfcdPai9uVYYQ"
}
]]></artwork></figure>

<t>The server updates the authorization document by updating its representation of
the challenge with the response object provided by the client.  The server MUST
ignore any fields in the response object that are not specified as response
fields for this type of challenge.  The server provides a 200 (OK) response
with the updated challenge object as its body.</t>

<t>If the client’s response is invalid for any reason or does not provide the
server with appropriate information to validate the challenge, then the server
MUST return an HTTP error.  On receiving such an error, the client SHOULD undo
any actions that have been taken to fulfill the challenge, e.g., removing files
that have been provisioned to a web server.</t>

<t>The server is said to “finalize” the authorization when it has completed
one of the validations.  This is done by assigning the authorization a status of “valid”
or “invalid”, corresponding to whether it considers the account authorized
for the identifier. If the final state is “valid”, then the server MUST include
an “expires” field. When finalizing an authorization, the server MAY remove
challenges other than the one that was completed, and it may modify the “expires”
field. The server SHOULD NOT remove challenges with status “invalid”.</t>

<t>Usually, the validation process will take some time, so the client will need to
poll the authorization resource to see when it is finalized.  For challenges
where the client can tell when the server has validated the challenge (e.g., by
seeing an HTTP or DNS request from the server), the client SHOULD NOT begin
polling until it has seen the validation request from the server.</t>

<t>To check on the status of an authorization, the client sends a POST-as-GET request to
the authorization URL, and the server responds with the current authorization
object. In responding to poll requests while the validation is still in
progress, the server MUST return a 200 (OK) response and MAY include a
Retry-After header field to suggest a polling interval to the client.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"

{
  "status": "valid",
  "expires": "2018-09-09T14:09:01.13Z",

  "identifier": {
    "type": "dns",
    "value": "example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "status": "valid",
      "validated": "2014-12-01T12:05:13.72Z",
      "token": "IlirfxKKXAsHtmzK29Pj8A"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

</section>
<section anchor="deactivating-an-authorization" title="Deactivating an Authorization">

<t>If a client wishes to relinquish its authorization to issue certificates for an
identifier, then it may request that the server deactivate each authorization
associated with it by sending POST requests with the static object
{“status”: “deactivated”} to each authorization URL.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "xWCM9lGbIyCgue8di6ueWQ",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "srX9Ji7Le9bjszhu...WTFdtujObzMtZcx4"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key
corresponding to the account that owns the authorization. If the server accepts
the deactivation, it should reply with a 200 (OK) status code and the updated
contents of the authorization object.</t>

<t>The server MUST NOT treat deactivated authorization objects as sufficient for
issuing certificates.</t>

</section>
</section>
<section anchor="certificate-revocation" title="Certificate Revocation">

<t>To request that a certificate be revoked, the client sends a POST request to
the ACME server’s revokeCert URL.  The body of the POST is a JWS object whose
JSON payload contains the certificate to be revoked:</t>

<t><list style="hanging">
  <t hangText='certificate (required, string):'>
  The certificate to be revoked, in the base64url-encoded version of the DER
format.  (Note: Because this field uses base64url, and does not include headers,
it is different from PEM.)</t>
  <t hangText='reason (optional, int):'>
  One of the revocation reasonCodes defined in Section 5.3.1 of <xref target="RFC5280"/>
to be used when generating OCSP responses and CRLs. If this field is not set,
the server SHOULD omit the reasonCode CRL entry extension when generating OCSP
responses and CRLs. The server MAY disallow a subset of reasonCodes from being
used by the user. If a request contains a disallowed reasonCode, then the server MUST
reject it with the error type “urn:ietf:params:acme:error:badRevocationReason”.
The problem document detail SHOULD indicate which reasonCodes are allowed.</t>
</list></t>

<t>Revocation requests are different from other ACME requests in that they can be
signed with either an account key pair or the key pair in the certificate.</t>

<t>Example using an account key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 4
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Example using the certificate key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "RS256",
    "jwk": /* certificate's public key */,
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 1
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Before revoking a certificate, the server MUST verify that the key used to sign
the request is authorized to revoke the certificate.  The server MUST consider
at least the following accounts authorized for a given certificate:</t>

<t><list style="symbols">
  <t>the account that issued the certificate.</t>
  <t>an account that holds authorizations for all of the identifiers in the
certificate.</t>
</list></t>

<t>The server MUST also consider a revocation request valid if it is signed with
the private key corresponding to the public key in the certificate.</t>

<t>If the revocation succeeds, the server responds with status code 200 (OK).  If
the revocation fails, the server returns an error.  For example, if the certificate
has already been revoked, the server returns an error response with status code 400
(Bad Request) and type “urn:ietf:params:acme:error:alreadyRevoked”.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: IXVHDyxIRGcTE0VSblhPzw
Content-Length: 0
Link: <https://example.com/acme/directory>;rel="index"

--- or ---

HTTP/1.1 403 Forbidden
Replay-Nonce: IXVHDyxIRGcTE0VSblhPzw
Content-Type: application/problem+json
Content-Language: en
Link: <https://example.com/acme/directory>;rel="index"

{
  "type": "urn:ietf:params:acme:error:unauthorized",
  "detail": "No authorization provided for name example.net"
}
]]></artwork></figure>

</section>
</section>
<section anchor="identifier-validation-challenges" title="Identifier Validation Challenges">

<t>There are few types of identifiers in the world for which there is a standardized
mechanism to prove possession of a given identifier.  In all practical cases,
CAs rely on a variety of means to test whether an entity applying for a
certificate with a given identifier actually controls that identifier.</t>

<t>Challenges provide the server with assurance that an account holder is also
the entity that controls an identifier.  For each type of challenge, it must be
the case that, in order for an entity to successfully complete the challenge, the
entity must both:</t>

<t><list style="symbols">
  <t>Hold the private key of the account key pair used to respond to the challenge, and</t>
  <t>Control the identifier in question.</t>
</list></t>

<t><xref target="security-considerations"/> documents how the challenges defined in this
document meet these requirements.  New challenges will need to document how they
do.</t>

<t>ACME uses an extensible challenge/response framework for identifier validation.
The server presents a set of challenges in the authorization object it sends to a
client (as objects in the “challenges” array), and the client responds by
sending a response object in a POST request to a challenge URL.</t>

<t>This section describes an initial set of challenge types.  The definition of a
challenge type includes:</t>

<t><list style="numbers">
  <t>Content of challenge objects</t>
  <t>Content of response objects</t>
  <t>How the server uses the challenge and response to verify control of an
identifier</t>
</list></t>

<t>Challenge objects all contain the following basic fields:</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The type of challenge encoded in the object.</t>
  <t hangText='url (required, string):'>
  The URL to which a response can be posted.</t>
  <t hangText='status (required, string):'>
  The status of this challenge.  Possible values are “pending”,
“processing”, “valid”, and “invalid” (see <xref target="status-changes"/>).</t>
  <t hangText='validated (optional, string):'>
  The time at which the server validated this challenge, encoded in the
format specified in <xref target="RFC3339"/>.  This field is REQUIRED if the
“status” field is “valid”.</t>
  <t hangText='error (optional, object):'>
  Error that occurred while the server was validating the challenge, if any,
structured as a problem document <xref target="RFC7807"/>. Multiple errors can be indicated
by using subproblems <xref target="subproblems"/>. A challenge object with an error MUST have
status equal to “invalid”.</t>
</list></t>

<t>All additional fields are specified by the challenge type.  If the server sets a
challenge’s “status” to “invalid”, it SHOULD also include the “error” field to
help the client diagnose why the challenge failed.</t>

<t>Different challenges allow the server to obtain proof of different aspects of
control over an identifier.  In some challenges, like HTTP and DNS, the
client directly proves its ability to do certain things related to the
identifier.  The choice of which challenges to offer to a client under which
circumstances is a matter of server policy.</t>

<t>The identifier validation challenges described in this section all relate to
validation of domain names.  If ACME is extended in the future to support other
types of identifiers, there will need to be new challenge types, and they will
need to specify which types of identifier they apply to.</t>

<section anchor="key-authorizations" title="Key Authorizations">

<t>All challenges defined in this document make use of a key authorization
string.  A key authorization is a string that concatenates the token for the
challenge with a key fingerprint, separated by a “.” character:</t>

<figure><artwork><![CDATA[
keyAuthorization = token || '.' || base64url(Thumbprint(accountKey))
]]></artwork></figure>

<t>The “Thumbprint” step indicates the computation specified in <xref target="RFC7638"/>,
using the SHA-256 digest <xref target="FIPS180-4"></xref>.  As noted in <xref target="RFC7518"/> any prepended
zero octets in the fields of a JWK object MUST be stripped before doing the computation.</t>

<t>As specified in the individual challenges below, the token for a challenge is a
string comprised entirely of characters in the URL-safe base64 alphabet.
The “||” operator indicates concatenation of strings.</t>

</section>
<section anchor="retrying-challenges" title="Retrying Challenges">

<t>ACME challenges typically require the client to set up some network-accessible
resource that the server can query in order to validate that the client
controls an identifier.  In practice, it is not uncommon for the server’s
queries to fail while a resource is being set up, e.g., due to information
propagating across a cluster or firewall rules not being in place.</t>

<t>Clients SHOULD NOT respond to challenges until they believe that the server’s
queries will succeed. If a server’s initial validation query fails, the server
SHOULD retry the query after some time, in order to account for delay in setting
up responses such as DNS records or HTTP resources. The precise retry schedule
is up to the server, but server operators should keep in mind the operational
scenarios that the schedule is trying to accommodate.  Given that retries are
intended to address things like propagation delays in HTTP or DNS provisioning,
there should not usually be any reason to retry more often than every 5 or 10
seconds. While the server is still trying, the
status of the challenge remains “processing”; it is only marked “invalid” once the
server has given up.</t>

<t>The server MUST provide information about its retry state to the client via the
“error” field in the challenge and the Retry-After HTTP header field in
response to requests to the challenge resource. The server MUST add an entry to
the “error” field in the challenge after each failed validation query. The
server SHOULD set the Retry-After header field to a time after the server’s
next validation query, since the status of the challenge will not change until
that time.</t>

<t>Clients can explicitly request a retry by resending their response to a
challenge in a new POST request (with a new nonce, etc.). This allows clients
to request a retry when the state has changed (e.g., after firewall rules have been
updated). Servers SHOULD retry a request immediately on receiving such a POST
request. In order to avoid denial-of-service attacks via client-initiated
retries, servers SHOULD rate-limit such requests.</t>

</section>
<section anchor="http-challenge" title="HTTP Challenge">

<t>With HTTP validation, the client in an ACME transaction proves its control over
a domain name by proving that it can provision HTTP resources on a server
accessible under that domain name.
The ACME server challenges the client to
provision a file at a specific path, with a specific string as its content.</t>

<t>As a domain may resolve to multiple IPv4 and IPv6 addresses, the server will
connect to at least one of the hosts found in the DNS A and AAAA records, at its
discretion.  Because many web servers allocate a default HTTPS virtual host to a
particular low-privilege tenant user in a subtle and non-intuitive manner, the
challenge must be completed over HTTP, not HTTPS.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “http-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy.
It MUST NOT contain any characters outside the base64url alphabet and MUST NOT
include base64 padding characters (“=”).  See <xref target="RFC4086"/> for additional information
on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "http-01",
  "url": "https://example.com/acme/chall/prV_B7yEyA4",
  "status": "pending",
  "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from
the “token” value provided in the challenge and the client’s account key.  The
client then provisions the key authorization as a resource on the HTTP server
for the domain in question.</t>

<t>The path at which the resource is provisioned is comprised of the fixed prefix
“/.well-known/acme-challenge/”, followed by the “token” value in the challenge.
The value of the resource MUST be the ASCII representation of the key
authorization.</t>

<figure><artwork><![CDATA[
GET /.well-known/acme-challenge/LoqXcYV8...jxAjEuX0
Host: example.org

HTTP/1.1 200 OK
Content-Type: application/octet-stream

LoqXcYV8...jxAjEuX0.9jg46WB3...fm21mqTI
]]></artwork></figure>

<t>(In the above, “…” indicates that the token and the JWK
thumbprint in the key authorization have been truncated to fit on
the page.)</t>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "UQI1PoRi5OuXzxuX7V7wL0",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>Given a challenge/response pair, the server verifies the client’s control of the
domain by verifying that the resource was provisioned as expected.</t>

<t><list style="numbers">
  <t>Construct a URL by populating the URL template <xref target="RFC6570"/>
“http://{domain}/.well-known/acme-challenge/{token}”, where:
  <list style="symbols">
      <t>the domain field is set to the domain name being verified; and</t>
      <t>the token field is set to the token in the challenge.</t>
    </list></t>
  <t>Verify that the resulting URL is well-formed.</t>
  <t>Dereference the URL using an HTTP GET request.  This request MUST be sent to
TCP port 80 on the HTTP server.</t>
  <t>Verify that the body of the response is a well-formed key authorization.  The
server SHOULD ignore whitespace characters at the end of the body.</t>
  <t>Verify that key authorization provided by the HTTP server matches the key
authorization stored by the server.</t>
</list></t>

<t>The server SHOULD follow redirects when dereferencing the URL.
Clients might use redirects, for example, so that the response can
be provided by a centralized certificate management server.  See
<xref target="integrity-of-authorizations"/> for security considerations related
to redirects.</t>

<t>If all of the above verifications succeed, then the validation is successful.
If the request fails, or the body does not pass these checks, then it has
failed.</t>

<t>The client SHOULD de-provision the resource provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

<t>Note that because the token appears both in the request sent by the
ACME server and in the key authorization in the response, it is
possible to build clients that copy the token from request to
response.  Clients should avoid this behavior because it can lead
to cross-site scripting vulnerabilities; instead, clients should be
explicitly configured on a per-challenge basis. A client that does
copy tokens from requests to responses MUST validate that the token
in the request matches the token syntax above (e.g., that it
includes only characters from the base64url alphabet).</t>

</section>
<section anchor="dns-challenge" title="DNS Challenge">

<t>When the identifier being validated is a domain name, the client can prove
control of that domain by provisioning a TXT resource record containing a designated
value for a specific validation domain name.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “dns-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy. It MUST NOT contain any characters outside the
base64url alphabet, including padding characters (“=”). See <xref target="RFC4086"/> for
additional information on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "dns-01",
  "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
  "status": "pending",
  "token": "evaGxfADs6pSRb2LAv9IZf17Dt3juxGJ-PCt92wr-oA"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from the
“token” value provided in the challenge and the client’s account key.  The
client then computes the SHA-256 digest <xref target="FIPS180-4"></xref> of the key authorization.</t>

<t>The record provisioned to the DNS contains the base64url encoding of this digest.  The
client constructs the validation domain name by prepending the label
“_acme-challenge” to the domain name being validated, then provisions a TXT
record with the digest value under that name. For example, if the domain name
being validated is “example.org”, then the client would provision the following
DNS record:</t>

<figure><artwork><![CDATA[
_acme-challenge.example.org. 300 IN TXT "gfj9Xq...Rg85nM"
]]></artwork></figure>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/Rg5dV14Gh1Q
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "SS2sSl1PtspvFZ08kNtzKd",
    "url": "https://example.com/acme/chall/Rg5dV14Gh1Q"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>To validate a DNS challenge, the server performs the following steps:</t>

<t><list style="numbers">
  <t>Compute the SHA-256 digest <xref target="FIPS180-4"></xref> of the stored key authorization</t>
  <t>Query for TXT records for the validation domain name</t>
  <t>Verify that the contents of one of the TXT records match the digest value</t>
</list></t>

<t>If all of the above verifications succeed, then the validation is successful.
If no DNS record is found, or DNS record and response payload do not pass these
checks, then the validation fails.</t>

<t>The client SHOULD de-provision the resource record(s) provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-applicationpem-certificate-chain" title="Media Type: application/pem-certificate-chain">

<t>A file of this type contains one or more certificates encoded with
the PEM textual encoding, according to <xref target="RFC7468"/>.  The
textual encoding of certificates in this file MUST use the strict
encoding and MUST NOT include explanatory text.  The ABNF for this
format is as follows, where <spanx style="verb">stricttextualmsg</spanx> and <spanx style="verb">eol</spanx> are as
defined in Section 3 of RFC 7468:</t>

<figure><artwork><![CDATA[
certchain = stricttextualmsg *(eol stricttextualmsg)
]]></artwork></figure>

<t>In order to provide easy interoperation with TLS, the first
certificate MUST be an end-entity certificate. Each following certificate
SHOULD directly certify the one preceding it. Because certificate validation
requires that trust anchors be distributed independently, a certificate
that represents a trust anchor MAY be omitted from the chain, provided
that supported peers are known to possess any omitted certificates.</t>

<t>The following has been registered in the “Media Types” registry:</t>

<t>Type name: application</t>

<t>Subtype name: pem-certificate-chain</t>

<t>Required parameters: None</t>

<t>Optional parameters: None</t>

<t>Encoding considerations: 7bit</t>

<t>Security considerations: Carries a cryptographic certificate and its associated certificate chain.  This media type carries no active content.</t>

<t>Interoperability considerations: None</t>

<t>Published specification: RFC 8555</t>

<t>Applications that use this media type: ACME clients and servers, HTTP servers, other applications that need to be configured with a certificate chain</t>

<t>Additional information:</t>

<t>Deprecated alias names for this type: n/a
  Magic number(s): n/a
  File extension(s): .pem
  Macintosh file type code(s): n/a</t>

<t>Person &amp; email address to contact for further information: See Authors’ Addresses section.</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: n/a</t>

<t>Author: See Authors’ Addresses section.</t>

<t>Change controller: IETF &lt;iesg@ietf.org&gt;</t>

</section>
<section anchor="well-known-uri-for-the-http-challenge" title="Well-Known URI for the HTTP Challenge">

<t>The following value has been registered in the “Well-Known URIs” registry
(using the template from <xref target="RFC5785"/>):</t>

<t>URI suffix: acme-challenge</t>

<t>Change controller: IETF</t>

<t>Specification document(s): RFC 8555, <xref target="http-challenge"/></t>

<t>Related information: N/A</t>

</section>
<section anchor="replay-nonce-http-header" title="Replay-Nonce HTTP Header">

<t>The following value has been registered in the “Message Headers”
registry:</t>

<texttable>
      <ttcol align='left'>Header Field Name</ttcol>
      <ttcol align='left'>Protocol</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Replay-Nonce</c>
      <c>http</c>
      <c>standard</c>
      <c>RFC 8555, <xref target="replay-nonce"/></c>
</texttable>

</section>
<section anchor="url-jws-header-parameter" title="&quot;url&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “url”</t>
  <t>Header Parameter Description: URL</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="url-url-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="nonce-jws-header-parameter" title="&quot;nonce&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “nonce”</t>
  <t>Header Parameter Description: Nonce</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="nonce-nonce-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="acme-urn-space" title="URN Sub-namespace for ACME (urn:ietf:params:acme)">

<t>The following value has been registered in the “IETF URN Sub-namespace for
Registered Protocol Parameter Identifiers” registry, following the
template in <xref target="RFC3553"/>:</t>

<t><list style="hanging">
  <t hangText='Registry name:'>
  acme</t>
  <t hangText='Specification:'>
  RFC 8555</t>
  <t hangText='Repository:'>
  http://www.iana.org/assignments/acme</t>
  <t hangText='Index value:'>
  No transformation needed.</t>
</list></t>

</section>
<section anchor="new-registries" title="New Registries">

<t>IANA has created the following registries:</t>

<t><list style="numbers">
  <t>ACME Account Object Fields (<xref target="iana-account"/>)</t>
  <t>ACME Order Object Fields (<xref target="iana-order"/>)</t>
  <t>ACME Authorization Object Fields (<xref target="iana-authz"/>)</t>
  <t>ACME Error Types (<xref target="iana-error"/>)</t>
  <t>ACME Resource Types (<xref target="iana-resource"/>)</t>
  <t>ACME Directory Metadata Fields (<xref target="iana-meta"/>)</t>
  <t>ACME Identifier Types (<xref target="iana-identifier"/>)</t>
  <t>ACME Validation Methods (<xref target="iana-validation"/>)</t>
</list></t>

<t>All of these registries are under a heading of “Automated Certificate Management
Environment (ACME) Protocol” and are administered under a Specification
Required policy <xref target="RFC8126"/>.</t>

<section anchor="iana-account" title="Fields in Account Objects">

<t>The “ACME Account Object Fields” registry lists field names that are defined
for use in ACME account objects.  Fields marked as “configurable” may be included in a
newAccount request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Requests: Either the value “none” or a list of types of requests
where the field is allowed in a request object, taken from the
following values:
  <list style="symbols">
      <t>“new” - Requests to the “newAccount” URL</t>
      <t>“account” - Requests to an account URL</t>
    </list></t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="account-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Requests</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>contact</c>
      <c>array of string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>externalAccountBinding</c>
      <c>object</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>termsOfServiceAgreed</c>
      <c>boolean</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>onlyReturnExisting</c>
      <c>boolean</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>orders</c>
      <c>string</c>
      <c>none</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-order" title="Fields in Order Objects">

<t>The “ACME Order Object Fields” registry lists field names that are defined
for use in ACME order objects.  Fields marked as “configurable” may be included in a
newOrder request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Client configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="order-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>identifiers</c>
      <c>array of object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notBefore</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notAfter</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>error</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>authorizations</c>
      <c>array of string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>finalize</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>certificate</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-authz" title="Fields in Authorization Objects">

<t>The “ACME Authorization Object Fields” registry lists field names that are 
defined for use in ACME authorization objects.  Fields marked as
“configurable” may be included in a newAuthz request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Client configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="authorization-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>identifier</c>
      <c>object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>challenges</c>
      <c>array of object</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>wildcard</c>
      <c>boolean</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-error" title="Error Types">

<t>The “ACME Error Types” registry lists values that are used within URN
values that are provided in the “type” field of problem documents in ACME.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Type: The label to be included in the URN for this error, following
“urn:ietf:params:acme:error:”</t>
  <t>Description: A human-readable description of the error</t>
  <t>Reference: Where the error is defined</t>
</list></t>

<t>Initial contents: The types and descriptions in the table in <xref target="errors"/> above,
with the Reference field set to point to this specification.</t>

</section>
<section anchor="iana-resource" title="Resource Types">

<t>The “ACME Resource Types” registry lists the types of resources that ACME
servers may list in their directory objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The value to be used as a field name in the directory object</t>
  <t>Resource type: The type of resource labeled by the field</t>
  <t>Reference: Where the resource type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Resource Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>RFC 8555</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>RFC 8555</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>RFC 8555</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>RFC 8555</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>RFC 8555</c>
      <c>keyChange</c>
      <c>Key change</c>
      <c>RFC 8555</c>
      <c>meta</c>
      <c>Metadata object</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-meta" title="Fields in the &quot;meta&quot; Object within a Directory Object">

<t>The “ACME Directory Metadata Fields” registry lists field names that are
defined for use in the JSON object included in the “meta” field of an ACME 
directory object.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="directory"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>termsOfService</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>website</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>caaIdentities</c>
      <c>array of string</c>
      <c>RFC 8555</c>
      <c>externalAccountRequired</c>
      <c>boolean</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-identifier" title="Identifier Types">

<t>The “ACME Identifier Types” registry lists the types of identifiers that
can be present in ACME authorization objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The value to be put in the “type” field of the identifier object</t>
  <t>Reference: Where the identifier type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>dns</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-validation" title="Validation Methods">

<t>The “ACME Validation Methods” registry lists identifiers for the ways that
CAs can validate control of identifiers.  Each method’s entry must specify
whether it corresponds to an ACME challenge type.  The “Identifier Type” field
must be contained in the Label column of the “ACME Identifier Types” registry.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The identifier for this validation method</t>
  <t>Identifier Type: The type of identifier that this method applies to</t>
  <t>ACME: “Y” if the validation method corresponds to an ACME challenge type;
“N” otherwise</t>
  <t>Reference: Where the validation method is defined</t>
</list></t>

<t>This registry may also contain reserved entries (e.g., to avoid
collisions).  Such entries should have the “ACME” field set to “N”
and the “Identifier Type” set to “RESERVED”.</t>

<t>Initial Contents</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Identifier Type</ttcol>
      <ttcol align='left'>ACME</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>http-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>dns-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>tls-sni-01</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
      <c>tls-sni-02</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
</texttable>

<t>When evaluating a request for an assignment in this registry, the designated
expert should ensure that the method being registered has a clear,
interoperable definition and does not overlap with existing validation methods.
That is, it should not be possible for a client and server to follow the
same set of actions to fulfill two different validation methods.</t>

<t>The values “tls-sni-01” and “tls-sni-02” are reserved because they
were used in pre-RFC versions of this specification to denote
validation methods that were removed because they were found not to be secure in some cases.</t>

<t>Validation methods do not have to be compatible with ACME in order to be
registered.  For example, a CA might wish to register a validation method
to support its use with the ACME extensions to CAA
<xref target="I-D.ietf-acme-caa"/>.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>ACME is a protocol for managing certificates that attest to identifier/key
bindings.  Thus, the foremost security goal of ACME is to ensure the integrity of
this process, i.e., to ensure that the bindings attested by certificates are
correct and that only authorized entities can manage certificates.  ACME
identifies clients by their account keys, so this overall goal breaks down into
two more precise goals:</t>

<t><list style="numbers">
  <t>Only an entity that controls an identifier can get an authorization for that
identifier</t>
  <t>Once authorized, an account key’s authorizations cannot be improperly
used by another account</t>
</list></t>

<t>In this section, we discuss the threat model that underlies ACME and the ways
that ACME achieves these security goals within that threat model.  We also
discuss the denial-of-service risks that ACME servers face, and a few other
miscellaneous considerations.</t>

<section anchor="threat-model" title="Threat Model">

<t>As a service on the Internet, ACME broadly exists within the Internet threat
model <xref target="RFC3552"/>.  In analyzing ACME, it is useful to think of an ACME server
interacting with other Internet hosts along two “channels”:</t>

<t><list style="symbols">
  <t>An ACME channel, over which the ACME HTTPS requests are exchanged</t>
  <t>A validation channel, over which the ACME server performs additional requests
to validate a client’s control of an identifier</t>
</list></t>

<figure title="Communications Channels Used by ACME"><artwork><![CDATA[
+------------+
|    ACME    |     ACME Channel
|   Client   |--------------------+
+------------+                    |
                                  V
                            +------------+
                            |    ACME    |
                            |   Server   |
                            +------------+
+------------+                    |
| Validation |<-------------------+
|   Server   |  Validation Channel
+------------+
]]></artwork></figure>

<t>In practice, the risks to these channels are not entirely separate, but they are
different in most cases.  Each channel, for example, uses a
different communications pattern: the ACME channel will comprise inbound HTTPS
connections to the ACME server and the validation channel outbound HTTP or DNS
requests.</t>

<t>Broadly speaking, ACME aims to be secure against active and passive attackers on
any individual channel.  Some vulnerabilities arise (noted below) when an
attacker can exploit both the ACME channel and one of the others.</t>

<t>On the ACME channel, in addition to network-layer attackers, we also need to
account for man-in-the-middle (MitM) attacks at the application layer and for
abusive use of the protocol itself.  Protection against application-layer MitM
addresses potential attackers such as Content Distribution Networks (CDNs) and
middleboxes with a TLS MitM function.  Preventing abusive use of ACME means
ensuring that an attacker with access to the validation channel can’t obtain
illegitimate authorization by acting as an ACME client (legitimately, in terms
of the protocol).</t>

<t>ACME does not protect against other types of abuse by a MitM on the ACME channel.
For example, such an attacker could send a bogus “badSignatureAlgorithm”
error response to downgrade a client to the lowest-quality signature algorithm that
the server supports.  A MitM that is present on all connections (such as a 
CDN) can cause denial-of-service conditions in a variety of ways.</t>

</section>
<section anchor="integrity-of-authorizations" title="Integrity of Authorizations">

<t>ACME allows anyone to request challenges for an identifier by registering an
account key and sending a newOrder request using that account key.  The
integrity of the authorization process thus depends on the identifier validation
challenges to ensure that the challenge can only be completed by someone who
both (1) holds the private key of the account key pair and (2) controls the
identifier in question.</t>

<t>Validation responses need to be bound to an account key pair in order to avoid
situations where a MitM on ACME HTTPS requests can switch out a legitimate domain holder’s
account key for one of his choosing.  Such MitMs can arise, for
example, if a CA uses a CDN or third-party reverse proxy in front of
its ACME interface.  An attack by such an MitM could have the
following form:</t>

<t><list style="numbers">
  <t>Legitimate domain holder registers account key pair A</t>
  <t>MitM registers account key pair B</t>
  <t>Legitimate domain holder sends a newOrder request signed using account key A</t>
  <t>MitM suppresses the legitimate request but sends the same request signed
using account key B</t>
  <t>ACME server issues challenges and MitM forwards them to the legitimate domain
holder</t>
  <t>Legitimate domain holder provisions the validation response</t>
  <t>ACME server performs validation query and sees the response provisioned by the
legitimate domain holder</t>
  <t>Because the challenges were issued in response to a message signed with account key
B, the ACME server grants authorization to account key B (the MitM) instead of
account key A (the legitimate domain holder)</t>
</list></t>

<figure title="Man-in-the-Middle Attack Exploiting a Validation Method without
Account Key Binding"><artwork><![CDATA[
Domain                                         ACME
Holder                  MitM                  Server
  |                      |                      |
  | newAccount(A)        |                      |
  |--------------------->|--------------------->|
  |                      |                      |
  |                      | newAccount(B)        |
  |                      |--------------------->|
  | newOrder(domain, A)  |                      | 
  |--------------------->|                      |
  |                      | newOrder(domain, B)  | 
  |                      |--------------------->|
  |                      |                      |
  |   authz, challenges  |   authz, challenges  |
  |<---------------------|<---------------------|
  |                      |                      |
  | response(chall, A)   | response(chall, B)   |
  |--------------------->|--------------------->|
  |                      |                      |
  |  validation request  |                      |
  |<--------------------------------------------|
  |                      |                      |
  | validation response  |                      |
  |-------------------------------------------->|
  |                      |                      |
  |                      |                      | Considers challenge
  |                      |                      | fulfilled by B
  |                      |                      |
]]></artwork></figure>

<t>All of the challenges defined in this document have a binding between the account private key and
the validation query made by the server, via the key authorization. The key
authorization reflects the account public key and is provided to the server in
the validation response over the validation channel.</t>

<t>The association of challenges to identifiers is typically done by requiring the
client to perform some action that only someone who effectively controls the
identifier can perform.  For the challenges in this document, the actions are as follows:</t>

<t><list style="symbols">
  <t>HTTP: Provision files under .well-known on a web server for the domain</t>
  <t>DNS: Provision DNS resource records for the domain</t>
</list></t>

<t>There are several ways that these assumptions can be violated, both by
misconfiguration and by attacks.  For example, on a web server that allows
non-administrative users to write to .well-known, any user can claim to own the
web server’s hostname by responding to an HTTP challenge.  Similarly, if
a server that can be used for ACME
validation is compromised by a malicious actor, then that malicious actor can
use that access to obtain certificates via ACME.</t>

<t>The use of hosting providers is a particular risk for ACME validation.  If the
owner of the domain has outsourced operation of DNS or web services to a hosting
provider, there is nothing that can be done against tampering by the hosting
provider.  As far as the outside world is concerned, the zone or website
provided by the hosting provider is the real thing.</t>

<t>More limited forms of delegation can also lead to an unintended party gaining
the ability to successfully complete a validation transaction.  For example,
suppose an ACME server follows HTTP redirects in HTTP validation and a
website operator provisions a catch-all redirect rule that redirects requests
for unknown resources to a different domain.  Then the target of the redirect
could use that to get a certificate through HTTP validation since the
validation path will not be known to the primary server.</t>

<t>The DNS is a common point of vulnerability for all of these challenges.  An
entity that can provision false DNS records for a domain can attack the DNS
challenge directly and can provision false A/AAAA records to direct the ACME
server to send its HTTP validation query to a remote server of the attacker’s
choosing.  There are a few different mitigations that ACME servers
can apply:</t>

<t><list style="symbols">
  <t>Always querying the DNS using a DNSSEC-validating resolver (enhancing
security for zones that are DNSSEC-enabled)</t>
  <t>Querying the DNS from multiple vantage points to address local attackers</t>
  <t>Applying mitigations against DNS off-path attackers, e.g., adding entropy to
requests <xref target="I-D.vixie-dnsext-dns0x20"/> or only using TCP</t>
</list></t>

<t>Given these considerations, the ACME validation process makes it impossible for
any attacker on the ACME channel or a passive attacker on the validation
channel to hijack the authorization process to authorize a key of the attacker’s
choice.</t>

<t>An attacker that can only see the ACME channel would need to convince the
validation server to provide a response that would authorize the attacker’s
account key, but this is prevented by binding the validation response to the
account key used to request challenges.  A passive attacker on the validation
channel can observe the correct validation response and even replay it, but that
response can only be used with the account key for which it was generated.</t>

<t>An active attacker on the validation channel can subvert the ACME process, by
performing normal ACME transactions and providing a validation response for his
own account key.  The risks due to hosting providers noted above are a
particular case.</t>

<t>Attackers can also exploit vulnerabilities in Internet routing
protocols to gain access to the validation channel (see, e.g.,
<xref target="RFC7132"/>).  In order to make such attacks more difficult, it is
RECOMMENDED that the server perform DNS queries and make HTTP
connections from multiple points in the network.  Since routing
attacks are often localized or dependent on the position of the
attacker, forcing the attacker to attack multiple points (the
server’s validation vantage points) or a specific point (the DNS / HTTP server) makes it more difficult to subvert ACME validation
using attacks on routing.</t>

</section>
<section anchor="denial-of-service-considerations" title="Denial-of-Service Considerations">

<t>As a protocol run over HTTPS, standard considerations for TCP-based and
HTTP-based DoS mitigation also apply to ACME.</t>

<t>At the application layer, ACME requires the server to perform a few potentially
expensive operations.  Identifier validation transactions require the ACME
server to make outbound connections to potentially attacker-controlled servers,
and certificate issuance can require interactions with cryptographic hardware.</t>

<t>In addition, an attacker can also cause the ACME server to send validation
requests to a domain of its choosing by submitting authorization requests for
the victim domain.</t>

<t>All of these attacks can be mitigated by the application of appropriate rate
limits.  Issues closer to the front end, like POST body validation, can be
addressed using HTTP request limiting.  For validation and certificate requests,
there are other identifiers on which rate limits can be keyed.  For example, the
server might limit the rate at which any individual account key can issue
certificates or the rate at which validation can be requested within a given
subtree of the DNS.  And in order to prevent attackers from circumventing these
limits simply by minting new accounts, servers would need to limit the rate at
which accounts can be registered.</t>

</section>
<section anchor="server-side-request-forgery" title="Server-Side Request Forgery">

<t>Server-Side Request Forgery (SSRF) attacks can arise when an attacker can cause
a server to perform HTTP requests to an attacker-chosen URL.  In the ACME HTTP
challenge validation process, the ACME server performs an HTTP GET request to a
URL in which the attacker can choose the domain.  This request is made before
the server has verified that the client controls the domain, so any client can
cause a query to any domain.</t>

<t>Some ACME server implementations include information from the validation server’s
response (in order to facilitate debugging).  Such implementations enable an
attacker to extract this information from any web server that is accessible to
the ACME server, even if it is not accessible to the ACME client.
For example, the ACME server might be able to access servers behind
a firewall that would prevent access by the ACME client.</t>

<t>It might seem that the risk of SSRF through this channel is limited by the fact
that the attacker can only control the domain of the URL, not the path.
However, if the attacker first sets the domain to one they control, then they
can send the server an HTTP redirect (e.g., a 302 response) which will cause the
server to query an arbitrary URL.</t>

<t>In order to further limit the SSRF risk, ACME server operators should ensure
that validation queries can only be sent to servers on the public Internet, and
not, say, web services within the server operator’s internal network.  Since the
attacker could make requests to these public servers himself, he can’t gain
anything extra through an SSRF attack on ACME aside from a layer of
anonymization.</t>

</section>
<section anchor="ca-policy-considerations" title="CA Policy Considerations">

<t>The controls on issuance enabled by ACME are focused on validating that a
certificate applicant controls the identifier he claims.  Before issuing a
certificate, however, there are many other checks that a CA might need to
perform, for example:</t>

<t><list style="symbols">
  <t>Has the client agreed to a subscriber agreement?</t>
  <t>Is the claimed identifier syntactically valid?</t>
  <t>For domain names:
  <list style="symbols">
      <t>If the leftmost label is a ‘*’, then have the appropriate checks been
applied?</t>
      <t>Is the name on the Public Suffix List?</t>
      <t>Is the name a high-value name?</t>
      <t>Is the name a known phishing domain?</t>
    </list></t>
  <t>Is the key in the CSR sufficiently strong?</t>
  <t>Is the CSR signed with an acceptable algorithm?</t>
  <t>Has issuance been authorized or forbidden by a Certificate Authority
Authorization (CAA) record (<xref target="RFC6844"/>)?</t>
</list></t>

<t>CAs that use ACME to automate issuance will need to ensure that their servers
perform all necessary checks before issuing.</t>

<t>CAs using ACME to allow clients to agree to terms of service should keep in mind
that ACME clients can automate this agreement, possibly not involving a human
user.</t>

<t>ACME does not specify how the server constructs the URLs that it
uses to address resources.  If the server operator uses URLs that
are predictable to third parties, this can leak information about
what URLs exist on the server, since an attacker can probe for
whether a POST-as-GET request to the URL returns 404 (Not Found) or
401 (Unauthorized).</t>

<t>For example, suppose that the CA uses highly structured URLs with
guessable fields:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/:accountID</t>
  <t>Orders: https://example.com/:accountID/:domainName</t>
  <t>Authorizations: https://example.com/:accountID/:domainName</t>
  <t>Certificates: https://example.com/:accountID/:domainName</t>
</list></t>

<t>Under that scheme, an attacker could probe for which domain names are
associated with which accounts, which may allow correlation of ownership
between domain names, if the CA does not otherwise permit it.</t>

<t>To avoid leaking these correlations, CAs SHOULD assign URLs with an
unpredictable component.
For example, a CA might assign URLs for each resource type from an
independent namespace, using unpredictable IDs for each resource:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/acct/:accountID</t>
  <t>Orders: https://example.com/order/:orderID</t>
  <t>Authorizations: https://example.com/authz/:authorizationID</t>
  <t>Certificates: https://example.com/cert/:certID</t>
</list></t>

<t>Such a scheme would leak only the type of resource, hiding the
additional correlations revealed in the example above.</t>

</section>
</section>
<section anchor="operational-considerations" title="Operational Considerations">

<t>There are certain factors that arise in operational reality that operators of
ACME-based CAs will need to keep in mind when configuring their services.
See the subsections below for examples.</t>

<section anchor="key-selection" title="Key Selection">

<t>ACME relies on two different classes of key pair:</t>

<t><list style="symbols">
  <t>Account key pairs, which are used to authenticate account holders</t>
  <t>Certificate key pairs, which are used to sign and verify CSRs (and whose
public keys are included in certificates)</t>
</list></t>

<t>Compromise of the private key of an account key pair has more serious consequences than
compromise of a private key corresponding to a certificate.  While
the compromise of a certificate key pair allows the attacker to impersonate the
entities named in the certificate for the lifetime of the certificate, the
compromise of an account key pair allows the attacker to take full control of
the victim’s ACME account and take any action that the legitimate
account holder could take within the scope of ACME:</t>

<t><list style="numbers">
  <t>Issuing certificates using existing authorizations</t>
  <t>Revoking existing certificates</t>
  <t>Accessing and changing account information (e.g., contacts)</t>
  <t>Changing the account key pair for the account, locking out the
legitimate account holder</t>
</list></t>

<t>For this reason, it is RECOMMENDED that each account key pair be
used only for authentication of a single ACME account.  For example,
the public key of an account key pair MUST NOT be included in a
certificate.  If an ACME client receives a request from a user for
account creation or key rollover using an account key that the
client knows to be used elsewhere, then the client MUST return an
error.  Clients MUST generate a fresh account key for every account
creation or rollover operation.  Note that given the requirements of
<xref target="finding-an-account-url-given-a-key"/>, servers will not create
accounts with reused keys anyway.</t>

<t>ACME clients and servers MUST verify that a CSR submitted in a finalize request does not contain a
public key for any known account key pair.  In particular, when a server
receives a finalize request, it MUST verify that the public key in a CSR is not
the same as the public key of the account key pair used to authenticate that
request.  This assures that vulnerabilities in the protocols with which the
certificate is used (e.g., signing oracles in TLS <xref target="JSS15"></xref>) do not result in 
compromise of the ACME account. Because ACME accounts are uniquely identified by
their account key pair (see <xref target="finding-an-account-url-given-a-key"/>), the server
MUST not allow account key pair reuse across multiple accounts.</t>

</section>
<section anchor="dns-security" title="DNS Security">

<t>As noted above, DNS forgery attacks against the ACME server can result in the
server making incorrect decisions about domain control and thus mis-issuing
certificates. Servers SHOULD perform DNS queries over TCP, which provides better
resistance to some forgery attacks than DNS over UDP.</t>

<t>An ACME-based CA will often need to make DNS queries, e.g., to validate control
of DNS names.  Because the security of such validations ultimately depends on
the authenticity of DNS data, every possible precaution should be taken to
secure DNS queries done by the CA. Therefore, it is RECOMMENDED that ACME-based
CAs make all DNS queries via DNSSEC-validating stub or recursive resolvers. This
provides additional protection to domains that choose to make use of DNSSEC.</t>

<t>An ACME-based CA must only use a resolver if it trusts the resolver and every
component of the network route by which it is accessed. Therefore, it is
RECOMMENDED that ACME-based CAs operate their own DNSSEC-validating resolvers
within their trusted network and use these resolvers both for CAA record
lookups and all record lookups in furtherance of a challenge scheme (A, AAAA,
TXT, etc.).</t>

</section>
<section anchor="token-entropy" title="Token Entropy">

<t>The http-01 and dns-01 validation methods mandate the use of
a random token value to uniquely identify the challenge. The value of the token
is required to contain at least 128 bits of entropy for the following security
properties. First, the ACME client should not be able to influence the ACME
server’s choice of token as this may allow an attacker to reuse a domain owner’s
previous challenge responses for a new validation request. Second, the entropy
requirement makes it more difficult for ACME clients to implement a “naive”
validation server that automatically replies to challenges without being 
configured per challenge.</t>

</section>
<section anchor="malformed-certificate-chains" title="Malformed Certificate Chains">

<t>ACME provides certificate chains in the widely used format known colloquially
as PEM (though it may diverge from the actual Privacy Enhanced Mail
specification <xref target="RFC1421"/>, as noted in <xref target="RFC7468"/>). Some current software
will allow the configuration of a private key and a certificate in one PEM
file by concatenating the textual encodings of the two objects. In the context
of ACME, such software might be vulnerable to key replacement attacks. A
malicious ACME server could cause a client to use a private key of its choosing
by including the key in the PEM file returned in response to a query for a
certificate URL.</t>

<t>When processing a file of type “application/pem-certificate-chain”, a client
SHOULD verify that the file contains only encoded certificates.  If anything
other than a certificate is found (i.e., if the string “-----BEGIN” is ever
followed by anything other than “CERTIFICATE”), then the client MUST reject the
file as invalid.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>In addition to the editors listed on the front page, this document has benefited
from contributions from a broad set of contributors, all the way back to its
inception.</t>

<t><list style="symbols">
  <t>Andrew Ayer, SSLMate</t>
  <t>Karthik Bhargavan, INRIA</t>
  <t>Peter Eckersley, EFF</t>
  <t>Alex Halderman, University of Michigan</t>
  <t>Sophie Herold, Hemio</t>
  <t>Tim Hollebeek, DigiCert</t>
  <t>Eric Rescorla, Mozilla</t>
  <t>Seth Schoen, EFF</t>
  <t>Roland Shoemaker, Let’s Encrypt</t>
  <t>Rob Stradling, Sectigo</t>
  <t>Martin Thomson, Mozilla</t>
  <t>Jakub Warmuz, University of Oxford</t>
</list></t>

<t>This document draws on many concepts established by Eric Rescorla’s “Automated
Certificate Issuance Protocol” draft.  Martin Thomson provided helpful guidance
in the use of HTTP.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="FIPS180-4" target="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
  <front>
    <title>NIST FIPS 180-4, Secure Hash Standard</title>
    <author initials="National Institute of Standards and Technology, U.S." surname="Department of Commerce" fullname="NIST">
      <organization></organization>
    </author>
    <date year="2012" month="March"/>
  </front>
</reference>
<reference anchor="JSS15" target="https://dl.acm.org/citation.cfm?id=2813657">
  <front>
    <title>On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption</title>
    <author initials="J." surname="Somorovsky" fullname="Juraj Somorovsky">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="REST" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">
  <front>
    <title>Architectural Styles and the Design of Network-based Software Architectures</title>
    <author initials="R." surname="Fielding" fullname="Roy Thomas Fielding">
      <organization></organization>
    </author>
    <date year="2000"/>
  </front>
</reference>




<reference  anchor="RFC5280" target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'><organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<date year='2008' month='May' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference  anchor="RFC2986" target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC2818" target='https://www.rfc-editor.org/info/rfc2818'>
<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2000' month='May' />
<abstract><t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2818'/>
<seriesInfo name='DOI' value='10.17487/RFC2818'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC3629" target='https://www.rfc-editor.org/info/rfc3629'>
<front>
<title>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='F. Yergeau'><organization /></author>
<date year='2003' month='November' />
<abstract><t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t></abstract>
</front>
<seriesInfo name='STD' value='63'/>
<seriesInfo name='RFC' value='3629'/>
<seriesInfo name='DOI' value='10.17487/RFC3629'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC7797" target='https://www.rfc-editor.org/info/rfc7797'>
<front>
<title>JSON Web Signature (JWS) Unencoded Payload Option</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2016' month='February' />
<abstract><t>JSON Web Signature (JWS) represents the payload of a JWS as a base64url-encoded value and uses this value in the JWS Signature computation.  While this enables arbitrary payloads to be integrity protected, some have described use cases in which the base64url encoding is unnecessary and/or an impediment to adoption, especially when the payload is large and/or detached.  This specification defines a means of accommodating these use cases by defining an option to change the JWS Signing Input computation to not base64url- encode the payload.  This option is intended to broaden the set of use cases for which the use of JWS is a good fit.</t><t>This specification updates RFC 7519 by stating that JSON Web Tokens (JWTs) MUST NOT use the unencoded payload option defined by this specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7797'/>
<seriesInfo name='DOI' value='10.17487/RFC7797'/>
</reference>



<reference  anchor="RFC7518" target='https://www.rfc-editor.org/info/rfc7518'>
<front>
<title>JSON Web Algorithms (JWA)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification registers cryptographic algorithms and identifiers to be used with the JSON Web Signature (JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK) specifications.  It defines several IANA registries for these identifiers.</t></abstract>
</front>
<seriesInfo name='RFC' value='7518'/>
<seriesInfo name='DOI' value='10.17487/RFC7518'/>
</reference>



<reference  anchor="RFC8037" target='https://www.rfc-editor.org/info/rfc8037'>
<front>
<title>CFRG Elliptic Curve Diffie-Hellman (ECDH) and Signatures in JSON Object Signing and Encryption (JOSE)</title>
<author initials='I.' surname='Liusvaara' fullname='I. Liusvaara'><organization /></author>
<date year='2017' month='January' />
<abstract><t>This document defines how to use the Diffie-Hellman algorithms &quot;X25519&quot; and &quot;X448&quot; as well as the signature algorithms &quot;Ed25519&quot; and &quot;Ed448&quot; from the IRTF CFRG elliptic curves work in JSON Object Signing and Encryption (JOSE).</t></abstract>
</front>
<seriesInfo name='RFC' value='8037'/>
<seriesInfo name='DOI' value='10.17487/RFC8037'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7807" target='https://www.rfc-editor.org/info/rfc7807'>
<front>
<title>Problem Details for HTTP APIs</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Wilde' fullname='E. Wilde'><organization /></author>
<date year='2016' month='March' />
<abstract><t>This document defines a &quot;problem detail&quot; as a way to carry machine- readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs.</t></abstract>
</front>
<seriesInfo name='RFC' value='7807'/>
<seriesInfo name='DOI' value='10.17487/RFC7807'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC6844" target='https://www.rfc-editor.org/info/rfc6844'>
<front>
<title>DNS Certification Authority Authorization (CAA) Resource Record</title>
<author initials='P.' surname='Hallam-Baker' fullname='P. Hallam-Baker'><organization /></author>
<author initials='R.' surname='Stradling' fullname='R. Stradling'><organization /></author>
<date year='2013' month='January' />
<abstract><t>The Certification Authority Authorization (CAA) DNS Resource Record allows a DNS domain name holder to specify one or more Certification Authorities (CAs) authorized to issue certificates for that domain. CAA Resource Records allow a public Certification Authority to implement additional controls to reduce the risk of unintended certificate mis-issue.  This document defines the syntax of the CAA record and rules for processing CAA records by certificate issuers. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6844'/>
<seriesInfo name='DOI' value='10.17487/RFC6844'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC5890" target='https://www.rfc-editor.org/info/rfc5890'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<date year='2010' month='August' />
<abstract><t>This document is one of a collection that, together, describe the protocol and usage context for a revision of Internationalized Domain Names for Applications (IDNA), superseding the earlier version.  It describes the document collection and provides definitions and other material that are common to the set.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5890'/>
<seriesInfo name='DOI' value='10.17487/RFC5890'/>
</reference>



<reference  anchor="RFC6068" target='https://www.rfc-editor.org/info/rfc6068'>
<front>
<title>The 'mailto' URI Scheme</title>
<author initials='M.' surname='Duerst' fullname='M. Duerst'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='J.' surname='Zawinski' fullname='J. Zawinski'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document defines the format of Uniform Resource Identifiers (URIs) to identify resources that are reached using Internet mail. It adds better internationalization and compatibility with Internationalized Resource Identifiers (IRIs; RFC 3987) to the previous syntax of 'mailto' URIs (RFC 2368).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6068'/>
<seriesInfo name='DOI' value='10.17487/RFC6068'/>
</reference>



<reference  anchor="RFC2985" target='https://www.rfc-editor.org/info/rfc2985'>
<front>
<title>PKCS #9: Selected Object Classes and Attribute Types Version 2.0</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #9 v2.0 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from that specification.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2985'/>
<seriesInfo name='DOI' value='10.17487/RFC2985'/>
</reference>



<reference  anchor="RFC2585" target='https://www.rfc-editor.org/info/rfc2585'>
<front>
<title>Internet X.509 Public Key Infrastructure Operational Protocols: FTP and HTTP</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='1999' month='May' />
<abstract><t>The protocol conventions described in this document satisfy some of the operational requirements of the Internet Public Key Infrastructure (PKI).  This document specifies the conventions for using the File Transfer Protocol (FTP) and the Hypertext Transfer Protocol (HTTP) to obtain certificates and certificate revocation lists (CRLs) from PKI repositories.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2585'/>
<seriesInfo name='DOI' value='10.17487/RFC2585'/>
</reference>



<reference  anchor="RFC5751" target='https://www.rfc-editor.org/info/rfc5751'>
<front>
<title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
<author initials='B.' surname='Ramsdell' fullname='B. Ramsdell'><organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<date year='2010' month='January' />
<abstract><t>This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 3.2.  S/MIME provides a consistent way to send and receive secure MIME data.  Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin. Encryption provides data confidentiality.  Compression can be used to reduce data size.  This document obsoletes RFC 3851.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5751'/>
<seriesInfo name='DOI' value='10.17487/RFC5751'/>
</reference>



<reference  anchor="RFC8446" target='https://www.rfc-editor.org/info/rfc8446'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2018' month='August' />
<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t><t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='8446'/>
<seriesInfo name='DOI' value='10.17487/RFC8446'/>
</reference>



<reference  anchor="RFC7638" target='https://www.rfc-editor.org/info/rfc7638'>
<front>
<title>JSON Web Key (JWK) Thumbprint</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This specification defines a method for computing a hash value over a JSON Web Key (JWK).  It defines which fields in a JWK are used in the hash computation, the method of creating a canonical form for those fields, and how to convert the resulting Unicode string into a byte sequence to be hashed.  The resulting hash value can be used for identifying or selecting the key represented by the JWK that is the subject of the thumbprint.</t></abstract>
</front>
<seriesInfo name='RFC' value='7638'/>
<seriesInfo name='DOI' value='10.17487/RFC7638'/>
</reference>



<reference  anchor="RFC4086" target='https://www.rfc-editor.org/info/rfc4086'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'><organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'><organization /></author>
<date year='2005' month='June' />
<abstract><t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts.  However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities.  The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t><t>Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult.  This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities.  It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='106'/>
<seriesInfo name='RFC' value='4086'/>
<seriesInfo name='DOI' value='10.17487/RFC4086'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7468" target='https://www.rfc-editor.org/info/rfc7468'>
<front>
<title>Textual Encodings of PKIX, PKCS, and CMS Structures</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<author initials='S.' surname='Leonard' fullname='S. Leonard'><organization /></author>
<date year='2015' month='April' />
<abstract><t>This document describes and discusses the textual encodings of the Public-Key Infrastructure X.509 (PKIX), Public-Key Cryptography Standards (PKCS), and Cryptographic Message Syntax (CMS).  The textual encodings are well-known, are implemented by several applications and libraries, and are widely deployed.  This document articulates the de facto rules by which existing implementations operate and defines them so that future implementations can interoperate.</t></abstract>
</front>
<seriesInfo name='RFC' value='7468'/>
<seriesInfo name='DOI' value='10.17487/RFC7468'/>
</reference>



<reference  anchor="RFC8126" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CABFBR" target="https://cabforum.org/baseline-requirements-documents/">
  <front>
    <title>CA/Browser Forum Baseline Requirements</title>
    <author >
      <organization>CA/Browser Forum</organization>
    </author>
    <date year="2018" month="September"/>
  </front>
</reference>




<reference anchor="I-D.ietf-acme-ip">
<front>
<title>ACME IP Identifier Validation Extension</title>

<author initials='R' surname='Shoemaker' fullname='Roland Shoemaker'>
    <organization />
</author>

<date month='February' day='14' year='2019' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificates for IP addresses.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-ip-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-ip-05.txt' />
</reference>



<reference anchor="I-D.ietf-acme-telephone">
<front>
<title>ACME Identifiers and Challenges for Telephone Numbers</title>

<author initials='J' surname='Peterson' fullname='Jon Peterson'>
    <organization />
</author>

<author initials='R' surname='Barnes' fullname='Richard Barnes'>
    <organization />
</author>

<date month='October' day='30' year='2017' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificate for telephonoe numbers.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-telephone-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-telephone-01.txt' />
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>



<reference anchor="W3C.REC-cors-20140116"
           target='http://www.w3.org/TR/2014/REC-cors-20140116'>
<front>
<title>Cross-Origin Resource Sharing</title>

<author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
    <organization />
</author>

<date month='January' day='16' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-cors-20140116' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-cors-20140116' />
</reference>



<reference  anchor="RFC5785" target='https://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor="RFC3553" target='https://www.rfc-editor.org/info/rfc3553'>
<front>
<title>An IETF URN Sub-namespace for Registered Protocol Parameters</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<date year='2003' month='June' />
<abstract><t>This document describes a new sub-delegation for the 'ietf' URN namespace for registered protocol items.  The 'ietf' URN namespace is defined in RFC 2648 as a root for persistent URIs that refer to IETF- defined resources.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='73'/>
<seriesInfo name='RFC' value='3553'/>
<seriesInfo name='DOI' value='10.17487/RFC3553'/>
</reference>



<reference anchor="I-D.ietf-acme-caa">
<front>
<title>CAA Record Extensions for Account URI and ACME Method Binding</title>

<author initials='H' surname='Landau' fullname='Hugo Landau'>
    <organization />
</author>

<date month='January' day='15' year='2019' />

<abstract><t>The CAA DNS record allows a domain to communicate issuance policy to CAs, but only allows a domain to define policy with CA-level granularity.  However, the CAA specification also provides facilities for extension to admit more granular, CA-specific policy.  This specification defines two such parameters, one allowing specific accounts of a CA to be identified by URI and one allowing specific methods of domain control validation as defined by the ACME protocol to be required.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-caa-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-caa-06.txt' />
</reference>



<reference  anchor="RFC3552" target='https://www.rfc-editor.org/info/rfc3552'>
<front>
<title>Guidelines for Writing RFC Text on Security Considerations</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='B.' surname='Korver' fullname='B. Korver'><organization /></author>
<date year='2003' month='July' />
<abstract><t>All RFCs are required to have a Security Considerations section. Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.   This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='72'/>
<seriesInfo name='RFC' value='3552'/>
<seriesInfo name='DOI' value='10.17487/RFC3552'/>
</reference>



<reference anchor="I-D.vixie-dnsext-dns0x20">
<front>
<title>Use of Bit 0x20 in DNS Labels to Improve Transaction Identity</title>

<author initials='P' surname='Vixie' fullname='Paul Vixie'>
    <organization />
</author>

<author initials='D' surname='Dagon' fullname='David Dagon'>
    <organization />
</author>

<date month='March' day='18' year='2008' />

<abstract><t>The small (16-bit) size of the DNS transaction ID has made it a frequent target for forgery, with the unhappy result of many cache pollution vulnerabilities demonstrated throughout Internet history. Even with perfectly and unpredictably random transaction ID's, random and birthday attacks are still theoretically feasible.  This document describes a method by which an initiator can improve transaction identity using the 0x20 bit in DNS labels.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-vixie-dnsext-dns0x20-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-vixie-dnsext-dns0x20-00.txt' />
</reference>



<reference  anchor="RFC7132" target='https://www.rfc-editor.org/info/rfc7132'>
<front>
<title>Threat Model for BGP Path Security</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<author initials='A.' surname='Chi' fullname='A. Chi'><organization /></author>
<date year='2014' month='February' />
<abstract><t>This document describes a threat model for the context in which External Border Gateway Protocol (EBGP) path security mechanisms will be developed.  The threat model includes an analysis of the Resource Public Key Infrastructure (RPKI) and focuses on the ability of an Autonomous System (AS) to verify the authenticity of the AS path info received in a BGP update.  We use the term &quot;PATHSEC&quot; to refer to any BGP path security technology that makes use of the RPKI.  PATHSEC will secure BGP, consistent with the inter-AS security focus of the RPKI.</t><t>The document characterizes classes of potential adversaries that are considered to be threats and examines classes of attacks that might be launched against PATHSEC.  It does not revisit attacks against unprotected BGP, as that topic has already been addressed in the BGP-4 standard.  It concludes with a brief discussion of residual vulnerabilities.</t></abstract>
</front>
<seriesInfo name='RFC' value='7132'/>
<seriesInfo name='DOI' value='10.17487/RFC7132'/>
</reference>



<reference  anchor="RFC1421" target='https://www.rfc-editor.org/info/rfc1421'>
<front>
<title>Privacy Enhancement for Internet Electronic Mail: Part I: Message Encryption and Authentication Procedures</title>
<author initials='J.' surname='Linn' fullname='J. Linn'><organization /></author>
<date year='1993' month='February' />
<abstract><t>This document defines message encryption and authentication procedures, in order to provide privacy-enhanced mail (PEM) services for electronic mail transfer in the Internet.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='1421'/>
<seriesInfo name='DOI' value='10.17487/RFC1421'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAM+cbVwAA+y9+3rbRrYv+H89BYb9fRMpLdKSLduyenfvpiXZVuJbJNlO
srunGyRBCTZJMAQomU5yHmteYF5s1rVqFQBKspM+e/qc0ZeLRAJ1r3Vfv9Xt
dl2VV5NsP+n0l1UxTat8mBxkiyof58O0ypIX6Sw9z6bZrEqOZpf5opjR7xv9
gxdHmx2XDgaL7HI/wT/dqBjO0im0NVqk46qbZ9W4mw6nGf9nAs2VlcNWz4vF
aj8pq5G7KhYfzhfFcs5NJO/g73x2njzFz1w+X+wn1WJZVne3tx9t33UjeHk/
ubu986gLf7mySmejf6STYgafrrLSzfP9xCVJVQz57yQpi0W1yMal/3s1tX8O
i+k8HVb+2+XAfzIrnPuQrWCEo/3kv4ZhTbaSZ2dnr0+3ktffHm8l3/fubz/6
u3PpsrooFvsu6UI7SZLPoI+TXvI4Xcyo6SThtTnJhxfpYmS/KBbn+8lBXg4L
+jObpvlkP1lMBn/N55e98mPU5je95FkxHk/TWbc/Gy2yK9v4N+mwGLR+T30c
PXlie3hfXqR/zcbjHnwZ9XHYS14MD3CAK9P4YTrLs0n8DTX7PKu+KuF4DBer
eWU7GM6Xf51kVZnxV41+YC7fpmWVzaIpTLPSfkxdvJnll9mizKtVUoyTF7CG
+Xk6iyYz+kDv/HU5hW972WjpXD4bFws805cZbExy0H/85PHJPr0lp/6gf+fx
orgqs0XypFgsp7AtZTbJZ1lykv20zBd08nkF/QYnYc9qb9N3/ozudbcfcV/p
4jyDE3VRVfNy/86dYToY4+O4HncG0mF3YTrswlVa0m933MxO4cnx69Odve3u
bjSLl8enZ/RVQt9tJafZcLnIkmdpeZGc4iWBE9cyCV5xfFs+oF15Cb0Vs3SS
HM9K6GAJVADWXJspE/h/cpYNL2bFpDhfbSVveqe95DCbp4uKaAM8fFBMp9li
mMULcre7fa+xILge5WLYm+Vl1TsvLu/Ml4MJ3jMYQ3lnnM/5PzQx+q1Lv/bm
ozG09c3p6c79aC1ezZLqIuMVkONy9hwWpnePBv7dm+ODpH+ewkyr5F2WfoBL
WMKBy2dwnQ9O/7CTXO707uthhjGsXbazfFAs4LieZwu7emdwP/1nbe998//8
34vz5HR4cZXNPtg34TbYT1vfXS7S98lpMS0WxWX5YVV/Pf6ifu5Gkx5QYjp1
w7yiFe4Nx9P/zEd/vru3c+/B/Yfw2snR6Vm0oP0FXLYqG1bQ9wSOwWqS8RnA
ZT7Myvx8hov8MquQmHfxPI9gJOPqKoUjaN7O2u6REMVilZxdAPspkydAY0bA
AuzUgI5GH+uJ2t5uO05XV1e9fFj2lsMcycCd/zGWd/FolXdGOWz4gqd/pyrm
vYtq6pzrdrtJOiirBRB/517TIUy+zVZwC8YLoCyLJc0hWZbIn4jqJxvAAb7f
TAxvgJWhZ2AJ4IonaTJbTgdAHmCB5svFvICjtuVw4aYFnD9cO3qRb83VBVCu
JC9pZXGZ4DbJTcCvR7A+cExxxcpeAuu1hLZC3/gUr21e5TCQjYN+uYnnGlt7
lw2QXdHoiKHCAKsiAZqaj1fwRFrBlibpfD6h0TgevJlYMsnOoV2gRNlklSyy
OWwn0idq3YxsI/Rp3u65folTqC5gdlc4wNn5Fv9FQ9Dxw98jYObwDfD/8wsc
QjGZwOmRJUhHyUUxTKZAfYAZldOy584u6CUml8koK4eLfID7kMwXBQgCxUSm
B9Saji2wDT/PBP6Du4VrkbL8k9HY4d0hEAbsMxogNmDm5eAsLdPZMKP9yEKX
6aQs8K/LHEaUjNNhPuFdwYUtoIdF1Mw0SFnj5YymW26BNALHAa6E3QaQtgoe
S4/P7DQfjSaZc3+Ag1otitGS3nbuwB7Kn3/+P06eHNy/u7f9669tR4JOI0g+
02IGu0vHl1dEj2Dm2k5f8ptOn1t3+pIvOX3uutPnDvPxOFvg+lareUb7Gt1a
kAnxmCUj/xyIoSN6Do5NdASKcZArcNKDYlnVe0RB8j20BwvVOeSFe5tO8hG9
0kk2Dt9uugbVGKzgoCwSTx14P2jAcrxody59Q0RIYHg5jp+EB9q2ebbA4elC
HL5N9JT6Y400Jl5/fBIbAREdzuYFnDoQDPHiXcLECjxZE77A/rb/F4tTf5ex
8ThmReXsWNKqyqbzKqI1pqOvSng6nXSBc0xGCdwVOG3VClrcoGsN/8BAijnS
TWqu82oBYl/+iZc+WtJXbzfxdrrO0UeQAkfwfPT10duYTm8Btc0W8WXHHmfy
Mo4d7rCLRt0YqS6Jn1Bv07mjjyDKIJPQY28Phr0j2BV2hAQoTcqsCiTOKSVh
imFb8JuJtMgPxB5RWL9juQTAjLHRw7cunnyKxwr+mGDniyT7CIcmz7BVWISy
mGZAm2EGk/wDiJ3u6+RpNssWNH4Rk7aFptx9tPcAaIpVGU+Rq8HLJ7woQApO
TzZ70MjBsqJBz1FQp/HBN7jkBVFn0CGuYMXmQAnx6ddAPWHwV9BxeZHPa6cP
LgsyCvlwDFyiuMJOceTFqCTxAtpYMuHvCikG4n2RAkOZncNM8Ktyng1x3Ml8
kg7xglFzOAxYFljT3s3twGDS5PDlKRyCIeiKcFsWQJ3mxQxFDtxebJFFFJZp
eAbS8kk2zPCOXTPKjYtino2Xk8lqk8jkaJqjsAzbUSy6cjcn8BIpQtxFOgLN
D05061i4/y2V4WaJPILf55Wuge4HN6ibcgj7MSlSFv7wJGaj+HjjmQTRGoYf
2soXdBVOZUXdu7y6oAayj8NsrrzdnwfQFydjL2FGZJJZxUK7RhECGIHDT7BH
1N1B30QeIZICXe0Ryp7M+/HBIT2WlxcwdjhGsC90W7GziyVwYkdXAhaDTxXR
BJQKcZtmKYnB3Uk6O1+mtPssGiLHTsaLYiqLl8D2IJeHEc8c9DJNQQ4GLS/H
ESKjh85J06Fh+NvOVxcGsaK7W27xQttOYA4O2VQ+XE4qM0wSTVKkJVasHCO7
XRjhpZiNQYQVIkFsDGlAOkABBegcXNgSx6siaLFAojji3aXlhzMxxQu8QO4I
JCyZZTCDne49WPDlAhlLUgwqvKNIjvUwxOycGbxchCQ5uoRmhF0NkGTg3Hnq
cC0/IMv1awVikWii+SfoN4iCiRcK4JIUIMmnw0mmZ/4KrhUIh/NJscLFd3De
yIhDa8LyGMryXXgE6T8sXLmCOUKrg4wXFU5zPrvIB3A8tdNPXiCo0vIDMmG0
cdE9aiPYW2YAfPsiYW6tIDuDewLrXOYDmA/oItMMFS1eQ7HZyfG1rEEFtiAu
hMtAS7vIYJtTpZtM7kq5wFbjcaXqcmFno0t5BdcZZSC6Nv6y0Al7U2Ze7Ncz
7kp4GnjoIsVTBVQNziveR+GyYY2SaJOYUWPL8JKwXtoyUjhdTV0KYnZgpKyZ
wpdni3QGFG9RJc/TFTzibQUbZ89PN50Ky7vA2GBfjuEs8IgHGco3uMF0Dy7y
SSbcZ7gM6o3fQvi9COsPqqsVoWmEqhLiu7h3uBHR0sby8xbbSMvlHAdfOjkW
RHmgtWUpmyEzZ9kAlF+6wuGUkzwH7yKxeVIg80+RKG25tFVHy4jcwlTOCxwf
nT0RWmg42LU/ePC+DLYm31ZIWYQJHb9WBkWqyX8edw97wVicz0GewB0XI9ZZ
NsnmF8jsj1XYOcku8zLHndg4PTs+qcvStq/Kv82aeEuH/hHabpoTqoWkwg0y
qw2xfojiEcilIDlUdUUiMYpcBkTNsZA5K2ZdfX2k4qZI/TBSII9IQ7NRbUOE
R8KFmqUTh3xrCe0Ocubm4ywlg8RGmWUwKX2uK8915blff92U6TCTYFO9NqbS
J0ulTNCEzV6kl0iNgTKfw30RuibECDvaomnZ1kgTQJkduyr5dOA7Ioz4Q1IO
s1m6yAvpCEYH1ypZgfw7yBwJOn6xR0ELjggcLHu7oG9PAuwmqMWHgaC8KEbZ
hM7Wq3lG8lNy5CVfpMBZcr7MaXVxVUh6xuNNM8E7QNSvcUvxEeCKeCJLt8Ek
S6TjvZ092AAVyKEJ5mypETHragccrPQDGWBIwF2AMrhQoa3cMrTQWyhatYO4
1Zqul5d2AEBUl0yIsWueTxAUQadGBfpt1I3hKt5sMLzIhvD2cJLmwDdZL4ZR
zvG1zHJHZxTK1BqPkm7XvqGnA28hMHQcLElsNbGQjDDEevB4WmlN18g2BH2j
jYTErwVKijB2EMzo7KaVm2apXoAlrN3C60nDfAF0HWWPISlQcGlBQJh7Gi0q
4FakiQFNRX5aV79lKN6OkY1YL2LFnSd5jPOYZZVhYEjb3QyY8LLqFmNgfPAO
Saw86UukjiRKvIbLRRIsHlzSdGfCV/HswvN8Rnn7t0j3pINQ6K2QSU9IOoa9
RHVU1PjzoAminN5FYTNWAvC0szjv27siJgKiYJaCYLJuJGJb5UEz7fNq6ZVy
4Fg5pbNMGuqZ6e8rIT7DSY7XngdfxkPSQ+4vSc2IqVYR0H/iu4pXFCVQbKEn
Hce9GdtUWAHkyymMuWQHSV+0BbH5orUHJgidwYLHwrK3htC7V8gtUPoE3aPA
EVU53Bsv2rDSP2dxPieLu/SGI17OR6xGFTJiUAby8yWrB73NxlSm+fmFLp+s
RbR+85TpamQPE/oyB2mh6tU2Bo8MsU1Ud/FLsVMMQMpHN/CMVbpoEEgs0qGs
p9hw5bLJRc1RsSYi0KJmXLPHOjpv4VOaQ6sYel/g5bNmnsZhGaDDBRimCuLR
eRBzHIsNJBn784WEgGjnICPDNx42PCjtFjc/7BYxAebAuyXWN1wJ7l8GjUOT
N3pAsslLzhZqlCCtAYPpnnkWmZBcVbQVgJZHnj1+Tpwu5nFc1ld4Z4N5soSz
UcL6wvaiHoVbVTZspsrZzOK5xKs4TI5GYn8oraUBaDDQ3TmI5kAA6TGQJ4Db
6W7o6YPWLvOU7SRbyemL060kq4atdxiOQ6HqSf0AEhGs5DKNYqsixhBU6RzN
Ma+Ir8SWsQpEthItW+wl2Hh1cPp6U+wvpO0jpYCDkeHNzialoXvWqvohy+Y1
Q5X3G6Qs4KCaOoTHeUlKGC2+OGJruAojV+mKNsR3MsvSBUpfZZKl5YreIGKt
5Oug320afVBvkO/XcoQnywVqEijK8HnFAw37pcIc3gbX2roMTo812r7QZAFc
D2SWmPElySnKisMJ6FQOvzlfeOcZ7S6N0nIcL6sSlZgC6831JHoJ1MUaaaxq
0JuryCRVzkG2tfak2GLniOxPcaByu5GCox2vXE69gqXq/0jFC+Aql3kBh6dk
bxjLtmewpDn74Vl8/QCDwYiVMum8eHN61tni/ycvX9HvJ0ffvTk+OTrE30+f
9Z8/97/wEw7+ePXmuXyPv4U3D169eHH08pBfhk+T2kcv+j90ttgE/+r12fGr
l/3nHR69VYrFjjBgoryAaZH0U8Yzfnzw2u3sqhC9s/MIVEL+Y2/n4S78gSIN
y8JEPvlP3oo5CLEsDE4mDnhhDiQCBbYS1firWYIaWY9Xq7oq6CAmQGtZ26Zj
gmPsMCXoUB8dPi0dcXVYSkFKN7LG4G0slOSu0wzTuoMvqDULZ2xCSdKfxfw4
XSWLJbKMSIPYwklM/B/IZpHXkMLvhDywOYu5jtylkqV48WVHilOSvFoQZYh6
LDHGAy+8tEmNjYqM3D4Jn+CsQdYHSzKFqIrJFMyYnFPXavm2ay39wUBKNtu3
+x1XjmUDapqknJgFwooLM9b7GRi67EmSjy33z0sXxo3GgXg/rIO0VFOjDBZt
vqRLoJIzSzqqceMNnae5P0zNc5Rf4rLhc2qN0XdI9sR4C9Q+pqBJwIlCisCK
fOicm3ZeqhZmy5E11Frsj/PzQOMKM1YknmJl046cN2/zmHtIgTwvewXtXebZ
lVhQhK56KeTWt0KUAPWHuW/Sy/QUKANIoK/Ip5q8LDh4I9n45vTVy82wEMN0
AdrCiOViq4bv3b0fKAjr5D13rJcuaB14drLpgAJckgoNlMJRyRlSV+O2kGCw
/J6y8RMYLrOFWSLbveW8qBqJpky78NTjuNukPe/KTuMVy2cO6HsWFBiWSFj8
jc907ALHwzbOF7AB8wtxC6pdQ5tq7lWYCTNPPKHmSsZnWFVDXoByBfy0WsiB
o+Mbie6pm2VXfp1ASOO1BmrOxIDMLCx6WQUDVu58kWXevLeYlmjNx/HksDcb
Z8XpJq3uHZRay7IY5sFAHs2FbFniqpUvHNkQ2FLKFLPHE8SNxSOn64IyLYs5
uix+9qPoCouQna1XLHK8SP/D/0jc0wE/9fk/7GVz0sx/HcgKHocV/Lt+B0uV
9HEx8f75T/sjf+wP0yrVz9GrywbHtp8u//zFfcGI5acve/Pm5PmtWvkP6bOl
CSYUzjXa+a+/24WAPYClYnOLbmyp0yztnvy8z9Fwf+5oFwdyIjq/Qjev2Ofi
jxcFZJzn6CQTJyUqZAtUSJcLoHnvkUWT8cgcCDQBMxNJ0a5RuIYlYN+5nR7I
uINpTjcz0IFY7RX5iuRRd7cnnnRrdJutIu9AIBnN4Bl3D4Pv4DQAC2RtinqF
JStpIHx90HPrdntJ/yoVBc+HKIyudxkzYeI1ACK7bk7BH8ZOopJ0ITMJN58s
kciOkaiEI0yxf6zWozBIBxhofIrczviTUYARv0pYBfRG82EJJi1vB3JoiREq
hKJPPsoW3onDgl1M8PMqiCaxNcjZ0N8GoZgu8ViSAo12gnGxaMpYZBXyew70
JLIPwHQ4oCh4lGUa9J6qVjEHGGXTYkY6S+bEyhIbQ2rupfWsJ0keiw+VLgJ5
68nDHYKtQBGloy9mZWCxBTpISo18bERvOdN7c0bDi6JA0z3KK7H7VIJsvJQp
J4PiAuZoel7kkeHI9wKrSwwJjdvkqDF8r7atTjrxar1saTaZRCMlySEaiW8R
4680mGHUoxviZe7M+xRbzFXRi/yF76AnhAo/rXuFOfpJ3/SmmGD19BacYBg1
XQKjJ4uDPchbdlxjoSDlOhLiQmDRzbFEyVltw1ukH1c3LU2RrCLhvARlKR2E
2AAvzf7LmPArnO+/gJEGFnii1qF+5MnzIzjRs/iZo7hmGP+hixXcb/rJX4L4
cXryL523/vSHH2bF1SQbsTJxi3HHnKo27tevTs+6adl9enTmJYPfbaz4c2AZ
YP2V3y6l2Cukeg5KKmcFxZx8yOrMyVxVUCfRvKrybbBHBOGX44Hw1tYZEYse
3Mdo//e7UrULddIY1K1OWfc259r/6M51G9/AbVpOWg7Z77txYZK4daD1agAW
BZ6o7jbKgLaqHpLNKGx+PAHFRiO6CqDQsxG84bmo8zHQNR4O3G82zL1PAf6c
potV8IVr1IZ4YUEIssEulQacctBDFO3isyLQ2hU6bUSgTLwWbFivdTYHdmkN
hu7nn8Pz3fB8NzyPQSUSiGDaq6dVEKtdGu04BBLZtYrkpjHbtn0sqaQyiHzu
SJbioSYXxRVOroylJ1ycbDYsRtbcq4kEwLmuiOOq5NO+GoZbR34gMtIcXKTo
EofvjrAbvLiuLzNgXdzbzUo1KKGnhDw+sNXG5lVuWZMcxyPYIXm7OkYYYNxf
ydrGbL6s2NAwys8zjm6HjyTghGzUA78Kjk0yOKc3Z0+6ezhRmQDKVmzHuffg
7qNff+0l4WLYNWXJXm3BcYAQGjUpuqWi2FQ0CmeyLl6Ul4FtZL3z3hZ5x/gg
k0WCYkAchb+cHhwfh+HJXn6cyzWB2fe7IGxkIDObgNDkjXwIokx/tiJ1wa0b
QrCYU4IEBRCJe59MGqgQTNkDAt/Revm2aPdfsH0shL05h/l5y5lm2UHb1RUG
+qQ18yZly0Qm2HTBjkpjY9uS3UJjHMf5ehK88c27003Zrof3d+7DHax8Wow4
RIOqVkoYnjMhIHhgYkMnCvUuVlUiwyfb/XzqjY47Dg/EQ0vOb/GPcdIBxSXT
qHDKXR8bHuLsthKYkW+8HnRYWNvxV16tRjc5+SzxslR5d5HNJylZuSr25WxJ
pKzaXFX74KloK29OnuN2/kE+FokYRLyjFPQIJlbiAyR7ey3Mucbh1cYKjYgL
jpoN5spoXbfItrry2+y3xJpUra3Vx346Hi0MSH1PvYQGDKJ/6RO7gH6bG9oN
VmE4MXBPgGrG+r/0L9p5yayFJ+n8IqgSw9qGt9X6sVP0HUv+x6Ih82ArvCjB
HM1Nh6gUe0WE7fF74rOO/NgmbsQ/p2e17t8gJzMSTFWtroyyR5TB0/t975A3
jzrzKHz9Fbrmu9s7X4X3tiRVQV/CA//VaFbiU+IMt+bdMhEnoISYs4KFAV9w
goR2wMn5+ef/pAt+97545nxgiYiIQGQxB9fHvvOr6N+yfRHJFiOMz9l90f9B
QheF/yA/xQOcsKsahpEmG9vdk7OzTY0/JHV1nPnQbb8ZnqtyjgFcueFkOSJ7
ddu9LDW2kr/phm8wqJI9jGxUYZHHeV+wOutFviEnziJLy2JmrYEz8oOhiVyW
csasnsEUcGIasyaODeiSZtpLNE6V14T5J61Kivdu0e2fk2qepWRNQxsYmYGQ
KCxGZJqjYDIhzXfv7eCVpcWz7+j2yzrRQlKcHh5xysf3VE+OjYaKY19C2ZWS
rHmRw0gmSFucPdDaVK82VRkST3aGJt9sXnWfaz5GNPwbZowjy2ZkCpgUGFXu
A/qTbLEwnKd+K0IaionbHKgLgOJXh2hTIZMTpUdwnK07WBRl2X21yM9haCcS
SpOcXnDEwMbBq5PTTS85KtcPTRHvGzDigCRa67LAHXx376B3cnTQhQmX3bvb
O7vbOzsPiBRTWETtSqMgRftGzXcP2LTX7eNd0xFGiynbCDRmmSWdv33dgVV5
nM9QQRAjq8iuxCEKMsHH5DMSdFlowEk82F0uJkH8iQIBToVF3Gc6g3u3+2B3
D4V52liT1gS3c4yKkbDtDDlqm1BiWr0bWmXxRO6AHwu5TlNkvURRXCSH9lCi
yskG/NWfv7JCoIqzeLdBBAUycCSCLa2ehq3prbqhlUWGS0nSpAMSSsIRHDFZ
SJYJ1D7WjyQSlvLFsyl8XUzPKLxiZuYqGRSjFfcFLaZz0GwlCTpfqORCbrFb
Cni88VtqPgiSvDhHvioj/9hyNqEoZqSKV3lptk9srMIbaYDGZY1yGBvDnRgw
az59WnOZDn6lYhRMN+dYjxtEOV0xWGB8Ug90yQGPtVWl4U0zvlMmHdGIt3Co
YVvz1EerYqu6x3J1kicTzF7AhaPVPsUXPF2y61xvAwNySKeZLicVqvDW1BCe
fTPT+/eatzZ5NbdtP3z0EPbQtyjpD1EDwgWhiWdMHqLtv+ZV7dE+MsoqEAbj
x+rt0/OWBYXlZcKDyZ5fJ510ct5JNvqTc4wFuZhuknnma77RTMJ8z6LFJR24
BlmH4hu9mhRfoeQAVivZeNE/2AR2L02zWkjx+V6spCPuH2D3H5BGpma8xqKl
wWnpH9x5hk32eOQwiiEMY0NtOflsjdDBjwO5bD5MB7ELX3W9IqEvHOWkeXbe
X33ocNAEXeNvs9UmTr3zIR/B54R1cbhJgVJ6B1n4DnEv9jJ6aY6m3jk6vXv/
QSecOrMY/oDsaWaPiBW1FkaHp/32FgIVgafu3r+/86gDjAjuBkJRaXoi8ZnO
cHHZUZK0t33vISX14Nni6VM4F01YmBZ5o5aSAJF9hFNW5pdZTyyOcrOZBPvr
zg4xPUQDIF7icptlV+ogDjFHEisuVlG08BnDi4kgovFHdlnEn1KBUSlFKhOh
4fcap1sHFcf7uNZE4IgOS5YThRcJgZVJkVGOTlCYkyG0JhZCQneacRWs4TYm
Evbh+omkITQA9Q9MmMbFcmimN/OJVp9lK9TtoogutW4jpbERHJQhpcfNe9Xk
vGuMmxPtZIvdcFWNPS0yOLZkRWHxkRouOeYXiW6yu72dbDwGEijsepN1xdU8
w0s928ectH2MsZuW+5iatk/t7A/SkWe5nrxp/BjQBxANp8ESy6OwkSk8moiM
UkSaNlXKJuhKOFA3Ugr9Ci5xpq4svqBEyTln2DBaVsc+TQnoeT5BVYZsNAE2
x8vU3swYtkZDFCWvkT9roQI8BownzJii+dhDedUhVAL5fksOYqJbG18Fvj63
20F38w4muoPuhh1kRCEgsrWNsym/uHZCHJ23GfNVQ91RqAhOSslhmNef2HIl
pnR5g8gbCRy8dnDFOidMqAeCWjItRkuMnOjMOpzdAjRgildeTJ/3d+52Bzkc
VdvGUWiDqZGNAuXcbwkufd2FJy0lipphik80Gem2fLi7uwcbpAPU3CSM8/VH
RF7VfAnPFaB5uuwRubN0DqMpZ2jxJb+IZjiiqQx0qxwFFqfRCrXgUS/0kSks
sTKhkCkvvLmm8CbRyRTMobbnBJUu6KJ7hhTAKlsUQoB4J4KJQ1hV7+Fc//E9
7GqHw1FST4H96osEmpc2pOSGs+5vZINeud2d+8nGm1mgAi8wQD7B4W6y3oEO
Utw+6zBVy2Ty8x/mBcgk8PF5VkUurJq0jb4GIca4rHVRHc2YGqkR6TEFAYok
khVMiowG80SMlWwfiE+HmAnpwhm3LhKzI4KhCFGQZNGpReDnPvIeGhs7s5jC
kJCpmHYp3mctV3AxTYFVfkG4JejMSEgFz0aBtCQduJCcGdhhqpkGC155wcRu
nFUUc6ScL4BRyDg3WE6ldAoX9C3JPFK9EKawKQdGJyB2JdxivzU0CeaivOx2
wdJBcZlFADsi+YvFB99CC7X7lC2KLhomMWcdRP6KNObZOefLssxB2QwscHSk
HWVXYnkKN9HLFpKDRysoV4kYISm83Eey0engIX6XqTdvnKlTBV2dQGPMoe6Y
8/JqJntOAo6zSwLLZOe0wabgZUnqNkcryxxs0JKjYdsTK19SgpWYzFDxRU8a
m4N8NN9iOUFW+kr3c6txzyuMVFQTpET1ljZZrUynGCuuMXFp7ST7e4HPWcGq
rp2zmdberZBJDKRoWBULji4HOe0lajxOGzOGVvkAVJetuhGxJSijdNJDGUZW
qhmYTXulN5GhOa0oKoxpmzPqkLdb1uiRhP5GlhWUPY9VsyJUCA6YmrKv1yQJ
6aSFLFWUo8NGCLRq49fiZyD7XnDL+xsrb3Lemm7TpDinROQ4d1dOXUc3awE0
Ed7ouAlBWwhnYpC4OryA+vZ87iAxppTxIUggmSDq6srNGNvRTyWjicBjs8wi
3+hCl0XiIwYpOZmwEtQ9Eh2OUTYDHonZzD6A+7A43TRGeD5opeQLUYbWIs/K
ANEgybBiWYsjEZM4wJNYjJNHIu/aVsLSjn0Xd5xSrA1j9k4Lsgwi5akKpw5N
ScRmJ54HptkSA4FMCW6XoI9q3jbPaeVoIjUrFg2CcBeYGlLf7Ansl4JGEhkA
4pP866+cqW6NVV5qYTkmdWxPkFmS7JpV/ujkiyQYfPgZvV+NN9i0VBJzlHEH
20hwmDExaJjrYrrKEbQzJ4Sdc/slA1V2rE7oCLlZOM6aOcFm1RY3RPZiMtio
YDEqBV66VmxSpcIZcrqcRXlCNYkikD8lUtG2KBGkKFQfYkM3G0ZYOp8cFQUs
qlPXe76BZVoeHSUGWfoYRXsJh6/ctavGVOkjJhII9/RjikaRbHCUg6MoB5Ns
hZxrkXW9YV1S1WF6m7GdV0xDmjSNyxwL89I/zJFhgAh1Yst6HJMM/cteDvJq
MCYW1Efvc8Q4BsZwRf8+dZD4xDlaWZXgHfFEadRfmPZl7DXM2UY/lZZd7Shp
OlrrpJMxqtrEpf6Q/J8/LYvqT9Ax/wJiOywtESixor722/nzH9BKiP++vyq7
PMyuH+avYi1rPwpqGSx1RTUYh2EAzY3PiTz6+6vX3tv113SgEpxxeVYSD0Vv
O3kjiJLSHvul5OMbGk9lQZ1H4NBdZ5y+EGtxwj7h154dUayAd8/JsOoXWQLP
VxTGTp478S2DfpgOP0gMlYtvqzDfKYKbiagUnNKemyjx9R/g0lr4B836owRr
QasJuBNkafawCRS7rXnLmpyV08rg6H0EqMiBcfof3R1iIZLtQG33GsZiH4qj
fYcrF8y6RNl5sbskG8a+axcZpa15nBolJ2f9dnlTV9SuqzuIMdWepoBi9Xg5
CeowwVJGWo+xXcusHMHC1U1bGv2GnICaJ2uj0OxakJUdK4m8GEdfZ7lEsp36
CerneiuARjAlC1GhFBpJr/FKtV95XD4QJ1BDxkOCo41QbIyDv80bJ8bS+AbG
Y0V1Tx7w+QP+fHBmu0/84x1O1x8HkhUwu4iPFLfr8CxzwJ80EPvo2uQFzdrB
PSRz1ZbSG9KJrtIVa0M8cLovqL1cSqYPsfp3KCSkwRjwXvBNvBHD4weWdrjJ
FZN6Cl+gEIQN9B8UlROKtBksCCpf0iW51hq5Jdm7Hq9Rto3P520MzbTaHU49
j0816/y0t/452/A1ly4OJJAsmTE0fCFLUje4k0bOa8NnYZGhM03OVkHRCenE
waThU9KyhdKuAtKdccDUQwW4l69Kx72Xw2JOUkExyYerTdCmm5KoX4atYHwR
UsBjs3JloGug6jqli2z0BSJWZgJT670uAVQJDQYLxLwUapkrdEck6oEa5yL4
F1k3AhGyEE0LaBCo9s7dPTTiytFDsVRlJJ6TI0SRwCYkTY/HwIcKOeaHTIcl
vEBRiSwOBs4JU40qH+3KFllKJsvRKIPmIT4Fi+wca6FURZgudQxkyxwyg49C
pzmCHKBGKbBaAlwcbqcOtCcJByUHkpWCUACnTTpkG/ACrVP03pZjRXCwUmEQ
TZOz8wnmpHH2pLwZQP5NJHXPPSuuMtbMGVq34rDJfFZjLPVLZKVyNghp6Bof
Uksbg1NH2wz+SsaqjBaB50chI5QeILJsRXq0KseMQJgQuyJcVxEsI+ZJZ3j9
zQ7xdLIZXZ8UvYb4G/z9UUaiVCT+ivQDUx4vyRlUs8nHQAe0av7wB5Zkly4a
PPwttxtJPdmXwzGe5T8taWB0VSQUTFjtRX5OCv1AcHP5iixncL2B9FaaXQZC
FJpWB1lJApC9wmiIIfgiAobNGWoiMANLE+yQS7nRk5UQlIjpRpMzvtQB2Sas
hdWHYVnaSMTdR2Ql10dktcROhbsGnToQHgsKt2JHUDQ270fEKfQfv3ziKxTc
2xV3Yn0+seDGISClZhi5xIz7z0n/+etn/eROcnj89PgM/t/pdvC//+hgyk40
kD8nO1+HGDRu64ZDHnBxOHCHjjwtjTVP2NjBoJ/RfVQNjdpeq6PdKLSJnrZG
Jgxid6pH2dxANY3SHWHos4UjNEY2aVGU7/kMU76FjNE9RBGrGA6XCwptva57
d5MelzT1uJYDvXZ2a471ls8gafD833Kuj9nh44eWrh8Y10AQ52dtECaykIrA
zKL1b9gEcCswt1Z9P6KRIkl4nk9zDP1XFAJJNxb1U+ElqXAGPmlCMH0IK4a+
lkhSx4jMsaTQJwzSQHGcXCeDJbKVgOQWmsNJInQ7MoymWC22GucxNkIsBGnY
Nwmh2M9zHnWn5wIaxWQV9RXFAcN1BT7b7Y+peIW9rVG8r0lcvNLlp9McWAol
B5E2iMTxnPHJj8chrC4sA0Oxo2cRawdsiVLNl4pQGdkBRuKBfYmBeNmNQz0g
vXNtY+GcPjS7TVbBBeMPW8mZC/VAawId68LJGBEr6XBcQew0q4kPW5Yno6RE
y6r4szr1ST77kBCMK0Ml8QI+x09b1nzv7h7GexEOpPAXDXWoV07xmTbmjHGq
I3qqENzPBIBdZJN5Jx4L10ih63FEISmgd9P/DdKqR3aga4AxW4noHES22V1C
2XY5wouGnAmn9vJIrU5uk3HYi+8cDMaJNziYCvSa0ChqGhcpeRu733+P23D/
++83e3G6ZAxWxcn0VvdUKCXRNsgvzs7lBjCbIUjmGMhob+OtVlXYtFDDRVBS
wK2R0BMbU0y0bFRiR6fRiJiRy723/ZAtQIVWWpJKKwwc6azgzSFLW/HkZV/5
6oboUi00AO99yALIujqQOnjq9FptyLHBL8RJ85JTBudYWOQ6gtfZBDHmF4qq
aEtD/gWLrPkY0t/95xf3y353zc/6b36XH+haQ/sOQaWD00Slc2TWZ0ahDrY/
g7ITw89l/tVbzhquAtLI1Qknq5vv1nW9PtM9EcT0UhvlsKJFvWntGnQ/BJdp
DovxaLEKSt06xGrpaCnqI6h5CwKT2/y8vU5U7WzvOkRJkn8yGoK1R8/amrhF
1z4Krtk1ijtI78XqTLGwFrEu0JV62N/tug7p9CccTRe6jjAO6LugMpYR2Yy9
XbeddTN6c92s22JRv2ze2PUwTdu/M/gTOOm+AijG8CFYxK2/mTAsMJG/Qc6p
jQd9tgAp3lF8NajrYjpHPOdm16c+rZa4AeKx5yHTOQRzK5UFtiaEv+wkFJna
u2HWPi6h3rVxEbClTIxIMxK5CwsMII6gz/jBrkcwi/YFPyNZ8CotDR+T2A1M
yGRL5oj9l+3QBzd0rWUZJALaA8LE1IziD4ORNtgDaalrbTzmChLK4tZ2De2h
i3ZYKcqMn7X/wEdtj/LR7CvxsLPwovLSVzF80O0WXKwLinJnFrzvwQPRSzlm
CGuP/4d+LzFMfMkPdu31svp38YJLVsmV1eS+qE/TNfkfgV2eEKtZ17XU3mML
swIwBdw4VVfwDjDPYpamTzZHiV0b7eyaWbN2SKJokOh/66w1D+44XA/TtfUc
4JQYEqpRpwOPXF5r4OauuXEuyZBO6rOWrkO1gpGP7cGnmc596ayryTUkpRaD
ijIKRmZxj0JNbkdC2rqOTLGNrkVUwAJdwL6WWJDMg+IGFvKFs16GoOPobt9w
rxliZmZfD0nf5fACSMvndB2dtF/QJWaOTq7Qvrazao0Qf8tZw3b2hyyiCPmW
Wb/FekdMpNVq3PEBagQYqXgFQV6tiOXcqmsXCkzkKk5fpMArKBXqrFUpZE0q
ubpAqL1IF8pLjV/H1Nlj8ceJKwifVjWaPEG9JM61QsNqlLUPmpQLmhQ5r7hr
HCeOOQgLFsPvuP+yH/LwJMCUCj7B6LvUGJfmOYgzy0d5SSIuedwbthO05nD3
iqOPVA+DLbw102rVyVXmJyNapAxVZGryhZHBdcxYQcGjClqqxYwh3XQJ3cN6
1IGTKJ+H38QhYDrKV6xjfNXhpkut3sSkQRVfzp7gzWM3+g3+YWiyIybt0yCY
JT//wYhpvzp3ilVackJ+ovBSVBkyhf6m4+OtSrKZDQeZBga2mABrLQKjW+QD
rFMvbXEVJZIyLVCkLFpwu6TonyVwvsj8pzksOkTbBhd78lGNMBIpX0X8pufr
PMF1XSpesdTcapgv8DLZNLdY1BXUhgA4JCnYITur3iAcGPJV+VLitgM8IWEe
HSeRFMdjDZaXGHvzTFs6nkZVhMfcxs8/5+ks7YaP6F6dXdOaOE98mD6HH1bF
PJlkl9nEm+kaM4QBx1VTtAly5fnV6zl7OOmciBYXkm/Iloon39fUWmn8px6s
IKWGoYmpMcKkoEPDmKNSUG3NUpLvIIzTkTpwkasxA+c1F+AnqXuhpuh8nNQw
rrioUoH4meiNwZAA41AcB0FPto7qDZOyEWGnKlqN3gQf1cr3tGyzu7Ex/6qw
S55sEJ0B8YcstVeFI2JYxFhnm00InXjxSkU3ZqbBEGrmDtC+kwGbItbtzWyy
g/rAFeOTgEbu7PR2kt3te7hyoNdCQ87mY+0nNvdKWqL0K4cW7/3kPxBep4xL
39xBYnnHh/v+5U+LbPLnDvKGjx3nfqaMdKa2+9eaBEO+zxa/I3wI3jql0g51
jDyL4UznQoVlbcCSlv3kvzx04c8RiOGXjM2/G8Z4LKoVQbuUQ3YDexC15G+d
f5g1+1un3pC5N/u1AUaDBG279ip9TXwMv7e9dKLnfvV//br1G5aiqZGsXxOS
sIBd1BQUZCd/6+hAZ1n1r1sO08na1aDf/u5+VVf4HyI03hcelyvUEPJZcVcB
pJsV+/YyDwrPJUGoxBnFHb3vCK6gDrFOHxJtEqhxkyCPXxkpPTJf0ZdtSKiN
L4JpUIJ+xZMqZB5nqYnMI44IRAIiCDyGTAQvZ3AieKxN75+lfNx6ojoKezYY
OSqpNpBER61SkCQbKMpynU9xT2GqR/jQIqhh6q4KOe2dhaYDal0ZqkpYJZr7
JrIcesYeYsvhrXqKNUUU5IaVaHRY0C1sK87WPhv3fOCLpa/t1RRU9wUZIjz8
Rn/GuRd1zct8s+uPBmaO2Np9bgDiyxIrbD481IUT1TVPyILDjVdG0wnpCviq
fuwf1Iy7+DmpfN5NNYo6PC3HM35+3eHiV+iI1V6Aq4HRb90xVqo3AH8Ku+zf
D9gYcQv2pWCl9699yFYHlP7VPlD4ugtbPOkiWiW+1MhZVM+jXUpKR2+umEcB
o9SvAEmPKToCbKoftZE7gT00EI0uCCupzZCcFFgFDCkJFXGLsl+gsy3Mr1PJ
k8QhEVcdVzelNBgL/xCa5nynM0oHomGjxV3s3+pyGWdXLsyk5vKXKK1He3sB
VmXZ8MbnEhzJUenN20mUxcYop620I2ST2PuLiDSzc9TlOAWTcgCxOwnNQxQE
Ryl1qkRzbmLbXYwGUk+d9kqeM4KqZlnDePIZl9aMbYyCDCP19DS+19c1oOai
aj5RRHM9vVZEx+b6qtpTzCT8VGcU2VoyFyfe6lxD9o6WHNLHtE6QZ1+wjucg
9iQgtSy5GoSWwtQzoeCxZgxeTXQ2YpneI5hNTDQgRaC0DcXQuYMVH1HviUtL
yd4ySZ7S41eMluUJq8eXfE5efToXgsILr2L4HVBZv/Ec/xEd9LZiAGt//OLd
BlT8l9s89Mdu9y8hS/pzWv1j8K43fv1j/WP4Q9/7xbTV+mv0e+jvS997Gz5r
/zX6PXkL7xl0H/4DiMYn/pWlmyQxCEtJ4nnDDWO95ddvW79+S1+nflzR16x+
05L/xbtVWraz0XPbIWk8RK0iLbn+4bctX+MZ+Essfl17yn5J/q8bvv+F+MC1
D7299uyHcKv2skvIeE9CpuwMA4rlsl7k87Lza51wsX3Vkq3U1/K2sMde3DUF
Vh18AK/n5QWbCBs10Hz6fYsoaQTJLa1K7KJiCwQIxoxk1lZGlpF8KIQwHVeS
bITikoS7d7p/6XBG1XSGVXryoRRMeq5RDFE4nonAQ85FNepGltP8kvRb3OXs
v63Xvlh7Auq+37VhRZ8RVNR4FJ0kT7PKiDRhAAgL0fJF21jvbm9HH0irzaCW
X5JnR/1DT4qvX4GWVkmFzWr0AR6lrMKIoF3T6k6Cl1WexFalAlghVK/R6qv4
i2ta1Saw1Sd0Ik1JAdOqwm7Q8w3NbbkgH2XrCpyEQp+maRlr3EyQ8aTB9ev6
Gq45nXmJTFw71utWoNGqL3MWvSpj1al7RzqGkt+m1X/NWA+1qpqlG2t2yz7i
R93SqjtrdWYpTLvPKCCJUYHexqaoRQRl4KzNBHPrBUA8RuLGqkylVtyAr6fi
XDr0QlWUcI3Bv1758coOvVhmk0sV9kg6JAOx184yRcl33sQel7IIUaiGirCh
QdAJObUqEfsWqV6IKSCZU1wHTgYkQ+ypkmJBkbfEZ8rUOdRHGS3Sq1mob+C1
keDDFEeLfoMo5FwfBJsTABRFwIj0RofLQJT+SRzK8wtpASAUv6VIIHPCGqS3
nWzjWayRx1+Sl8AyG8RUnrQkj59M60RQnrRkjJ9sXBNtU0RB02Y9CIEDSIx4
yDyLaiFFV4ie9LKjtokRi0PzibkxVPobsdxNimOAt2hoWBQbMxeHT165cKiC
1u0z7Q3oS4ipVp0H91T9N1FbFNU2SUF6ocsg5UwZX6eMU8/Q5Po1+qAKBcsJ
9tm0lDB5LYtNmRbvQsl5VIivUkYCwARSFO/o5BYF6njoWb7T0RCNZ2cvnicd
mNkMv0OLDaXtYuqEJwvYQFgo8h6wH4fbQss7Op9rI6aLGA27VrSE1fHQVaSw
NXrpBGBK24gPvgyotaBtxsZBvKGNDxnKSnI6i6mGceixreVl1DVxBTbD7FXj
Bzc4i50pkGIPo2r9uXkAREudIUB/YmLoIRCq0E9Oi5djqXCq/FylVIeAFeOQ
JKhgTXUUGFsauC6Q+8awdaF4EgeihA0foeWSOlBi/YEntaI8nFcq+ftqfKp4
UVo4eEtywDb33X7SZ7rGkvhKc0c0v4aaSELVYBjrVTYoYWDrmpP8DA/dha1P
iqHU2kj07VC5GNFQXdOI31ykYZqyA4Pq3ZjuAwhrGAeuKB58Zho+az4mEJK5
RzeBfLIL2TmueuHD4ObLxZygUsmM1Zc4XxsvVgeSQOPfg73dXcq24CounE0q
iV9qlfLudatoUakkRzkkpJGY8dvYPYyi42hcjNjhxPKkg64beOKQanW5l9B2
h+2mOHBWsgoBZYBWKOgLSwjBqUzPFTJFSpKbOiKYcoz4RIZjDsUxt7B1wdSr
36htEpYNueu6EFyzqYOimGTpjDbzWOQrDZpqQy3sgAyVWbTag74qqlqGYjJx
LbDTEdLv9XG9tSLZrqHwSglVCmaUL2C2GjYlmWwxk8Panr7KkAUTlBy12CYd
Wdu8bx7l01ffXuOUJ2c8edWDuX4/6az1y8ND7OkgN6l1c9z0lszav8e+jpve
InEl9EXU/sae6Cl6x/hErnuLHyP3Cr8XnCLXvYa+EZZo+C3iIupf7sRE9tqG
6NE7oFA+7N7v3tvWgAMhifbVq6urnn1dH41IIEYndKzj/u/y1JrbBc+P00mJ
drVf1W+tzmvQI+KS4GVAJ0prDthAvhi+oIoYoN4Rm6KhN6Hhyg0xRjaXTJQh
4GCiCG6oxWmrTuLlAVXAtCdQJQVOysj6HaLXQCI6owxjQBHpGP/EXF45QiOF
nJbaLfZBo9Sos8IbxplSdvMZbAwVtvcvkq8bRV+ESdVOrmtK4CDam+oJnDhP
W05lSR4mjfW9gS/CpvqPSeOrsxaDM6FNViGGeay8A3GTJ2mlUHt27aNwS9My
CcFoKSQQk0rqk6jPiLl+ffY24QhTYIz+AewvZ+2051hQDyIEIpP6SGOqSUMR
zaAEaHBr0z/bqwtM/fNFdg1PIq7BnCCwphmbQWs8xoOPhpR9YFZbwctkyvSh
zQg7NuFjGFVXl8NsFQCJq8TTxCZSF1Wxa/JbYWt2aizVfvbMjKOMIophgirh
XhSTkWAlmDIHVArSUhVMpchVMzMfUt/2SZ6y8zIATpnnS/breMrJhuDuy8SV
L3UHPHWMu3SO2M468sKCsXFwBtAfeU9qcme+yKsfvyRTk+kaEV3y1KVtqLxb
MRw0JUtz413siw6ltfIj++G7j9xC6Bl+KFfVB6x1QCKbVMU+XphuOgLJ7a+W
U2xFDzW/h6+JmXTabgR0QscXv+fBXsv1+JE7i09Pi6zfaTKeP3DITZk8hxlL
jUZdR49p6qvP+S5v3B0x3+tdWL81bRvTkyQdrF6sCqciTwZsRKMpanS/js4f
07RGcCXy2ChczsefssfeQHH4o98C/Kli61ykR+7ZGeQ9jB3Wp2RRTD02DjzU
dAA7RJvH4EweA6XqUK3MjFKV6PyGGIy0BeBAQZdncBHZOe+Cc95jTAj+g5YH
hpXxwMVU1k1KBP4W4fcLI1Fvei063P8JWnNZLP58V9qgSYvY7S+K3M/rW7xz
9gp05qO9xfi80Mt6wxu7RzsPBoPn9/PTK3njztdcaYTYPCXDXmA5h3Fgz8kA
EQVB9/v6zq36mGWPn/3wfHy1PT0nEtEiRbIpsiFD8vmWqxLJj40asOygs5ye
AjJKp6ISo75J1PI51akuJOZb8/UWjN5VxP7ApQD68jCcj/ZuNz6EMOFG/ffI
aiXlFoygY9TOCAJUbs6WlAtetcTDoDzsmOwgZprHjqOJ9T5fIOb3knZ5WCgH
HJcOpTWiaBxKxOFfKjFToJeQjA4XtXGtUigJZbF1pjZAynWp4HiJxzZkiFjb
hkecDLMIyJOKXCS0izevjnpKWLv37j0SxFNrPdD6uoQmo5glnN+jS0LVvni6
HuiSV5athy7KdDHb4QmpEaiszG1iJ7VnL4HzNNEaw0kIBVpwOVGubcOTRFYU
H4ia1hm3onZQ9HMcxUmZGlyqiE++L8lmQVzqmSvQBlusV2w4L2m4LOJeN16b
GUh2NngPyNNjqlF4zckJFzJCvgqvRmba6NLKZygsOjku0dzMYaGxMDzSlwyF
3/ydRsIpaO1SOg5DMuCI8gnYGN6nCVFGW+mRTpbkuqx6Lr4O9Yjt68FjnKtR
v7bDb5YLVbNYRFlLQy29nFFWtKGajmtYrifNKi5InDCmMbrropOpbIZqOssZ
U67RTeNC5BIdUsieSYVvWaIQ0SO/CSxb1TrxATVk6kdYRFEqFPiX4Fb/hK1g
DT5CFalYBN3Z3wnBeBf53AcZBoJiB6U5TGsGwMo7Oe5VYtzQlDuhhkgYlRMQ
Tcw21zNFSrDxy6WmcJTvVuzsrQvxs3qkQyStC1Jaq8DunI83uE6fYwGYgGMI
4QEax9ZYsiBHrHhU/PrVgzjEZQ+/l5w8bCADatsc9IfU4mbL45oIAf0NqCI2
7PN8OfEwdTXa4bO4QycuipC9zr/jKzZZXB5F4iEEHo8nGyWXRsLHrTRRkQDw
07vbO/e72/e62ztnO7v724/2tx/2Hj36EZ5zUbJOEIt/ruXotOTkoHqquUjX
PF6zoHYoYefv3LPnGDLIBzBCHOT29j7986NYooWaR0/tRU/hY/HhuIWET4br
O6/7s/ztrPxxmJc3Svj8xmL32U/PPy1OF/PjTpiMnr2bdXCrVNzxr3Er5lxc
2xA+d+f9u4PR+Nnbpz/cfVHX5/sgDFgRZywohrg93oYU5xGjgimI/uiQGiKM
GHuUHBdCLym6n3a2l/TrD7HbieRFdObwXWMYYqDK2SIvP5hi1Gxm1gh+eY5y
xUtMXA0PbnT+9nWvs1l7oTYu5dwCd6aE/nTJek5/QsYnuGrohkuOPoKCSvXc
ByunKK572wR+V6d7vjRlDKPEulHbChh5NCQO21LAuhgcU+lnrPMEjWycf5QZ
1NIMYpSdZabETYYYP1yvQeyUKsGdlHH7jO02q6h4w7OJgNsovmntmolKYmgI
Sx+CjTSdLjmsleLCqQR5o+wBlTfmSBV2akpRACzAyVUzWZ5hPaUSuGMndqVe
YqvLFQNqueSEB2xShb81rfrKcU6MNUbjyWKFRzMcGiug0lZ4w+Osjyd4AJGV
xW85L88c9AkNo+T6Xmodo/pcw1yRWIkpbGHlhxkKjxRtW2vwii03kzHwMeYf
WbqY5JqRXJK3edYSAQJq/KxMNeUnBmpHQRVHKI5oj4CgViyG3/Gd+qoeeqXd
2q5Cxb7aWvlqi+bcz0QYcH6FUccJxRnfL03ZgobsQnEVZZxo7dbvorcCipUE
w2gIACqjDBVBAw/FoUwUtsU14YOOaKoLPO5w2ilZhmucekuFZqA3BV6ULgM0
H8c4+ELs0nsQgBuCH5JFrY6R+ooVkp0eNRJVswiHQxq1OYbss2kLF5IW5Vaf
wzbroNSrFI0tnJOmnz646fVCSjWjzAs6BprABFr60AhEyq0ulFQoMgJvDZUj
lCJt5GyNxtV0uUZft5nNtDBD7dEY5ccRiEgIlohNBC2AuDYgv36enbfC66ny
Pl8u+LYlEPGlNZcIeaoFfxFEowsGqGBpQvVC3aQas5nH0dZEcer5Yg7LWqDG
G2RnM1lJZ7Q1ltPWpfY+7pyCggJ4uj2PQb2o6ePWpKJ01lPWsFWK7iIb86VW
Hr4YVHeeFqoVXOTLTTKf7Xu3C3kLk6P3xqs22XDMiy7hDZDGR/8/2QBZ5wts
iHRaGuC3GiKpNmdsiIxtjzEFQr0vXIf1xseyYYCJab0U0ghN1Y0dCMMsXJaq
xZhiXpdZcu2N4zxGmoW7ttfEw1frVR559KHPej2A+JGEm+YTb3EQIKBgd/A0
lRY7wIRHTDVORdUOseCPB3/lMA7pmSwBsloECE6LUpp3JQjZ10CS9/1ZI1Oq
f9PsjDOocYS28yFrIasqLXr9YE3ogjmEbWWAUQpnRhJLBpoPlZYujUwbDZUu
QmKKcXS0ppEpscBQn21KjRwEDsuuHQNnY3YHREeT5F1LIxpA23SyB3AEDSEm
yJwmoVU9T938Cpnlk4xT0qhWCVUdxKvvrHK6UZFPkpRggXuyX+ssYmpC1mH8
nekTzJZhjrhwF+vSRmsn2kIwlTaa2bUVL2ETKlZDttUcHoZqDqqVxmhzXMSM
yt3VFUKhHIPsPDfIHhTG2j3AWqMVMYIjLSfByqbrfJz9rfu3bqeBF0+D2HsE
g6C94xBVqspDs+m177PbYNL5t687KoSM80VZcULzZoSnZYuRtAlbmI8ydg2R
XqgGnO/LbNUme2GnKGXqwKL74WpXIbombeffRLN6LbqmftWV6saNXqNj3waZ
w18aE+dnuAUhORiDSGjlX2grNIGXDTCfprGwWJCj+lcxcvmxB4OjJNpSGcxr
DV/47p354u0/Hj9cHa36ux5AyA8E34Xxhy/a5sxvIL4hfn74dHWSvZ8egDb2
8HL35fjw6eG343540LNEWaLd7s5dWqK7+9v39+/v9XYe/Mi5xMa86U+Exns2
vfQBCKahegTOeq3aUYylCLznkqnzrvxYMkhjMFDS0hXZ+oowqt/MJvkHsRYR
rVdZSHRnwn7cEveH4oyr9c7XHvDivZMQgtpMxARkLTLNh7A8OQhLTvKSTIi/
lIYYZOQvKn15Vq4+NYm0C1dvthSff8KRjRO9To322btQ41a3qJ8hQJMsknNQ
cynBVByAwbMj5nZeEMXmIAlcR4oFIV8OiBbDCwzzLy5ZF3DAzwifUovRNnTh
EFFhggGZaVGTzj5QamYJ1R/E2PjmQqHLSEQNFX+9W55a5KGsHJl1Iv3Vhi/I
hEL5Gi2IJqU2pKp92CmxM4RcwG5VxEhF3n0m8hsxPJCGWP4T7mrExutch5GA
1zNGJVMeozmdRkBtkD2dlVfNufbGM0YZ9bPkcnvxBHvuOVzEqxzr3NQKyBG5
11J4gv4ohi9ZaVbDepgSZo41ikve9VUX3qfFZVb6zWMqSYpn9icp6MwXXuFY
r39fFUluYQ0yiRylCGAhhlvAbEcCia59qn6x6OMAGmFc7v8R4ELkXQGa+EVE
qkSqdC7WPeYXv6JS6Bx4WH/2jxEwSdtM3GnwOtIrT0gtcmZ/6OPwt7PIKOY3
V8MnMf29bfn8rWuBjFeFrhW34pTO0Jm/0nzgGowK4Sv6bQLb7egGnE1WsFxN
9a2hIzfNxzIooRqqn4dL2fYiIS6JdaL1lPOIrL2Sr3NpdUnLpFS1LdFS5tqu
iASANAdDkR7QnpNFWTvq5nTrHn+s+zpc00ctXEAWKOfAWxb43Ia37GxuUT5v
MPvEcdzJRs0kxEEdISUCMdlmLZEdRKu4pEzkQYOuvXXxRugitZq0ZXP/se2F
pP2SmJsZzjPuIgoLN7wgPwYW/1YvHBkk/V9st/ZaxsSi9dpfM6R2enDdC62E
Yu0LrVUnGh/djBJ17ZD+J73wx9rhufEs1Zu8sYfbvyAcSJ9grwf9eRZwdOwL
fGHoiXAZ+X2vwbUN6e31f9ZeiCpAWYJAP0IvPod1tLpYkH28Ml62W7KNV3Fg
UD0ELmYekRePY+1bSGLwKbYSXA7ItfKuPGxFHtci73pv9fpid9KHRDe5EEIS
6iSwg5jlWzbtSiC1ijlq7XCxDcrzhQi6T6tVb5n1yWYVJyTUmCmzRM/NKK4R
jbtsHBWTKj5K5lRSGRvr0uBXdgGJKcerGD+NkmdeJepJwEGwTZZWMd55mUXK
wWfyvkEW1KltGF+G50Ds7bIMrs6T2jkQ04sW8vuLfNEXv/+n+hc6nNobLYQZ
v2AncCvju6ZzEZ6bX/goufoXei5vMyojZX/WqA4i5BL6iHmkyOC/aACcebVG
QoRjrxvbW9fCnr5E5o1SKEjejbKh2klWLG7B+gwxHFlTalyqUKqRh2MooFuh
LAxTDxut2JIyH6RW49xcL8PhErcKYyQWRvc2hnC9To3zP7y8zc/XMe7wqeXC
f4zPkmGK0Y/yTk3K7TWeUGbpe2kTevS4NPlcrZ3PY3hxAjeenGBVKAMYfim2
ntJHEqM/P3IsqJXHSaAWG8W4qkAwflykl3mhrr5QYEUfoGATThZOytVseLEo
ZhzvwcjumbjArkI4RYvdwytKfdsujAjNKGWyJmw7nxKwbZVNVq6lt0acD/Wq
JNofPIQ4f8rQzzAtxhh1kmwQQBsI9KzGW/WAa5RBPaqdAx7dGE77RUu5SPSx
Lis/sLiEtikETkEcBBQ7TEvghyaPmBeZ+jkvKixokUrjFG9tYnPCrX5WXGU0
bBNpNCVwsNJXqdG4Fqz5x5CP1OpWwmU3cTnRWESOl7AoNj0KXbuNpOChYkNh
PmG28L7MM+2Jl0r6suJNNqPyaQQ/WNsFD7elYR1q1vVguyF6iDLQJPA5imFM
11e4d5EHx4wwMVmYtAW2LjAmLG68+nZTMCptSCLJJosABGgC3FXiIhLOs9mS
GEyBi0fDwcoNCuDZG2wEIH3fQO20TmVTXUR2jHDG7m7vJhsvi0QSK2uiCS13
DSwk0ZxM9wyO5H5inCiuka9pR7KfFE8uZ5Mnr3euji9OJj+c3n1/ln4/6LuD
dHiRdQ8YNHQf1rZbVggX9IXZnNYN8npRfFzBtUFz97lUHZBC0x5UrHF+yIhB
Vk+n0HoUycMSD50s9ITN5KU58WisxTTJUvW+drSubMeXxzIxbLWjFy1AS2qt
kAdelo6AWONYcls5Wz2Tjfls1cI6qKC9M4sSnTeuG65sJpS4SG6ocSFE1xJC
WkeVPpxP9w5Vk2Q5CPksW5AvnFjYtBh5z7sX4GPpJTdZDRqsC0KU75o+Kq/H
q41heVoovPNUw8hHHjU+oVsY541znEBZLQe19HZLRWiOoLGJe4ijihQZhcPs
9m+N9XGKZxHDR2kWZZuEJWHldKAiF3yjZsZnwmP83n1jaMYJUbsj5RqfCxbl
t1jAXeqAUbXYcJDP9IRGJyVnE7JHudNgWeJmNQStNKT/QnOToviQLOdW3kaF
20al6udYx5ky2BJYjzFjVpClU5ZmuZh0z+GewydYu4Ej/T4L5eN33aCINdBt
aSBCXcccrsndL8rsjwa9CtFQuVrTPq3bg11YiQ2JCEgn5+gnPzq9e/+BhgS8
v/qAIQO9Xk9yhkSYgucenO4d//Tq6Q8Ps+d3J+XT4uzHH/Lxub54U0CABbvC
EINNimiYpyvEmm0b3Q1QGi0gHreE8bgByAPz9P34Sq2vjXM7+fH1q9kPxety
5/XF+/LTE1ik7uziwfc7P1Wvnrx+fH/n0XE9v6fBqc5nKAyjbUYigUI9cBFe
I0QM8g9odLLqs3Q7I52RcFGuMjRjlCHBWJsQEE9/BZ1H8qOkDLys8iTFwNfz
MMdLXADxpEaRXFqHzcnrNEXPxqLwbklMrMM6KvxMbZ0chh2FTANclQY98y51
jgNczvysRmbtkPVw7B3d24iR9NrQ+zREnSBKMtXe1IXrtEC6RMRzfpJGmZpZ
iDDb4twONWaD80dPsuLmgcjGphEC7PPITJE1oKdGBelRuyqjLnx0mx85dcgX
oCM4T6ZUqQ/6CpjF/mEB9CUTYG3EUpxEACL+ecEb8E+JTXuw/WDv119xp6ac
kkxlFjP3z3Q0WnTxTP1Tl+KfVfFPLvE+4xBFyhrSOsgz2j6yIIZhyVCcT1f1
rGaaZZVo8HAkMZ8rbcln4UiLKgmVuwNOq0eoEEtSo0TwsmRtwtlavbyqIbAw
4MFElVSBaDaKEXc4y8ulco/mNruV3+Yg/7QKBcCiM2Wcdxooy1CKc8rwqh+b
G6cWzp+TOscDrhmmDiciZGvkgjUz9yZknXVjxRH4LBNtgQxwVofFBCzkByRb
EtIXY+2G0HRfIiZnRZkzoLiYj+6KLRREk2ZUHUrK4FY9oM6QKscogEYdwxAF
0Ci8xwLnegSDGvL3lqsFx8h60Wlsg92Uo00HW2EAXTuXlJ4jpM9mOWK85emy
KhDJZUjQv7Sozi/qgBAtUqCd8PIJFQzeYmru7w5vDUnhWGKaS5OL8RTRQgI0
m7Yak0mvXBiTKpI8VM/4KM+XA5BuSMDzOSwUWUvz/+bdabKR97Ke1JhF8UVz
IY3hx6vueHKWeFIr3nrmbX6RnVdlW5GktHBphF3mY7ngqmDxgw0uzTDadKpQ
bgVR2sqx9EZrYQ0BPbDPCpyPotZ+QOM1y+VyvnCWZmokkKJehDC55hRJSLZX
AX14E33ftS1QaIAsQDyWUBqLNjmyuJgKZVo4vJhFK1YDcaOEnLVYVTtS6WJ0
E2BVbB853Ct3D+9On5d7b2fd8+Ld8vV32bf9L0a1kk3aT9annA+H1Z3s8tX4
24uXbx5sX527dXG8/zL4uVviyzVGKqBcLVBzWLdiJNYyo7MnT1GTgsP7bbZq
ckqy7ZTt6IcoTnugU7rToeh1HlTDizSiCIyvk0Wl50LxrqABkjl31uC6wU7J
ZdxaTItsNxGJR9kBBT0ZkEW5aGtubM2MkRvzqIkItjRAPd4le0/ZJx4ZXBOP
4ZJ7s/OfSNqNBFy/vArpLiHtrGyM1urYgmfhano0sndkMk0N11IBtuMVl+I8
N18xL0+DXV05+TgXjqcShrVpW/LvBTiqAWAMXszGvS/vOstCQ9AD1glEa7By
13siYvOUHlWkroxYKBqrnFF3jWISsd9k4+e2R1mfRWuEXTK20XN2qB+fBETr
UvhZ29ka2a9V/Fp/E3bxJjxOR1qYSWJ3SVa7pk6xjOYQBvOyqGhanV6Mj/yG
MEc9nWicCsYk5TNukeVq2mceXBe4bb6YOM1ES13Z92NISGNrbNfHHbcRQiIi
PXxrjT1Ctlq4qIQudotxl57GX0QIpSg7ajcOCN+Qoh2p3E/W8oLJyKIZa6Re
Q8E3un0S6/bmQLAKwCSI59pUUGoHJA0E0p4VEVzX69XOxZjGZpODAtyy15S3
EMSEcFwcF9rAA1Cz8cox2F9nUWtwu/8muxoKbJ/FlTt181v68f7JrLo4/Gn+
jx/Gu/949uPsyfNp/7bmt2b7tzLCXW9iUyzG39PIdnH4/afL4fu9swfjwZPB
dNbr9RaHn77/9Ony0/xk9WD35XbRJqlICgcy3zPFfpar6lzfypuSHJNa14pX
BSlkqQknfdD/qvSY0l6vJJ9HpdUNrqcQOft5a7y/KpxoZ3U5ipIfaE4jerEO
aC0hK34WkiejStyooV5i6dwZ+rjFraZxaYHB4GwRzDP7iOcexTGjvDnhjTyQ
wFw/m83ccxtAHAb5aJTNApNJrmMyqFlyHUEPzS8yjVvngl6DrBtXu+3UiTSh
5NBMEaq9lHIu5gERb85YAI1R/zy+jz81vBjBUW0LZ2iZJB8yYtB904C8Zh33
nPzMKgqWKVpOGXqe08ryMsdTINF9Y6nEhClWqoNRmTRrObnIvEpe07tgmxK/
SzXV6mxvZzD6cVH8ePf47N0pSIbzs2n/6l8FGGxqQDzobitScGPjriHdslFM
vfWx53CzlqCnAv1Xkq5piZ93EImAcck6fPmsfk3JUiMXmR/2O38tudard+c/
Kfnxz+/2ji/uvS6vDrt7nvwx5TtSYBYVuMSPFTsfCJWarTWa3Kpe7huKuJDM
7dQpCHSsVsWddX9VMsRkpqYaX90i4IfE9V9cQwHIJfKGYe/LFahF0wCVQjBH
w2VZFVNMNE+rFHkWB75kM4KwiroR/PotIeOJlOgTkm1d5z7WyOqB1gcvmfgv
+gekJjEyAf5mUWDYaMqu9wz3PS+nCVBVtMNSrSJokM078GYDhGzA64SJ4OKY
5me1T1FlrCMFrrzn2l1NX0fJaouRDz7mU4whHUpaeT5B/GoFvfTLTM2hL4NG
T2vO0OhmAdR0Z9ek4rpF0/mSQwRkuUlfqtVibyAIScWDr6AjLYVQmOpoRiUV
wV1VL1WwsZO8bH3DcdppsBxQ5MY3776lpdH2VIhrRorxdqj/wAV5U/0IHuKJ
pD2bS27KvsO2ddlbDQ8V8ObFVN8iA555S6uuVXwybAZw3Wd20NdGJM7NNCPp
+nJb9TkUDmvp7qKcVhqCwyRBzItwXqFfWAZBUgsCWpzGSlqxoL/40eNZ5dbk
XASO6O9Oc0qeB/1/0Bt+5+vIPvL1nbpo/u2D7cfvXi9efPf00enhx8eHp//4
WHlY+d/fM26EchWypdG/pjCm1bRYlj2N0dciR9e60/mRNXxgP2T9X7eAdhGf
mUU06g8sZO1sk70dyLKu6ZcsGP7wovEYWxYOOi4VG3MmXgJWNr++E960egi8
gYeVybke2zBajyHQpsLcP3uX/3T8w3fj48Nx//l3l6DCfHx0cHd6vvfN09cf
J/cHx7uGh4PcL5aeRgW2NjeQL8+4vvqaipSRjG65mg3oMdG87VWwvHfLfYZ3
K4S806TUJtwSHO/VjhvLydUteg5DgFehkFzsWl03HSA07y6ymS73ddZqG606
czcNDo0wCAVJ2fwc+QDjIUNq5LISFhmtkLfehOciySVsYy0w4oZRBQNxu6Um
2WCIc3LzFM70vk5+okFUiqdkq5Blcwy12+klb7UV0V8iyPdQ54XiVbrIjoEP
IK+523wVGUzg0vwuMuXSmIuUI7t7veSE8u0ltFRvbWzDFqZXo0N6CQJbdrvN
4WCLRXC30XLlVGSaBcq00k7d/ebbkfjCLdQ8A0SjSLYsCeVJpGgkNmZrPHdu
ej5jkAl9bpMN8j4dD8MhEKwRkSfLgHGOgnVbrGdcI3KarnxcgRrMg/G+Vsyu
Veyr74czm1VzN6qZROkIu19jXf+mm2lCVRuCjl4SZ7womlC3aqwWJjTFi0GB
NeKzrzkPAs56ZA3Hcs8neGtQ5fj5D2rmxZqJC/i4i5//aqJvbRE4A75rvOIc
3VVeU0gwmAWM00ayGviCTOGSTfOSSp3Cr2RyzoC2TvMqP1f5PQcNYsgQZhju
giXpEA81boE1MTNSPs7rhtaWmuBqHhlfazlE/Sq3JX82lZKmAz/hgCnYBQfd
lmrv16dV2sQTy6O+lJTKyLOl5m1sDr2K1IDU+g3WslpbrMt4AFP1i3nPVSi8
za3KC+uGKE85P8TgAOTyPhgGqC8xSl4Ak7ENqI6Fe6BhGHjW9QiGY3rm89ui
3rSyvNknTlbhouRLih1yoay5hwUie6sq2rEDT901MhNnpGtgIT40YS2SpkXo
94yKFD4Od/dYQ4Jd5DXGWAfC/QHhEkYrxYbrsZitrt4m5H/WJtZwRJx4Ks1A
MTZ7MkIyYOYHiqmfHCqpni9ExQ1kT0UNtxo46P3pvFxO/PY39kMkxnw2yxYd
ZApbkTOe3TlaJcSSdOqQTDvmZQRxLqYaoSN8zduTiPHwc0qcqos4xp/is8zZ
i9hapHuDWLSYEiQzLRaDnIvzmLR+YoSMc3FTFAtN4HZdbDnPNoKQA2dLYKBL
r//X2hRkfmbHcmw8XuaWJWI1Ml6MXRJRlHmaL3rXdOI5Gqv39b4auvyatkzd
+ChrzjdE24NbGEDByTthiDARtzYyjBMp0e3u8bhN1dTLmnzEpMpDIFdXBb9O
DUdWa0VOikgnRy/P+ARzdg51xgvtq3ZLZWv7HkyIXMpwoEtMk+cwaL4dAwwn
gFlPGGk0iCj2NmRwLIRlugj+rcYshElo9SPZ6PU8A7N4mu8pGZBxmNsW+ubE
RilKX7e3RbwgkPreOh9qKOj8b+s8PX30ffpq+PH1/RfD+exs+O718cUPy8e3
tdCYita3MtBcbyZpm6K1Nem5CDaRzxxgMIdcM0gcxy1qlK9bWow1IzbGY1ap
Ri0j2n9kF/k+23v8aPfk8N52/9P7u1na6/X2Hk9/PD6phqffvj4d7Z2/6fwO
JhWxq7yaiXqPxDbwQ19J1oiWbCCRtLkWvRYF6Dr0e7WaY9QsK4IeDkw0YIss
FwUZccVScjOkBtqPBe72AElcSMoiEvLUJUKMEdmY6AVK84EA769XM9vUbW8B
qDwxw57gG0TVuNdoNlbFY4N5YCkUFWWV0R7q0bWmwuMNDVoUc3aWR83cv2mi
odXGdOvSEE50I20EBcC8HzR6Ye5qIK+j7pDPeQ7LjEP5cs89bDamVy7W1BvS
ms+kqIK0i4O2Au80rTjt1GoV1iJgXAyStQEtBKNAz+01xyd3+obhsUCHzalV
1Q5MwzrtZzAAugAEdvso6ncWqqmQL7CUQDvbXG7sI2lpz4mMo13eahyN3rWW
kGYOg48Ju1gTConVkgmJYGh3wg7di5FI1o28hydHDRocIeFq2e6v4K0FY0ua
IXk8ztjuWY/PSl0jQKGmktF73goZQPHq/lhKR4kEU9GSmssl7sllmdWCPh4l
GyAejGHuHFjomrG2ye1jbS1OB3G9upapJ9CYQEzOA4voGkPn1Kwxi7S0GkhH
nVlwtSif3aUgmaGEz/raPbb6jkhVaFKx6lZkMTo0EYA2LTudWXgxM1U4kvNC
9lDFWI2/a8REaraRrdaK44lglkzuiLVHjUR+9JCxeinkygarEGXpjVBnhL/Q
zYwaej+Cc/HWwXRmYC0UyjOGxxJoLVxmSs3xGfclB/dIJZkLw1E1fkCqfjfQ
+muZZsYxQPwbnrdFFFHhoRStxvjXJ321BUU5uR87ycabWSh3ctu4KPNKZ630
/r9OBOSsWn7z7t1pPtx99/bl6U/Zm2l5cX7rBOQvjIAMCRz2RqwRU7N08ent
89G96f0Xux+/+XQCYurg7dlPs4cn23v9b1+9Hd/74aYM4bpWbNAQgkpaI3Ya
6qvatQ31tQHEQfjNCad8gqLXNZG+PoZQNUmLBW7H4ON+GfjPWJ4joKt2Osqj
9dXsfS6WKf8zWEXsAVRYmvVZg/UMkTBMiLp7BCaO+KFCpL5FFy8iNxiohCU3
Uscs4CkhCeQqVSD4L+Bucjkyoe6gKljroI3YNzuh8D8Ey0SmJawLFRGvMF2k
Vpq0gP7+GnH7ymf8lqYGhWF4jI3lourpgt4my9BKyDjClCg8h18zkItfT1B+
Rnm5WM59NQfNlfbSfBkBG+IiosXO56GHHOOrdMXOicDQ2gYliCpAlsgaT4jH
ZquOhTNEBlIDytjKRTQQ9iYEE4975Ez9FgF6aYKYUAOkiBhdiwXbb05fvfTK
C6bi1QBM4qp2FkeiVoWlYU7kdAAngF+Shl+fOJvgef/3/yV12RspHgypGWDL
YN++uFT7/18z/fetmb4eiIT36t9VWLj//Tc7z+9Njj68ePqwOnkw729vDye3
Tpfw87+dkNBWm/kzqjNzQoSfwfpqy7v729t/pP+G+a4tumweXiOuPHvw4/fV
0/dnP67ezF5n32KuxdVRf/fsw+Tx6OJetnt/9/wmcaUu5TIWLLBhjGZRRHYr
x6Sm0jsnKdjQFiJLcaUmFlCC5FF5sFjCHgn3hER4C5xngqkyS8wHmfcThrpQ
GFN1hXVmcw21d1H0qscBVXx6RX5IKHp1vqAoZ14EIluUyBgwHBoZHqg4hXQM
nngV3fv4Uld11d9F2eZev7g2FVWKuVkOI9FEqL4G4v1V7G6mepz1evWe0FNh
eK3UEXJWI4lD67YL47lFvnecdfDih/7y8tU8LY7z1dVZ9in/9OH+5ZdnHdyc
0N0oAd5I6A61GRulmdoqpLvfvZL6b64I//fftSL771RgvYXg1M5ra6nvyO+m
4SzsfmbdSIMXmCaVkUgXe5fDCTaA7YjmGSxeqmnpqTY32cM2B1luOQ+6Fwc9
6G13rbedcUrrsuBW8xompi7x9QWTWfQU3Q6d+R6z3S5cvYSt9fnWxbt1tz4q
CxomammBpMuaMk31ihSNQh9UxIOCoKRHFxFlb1u7eevqGiORc2YbUQleHzEV
4M5x6zCThsF0zVNBERA7mfMcberrGcNSTOeiiA4w4pX6REgm2eVxrUB7sWju
pq/z7iM75TbYk6KKuFm/QTbBwMhS0R5DMfC198CyQsq8bVeL4hX4qgwXgFKu
z1QZIoZEAXMGrvP0BOEZy8WaYJ8+PsFlDH3IRPDEqJPBHi3N+9BbxdLu3Ud7
D1DaxcFgi7mAqMkiNhNoUI01kTeHRydSrRYO5gZan/fdY6ljbgKLlgge6hvb
irEMdNZsyubVRfOIxJRUjD3z+uhFb3OdVL6eav7biukvTp/cfX93ll69e/b6
48cPR/d+/Kb69rvbiunXsZFbZVKUxGNfHB8/fn128Phj//hx//DxkxffgST8
5PRB+u3ox+xpuSqLg2L32aPXNKw2QXr5avFmfHz84f7JCl+dXT2421/tDCcP
+o/b+Jk/1JmVo4LMJRLeIjvHOn0e693EssX01Kr0Iv5hF02UK4l2QzeaGBz8
TYkMAeJj0+J79YK1SJ3N0z7mHiUOyXdlcPQsJ2ldldRiOi1mL7F3dF8jg4kh
XxE6bclcnipkFguJW/NQeyfKRCsgEoNllYULfv/XX5WbKm4ZNdWfVNSlb4Mw
FDCoCO/yGRmp7NypShwN31HnK0Oje5tJcmohEBWWi9RrNAxFNc0Jn434JKs8
K4EYayrtHGMKIngIH8RKyHZcQ1Y1YFyEzmuosCcCXrQn3islh/NYO8OOD/qN
dPA2xas1cJ5tObhVcMRiNxnFxGlSA5w/co4zTr2ZBxO88KQxFROIS7D6Kn23
b+tx9pYP6Cju1d8hv+HGNMUzJ2gZM3emzITKTBZgBodndrM2zTsWPyUlBRkC
LzV5dhC7GsbUMcrgIIBoormzVF0Kh36VlhJNnnnEAE0u9jhDbP0JSOZss7YF
/1ws4UwyDReMiwbYkjmULEoAJFZWNqY7QQmVgxaBr+C5hKUZyZH43MMZnUwZ
oXJMlmhrtX1adqnNIkFJ7BZrgDpy4u5o7KsnYjQEYPEn1KsGEkc5+BUDg5Kb
3boFr5WM8NNiQHYG3Fd1qZiCO65NAGUxWon4FbsFRCBvjAtlTYqFJVC1TUVi
unY7WgpOWgneL+fd7W1HDiLddI3ijiRPiWe/1UTctRMhauJlb7aJNgwKeEws
6zsImSm5OHvVwA9MOx3APSTnM7WtKtC+dSR5eU0k5obe05CeXRKJzTgKiW7J
Grq1aGNI2eBZqg3Knp6FVB9wvowej5HPfjRCCoU1NC3SXSm4AaHcoSE/SkkQ
AL5+leYVQ6PTMeDq08DT9Jbbz2VeHBn6dVRkpLkbeSmit27FadAY6tfDl9xC
FwDWUCNkbqVLmMO16jKVi+LuvaygqIo5hkwDg+bh2XNiQFTE0VXntx7wjaMR
6EoKrBkPrGOeridWLThz47C4mpETp9b4WuNWSyGHg6fjvZ1v3j0uf9r7bnV8
/vogf/Tdo+//W+1a1xQc37nbvUfWqp2H+9vbve3tLlYe315j3bru+aaV66bW
f7O169rHr66ueg2j/O9rH7v5jcXus5+ef1qcLubHnd/PoCaQk+Y4X1u4HZ67
M+1X9z4+fpoWg6s2sKXXiyy22FgznfpTa8GVFI+/nHqCt64mrdOcGfEFZ1gO
pJZykzYd9EjEqBYEu6AdSfEIuqPBSgIOYlC+hRnHI5GwsXDYnMmH27JIHl4n
+8g5cUGsU9dyo9KTylUXEp51mS+qJRU3Z7+51GEvJhMuC4LtoiJUSlUhnQuP
PK6qqKYvgpavtWsLoJFQPpusQrGGiKmCZOPSWgPIzhewZst5j2VkXGiRvjiN
ejnTojoWUYUHLRkxarebrHxG6Jaz+CO+SqJOi7W4IIqyihJFMTR2y1tOseJM
kA9hjCJZeJpPFN+OlsWatmPp2hShMqt7RDii06dmTxnTjyEpGSmb9UmNEgya
VAyGL0IbjDl40Fk0n9fvnRY/x3n4osEF6lcYhY15kNHjnSCMihQa8vZhDBji
biMJGOkHKVNHXU42806/DNZPSiL0XP76e9ValKpmX3St3agyrWO1cBIeTTYm
T146Cc5CG/lgrY8m3qEWSIDb4Gu+iSSiWfUtx8aJlTv6LgRvbP43RECs9/Vz
9ct/VyPi8rv56fvJyWD38ru3B+/f/tBfrd68+7zKJHTKP9PXb5FRIrlCP2wI
I7NMEEvWQYfMlqeHx6eDd0/3pi/Ojx4+6/V6363evnn+YG/1aXzvx/Rq3sBp
DrHQA2+RzmrYBmkL6QiBhS6YBuPjjpoV20bWVHpXKPtm6xIBYKHA1LBjAnjH
ETm3hZ1AuxsN0fo5KqbIpYkN9nw1QVPWtDmqthQfBQFGz8E0n/nqJI6t8A1L
WIPNxIu6Pj7cCaMZ1nJezH6UIi/4ehF4eEzoHvNNlF4ct8IyQHqOKSGopQ0m
6fADFlHGhj7MQA1JLuCdrgDCB0E5uNFkcO1mv+b8tqIKGVGIh2sDdbSGlq1k
nY0lZCCI9w7NX753tnzdHCpBey+FHAbLnOrW+GjPVkrsk+/z2XxZreW8YnEI
97u+c2vew7cU1Vdzy4N/dTmboGRjpoNqKQiSiF844Mx9j4RLRgr1DXq3QDwp
CR2HTodaph4NC+jSmrDpMDJNwvvzAqi1JuUgzHKQbm1ADwoZQ4P/EZh9Xh+D
zV6hsgeuGYhiqh5E74YyMmsS7BWEkwIl2zbU++2K0So20JFljrP3SrXfkvEn
aCMUArfe9Wx9zC2Dl/YU1kNNAEqITDQqCUMjayIQU0QU1mOFoHyKeEZWFmo3
LEa+n4BIKrU6xFHpVZTYSBMhY2bTrvkaM0hhcdQ5n87SrgK9sITLQos5MOgL
1xheqvktBX5imFW7tyW0fPLk4P6jPSwIRLknAY41nZBeUGGxkqMUhDgy8/KZ
EFqUfUQ1kiMV5GlMnDSzcDwLUlmYkVj0F1jbLu58tYrjLdqwK6UvN0+rCxLC
MdobC8BWiyXFcQwvsBqlT43B18dZxRVoUD3Q6bBqIJw5Xzii19lygYlWQyk4
hcBRWggBqMO8yqfpZK3IVlfSf6vk1qcQ/P2bT8e/q4zXtGq0iHqdzhcLZA0r
3zV4tK3r+oUGP0cVuB8fPT1+mRwcnZwdPzk+6J8d0afuv45aT7uPpfw7v330
8rD57rXtYpw9gjj8nm1StuNnN2kF4X70ttcWo8AwlBhRXsun02XFBiFLBqKY
IxfUbzUVQWPAGK+h4ewxDyw09kBUQTsGcknSLEvsbQNns00YqNR8FtFZ0uuQ
S0U+PyTJYuqiYdnStGZRgrZ/xCZeYrrrq+eWVukGaavIJXoGzfceAxCBjSup
2ECRP2Xm4lbIGDQrAnPQ4IawACivZEBoydxOdhM4vy3QswppTKtJh4cZH2Vy
sNoSStcAdYtGwmzo4d17O8CGxBYSghsaor3mXJJkryoWVUznEhn/jC74h/wj
3XAtf3f3PgYnIHesPTcsH3ansIL64P2H93dYAjFhAGt4FgYn2LCkUzHVSZU/
srcoA/IrA6fm1euz41cv+897OEunX3AuLZXlIwOdcFm5L83jHnu922SAfzJF
I2K1nHf+WTtOdIJEoEe7EFOUAjUU/C2AxlgAYubQKPLXIxWI51NGP+U54OKc
PWdcIFgZNqbu9nZ7d/FQ8WLv7e4+YIkG5LgQzpL0m4ZtowK0SoMJbBVcOSEX
TS15bNLAHKEyY42sFlOmesKsnkmiiUfrh9WRiHa98Xi1rygTd3YuCIxnNZfl
kG+0SsScYMWgQ1EIhsIOkb8QoSWubSg2MYT0fheNGA3xg1DcOwYFn6L9DG5Z
FOJBBn4ditvgRDlzJ6JlI/GurZlNPIm2M+efkumGFHprCfTdscnVv0Q3MGd2
wPsXJdThOerXrBCWjqv5PY4aqfk17PVel0ruw1siZbRWwomRfv4k8iaVhUwX
BjRcqa4yrcixWgYLd4Tunrl2XaxEZECqGAGko8obyddR7T4Uruj0BteywLHK
YELmtc8WU+3dLhpqSnRQApe1ya2qd7VcRxc2xqT8tWhbvhRQiDnClayHJjvD
86P10fqZLQWmIns2DthRNAO7SsRlIAvBquN15o36/jlNH70J16nhpvzf1ADc
dNf+92kHtI5fqgzcPkFlr7t9D/4529nd3360f68lpcQbt1tM203DdrHgdHrx
NQe7lPfU1w3lOLnu9k4wlt+owmGjd+aLt/94/HB1tOrvhlepRAa+fPh0dZK9
nx5k4+zh5e7L8eHTw2/HfTG5b7UPBKb1BeM4Ob8/eruz+/Ri57vPHUfw7KuR
G14ZpxO4uU1X+0nkdzzwC0vWJaTnmTJlD3ZjhBWy0hEZiSlHJNVq4QsXfKMm
rIgS3rjTwKs8hAk147/XvDeTORdBuGohcspIQxrnI/h9EwFKC0eE9TCAxU3n
7LE7szzLo53+hi5sNcBZgv2s2OpIyQob//z5139ugtC5WPhUwbYMCN80uUc3
tHZiw+q5WS+Mlscl8TA0mOQc2nJfiE5vipmCREZKvbR4Z2HyV19aLa1xx/5t
OcJ3/yjvvXhX/HS2ff9sMfrw4u6Ls8PhrUsyNGnNDa7BNl/eo+Hg/P43r3ae
ju//8Pz9+0/AHE7nH96Mh6PXaf5o+faHH767JrvWQk/FJ8m7U0B8oaco7I4U
2BpqrIsPvjeF+nssAkS9HIcEIjTKJbpQLrFRgTRu0Qc14mXw+b6ooXkpRRrw
Dgb1dPvxxv3LGEsLVeLb8jPTmNQwaVtltWSPQa0W5VdxfqyWNR9LpUXxUhUm
NNSgV7koesRkAtdKUV5aSEA/uhvLduL180hdEaJhM+xb6YiicM1GhaPEs6HJ
VPDxoRRjS0OzWdpmZKwILbJpcckRo5NMoCVCGzaCkqTxq2wgM4k9BRhknOb0
UIhnaznbV1LrgMrfiX1r5MiuwFsWiLcvOYVJVPjEgHLsOI+ipenURCVLjCMC
q/gI461mvoPWccgZ7Tof1eHCDaBMm4/4WGseIFYKBXpT6qX2V9v7CNfecTkM
yWCU2H/SlGT5NPm8ydajkl+we+QSEbEhTp9niw3t6ZVdcIkXZvR5SpVnuuAH
5EyZ8tjBzngz0+LSnKUyqgPoFxxOyJtyiTULt2pb640HpBVRVDvFnHEiZxkp
rxwGnnGhhHkh57iuM4cQfLQI6SnLQ7LiSMx+YdCOc3Ws9QMXLYMermobh6dV
L/ioJm2IQYEkjUw2jW41dHb48tTLEjUtd7PtSnN1p/N8RhPFxuAQ5hO9MGUm
wzIruaZ5henH6AItOe1vR/uxagnVaronXavgs+VrTLSCGFLrilUcqeqaVHCs
dhK9mbTRIVvuIp9k9Zkjyak45wAl23O0aF6TLdJgKj7b16erurWh6ZQoc35O
YW+J7k0O4tECq5pF1pb/Xxv/31QbXxtWD7r4I/hHdPFtGNi9f291vG3OOk6m
kTLzXQz5394527m7v31/f+de7+HdH1u06eNJvhh//Pbb7/vls2r66du7j16/
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
s1qeruh245riKjtUW2XczXb2fwDWI4fXXU4CAA==

-->

</rfc>

