<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc ipr="trust200902" docName="draft-ietf-acme-acme-latest" category="std">

  <front>
    <title abbrev="ACME">Automatic Certificate Management Environment (ACME)</title>

    <author initials="R." surname="Barnes" fullname="Richard Barnes">
      <organization>Cisco</organization>
      <address>
        <email>rlb@ipv.sx</email>
      </address>
    </author>
    <author initials="J." surname="Hoffman-Andrews" fullname="Jacob Hoffman-Andrews">
      <organization>EFF</organization>
      <address>
        <email>jsha@eff.org</email>
      </address>
    </author>
    <author initials="D." surname="McCarney" fullname="Daniel McCarney">
      <organization>Let's Encrypt</organization>
      <address>
        <email>cpu@letsencrypt.org</email>
      </address>
    </author>
    <author initials="J." surname="Kasten" fullname="James Kasten">
      <organization>University of Michigan</organization>
      <address>
        <email>jdkasten@umich.edu</email>
      </address>
    </author>

    <date year="2019" month="February"/>

    
    <workgroup>ACME Working Group</workgroup>
    <keyword>certificate</keyword> <keyword>HTTPS</keyword> <keyword>PKI</keyword> <keyword>X.509</keyword>

    <abstract>


<t>Public Key Infrastructure using X.509 (PKIX) certificates are used for a number of purposes,
the most significant of which is the authentication of domain names.  Thus,
certification authorities (CAs) in the Web PKI are trusted to verify that an applicant
for a certificate legitimately represents the domain name(s) in the certificate.
As of this writing, this verification is done through a collection of ad hoc mechanisms.
This document describes a protocol that a CA and an
applicant can use to automate the process of verification and certificate
issuance.  The protocol also provides facilities for other certificate
management functions, such as certificate revocation.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Certificates <xref target="RFC5280"/> in the Web PKI are most commonly used to authenticate
domain names.  Thus, certification authorities (CAs) in the Web PKI are trusted to
verify that an applicant for a certificate legitimately represents the domain
name(s) in the certificate.</t>

<t>Different types of certificates reflect different kinds of CA verification of
information about the certificate subject.  “Domain Validation” (DV)
certificates are by far the most common type.  The only validation
the CA is required to perform in the DV issuance process is to
verify that the requester has effective control of the domain <xref target="CABFBR"></xref>.  The CA is not
required to attempt to verify the requester’s
real-world identity.  (This is as opposed to “Organization Validation” (OV) and
“Extended Validation” (EV) certificates, where the process is intended to also
verify the real-world identity of the requester.)</t>

<t>Existing Web PKI certificate authorities tend to use a set of ad hoc
protocols for certificate issuance and identity verification.  In the case of DV
certificates, a typical user experience is something like:</t>

<t><list style="symbols">
  <t>Generate a PKCS#10 <xref target="RFC2986"/> Certificate Signing Request (CSR).</t>
  <t>Cut and paste the CSR into a CA’s web page.</t>
  <t>Prove ownership of the domain(s) in the CSR by one of the following methods:
  <list style="symbols">
      <t>Put a CA-provided challenge at a specific place on the web server.</t>
      <t>Put a CA-provided challenge in a DNS record corresponding to the target
domain.</t>
      <t>Receive a CA-provided challenge at (hopefully) an administrator-controlled email
address corresponding to the domain, and then respond to it on the CA’s web
page.</t>
    </list></t>
  <t>Download the issued certificate and install it on the user’s Web Server.</t>
</list></t>

<t>With the exception of the CSR itself and the certificates that are issued, these
are all completely ad hoc procedures and are accomplished by getting the human
user to follow interactive natural-language instructions from the CA rather than
by machine-implemented published protocols.  In many cases, the instructions are
difficult to follow and cause significant frustration and confusion.  Informal usability tests
by the authors indicate that webmasters often need 1-3 hours to obtain and
install a certificate for a domain.  Even in the best case, the lack of
published, standardized mechanisms presents an obstacle to the wide deployment
of HTTPS and other PKIX-dependent systems because it inhibits mechanization of
tasks related to certificate issuance, deployment, and revocation.</t>

<t>This document describes an extensible framework for automating the issuance and
domain validation procedure, thereby allowing servers and infrastructure
software to obtain certificates without user interaction.  Use of this protocol
should radically simplify the deployment of HTTPS and the practicality of PKIX-based
authentication for other protocols based on Transport Layer Security (TLS)
<xref target="RFC5246"/>.</t>

<t>It should be noted that while the focus of this document is on validating
domain names for purposes of issuing certificates in the Web PKI, ACME supports
extensions for uses with other identifiers in other PKI contexts.  For example,
as of this writing, there is ongoing work to use ACME for issuance of Web PKI
certificates attesting to IP addresses <xref target="I-D.ietf-acme-ip"/> and Secure Telephone Identity Revisited (STIR)
certificates attesting to telephone numbers <xref target="I-D.ietf-acme-telephone"/>.</t>

<t>ACME can also be used to automate some aspects of certificate management even
where non-automated processes are still needed.  For example, the external
account binding feature (see <xref target="external-account-binding"/>) can allow an ACME
account to use authorizations that have been granted to an external, non-ACME
account.  This allows ACME to address issuance scenarios that cannot yet be
fully automated, such as the issuance of “Extended Validation” certificates.</t>

</section>
<section anchor="deployment-model-and-operator-experience" title="Deployment Model and Operator Experience">

<t>The guiding use case for ACME is obtaining certificates for websites
(HTTPS <xref target="RFC2818"/>).  In this case, a web server is intended to speak
for one or more domains, and the process of certificate issuance is intended to
verify that this web server actually speaks for the domain(s).</t>

<t>DV certificate validation commonly checks claims about properties related to
control of a domain name – properties that can be observed by the certificate
issuer in an interactive process that can be conducted purely online.  That
means that under typical circumstances, all steps in the request, verification,
and issuance process can be represented and performed by Internet protocols with
no out-of-band human intervention.</t>

<t>Prior to ACME, when deploying an HTTPS server, a server operator typically gets a
prompt to generate a self-signed certificate.  If the operator were instead
deploying an HTTPS server using ACME, the experience would be something like this:</t>

<t><list style="symbols">
  <t>The operator’s ACME client prompts the operator for the intended domain name(s) that the
web server is to stand for.</t>
  <t>The ACME client presents the operator with a list of CAs from which it could
get a certificate.  (This list will change over time based on the capabilities
of CAs and updates to ACME configuration.) The ACME client might prompt the
operator for payment information at this point.</t>
  <t>The operator selects a CA.</t>
  <t>In the background, the ACME client contacts the CA and requests that it
issue a certificate for the intended domain name(s).</t>
  <t>The CA verifies that the client controls the requested domain name(s) by
having the ACME client perform some action(s) that can only be done
with control of the domain name(s).
For example, the CA might require a client requesting example.com
to provision a DNS record under example.com or an HTTP resource
under http://example.com.</t>
  <t>Once the CA is satisfied, it issues the certificate and the ACME client
automatically downloads and installs it, potentially notifying the operator
via email, SMS, etc.</t>
  <t>The ACME client periodically contacts the CA to get updated certificates,
stapled Online Certificate Status Protocol (OCSP) responses, or whatever else would be required to keep the web server functional and its credentials up to date.</t>
</list></t>

<t>In this way, it would be nearly as easy to deploy with a CA-issued certificate
as with a self-signed certificate. Furthermore, the maintenance of that
CA-issued certificate would require minimal manual intervention.  Such close
integration of ACME with HTTPS servers allows the immediate and automated
deployment of certificates as they are issued, sparing the human administrator
from much of the time-consuming work described in the previous section.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described in BCP
14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>

<t>The two main roles in ACME are “client” and “server”.  The ACME client uses the
protocol to request certificate management actions, such as issuance or
revocation.  An ACME client may run on a web server, mail server, or some other
server system that requires valid X.509 certificates.  Or, it may run on a separate
server that does not consume the certificate but is authorized to respond to a
CA-provided challenge.  The ACME server runs at a certification authority
and responds to client requests, performing the requested actions if the client is
authorized.</t>

<t>An ACME client authenticates to the server by means of an “account key pair”.  The client uses the
private key of this key pair to sign all messages sent to the server.  The
server uses the public key to verify the authenticity and integrity of messages
from the client.</t>

</section>
<section anchor="protocol-overview" title="Protocol Overview">

<t>ACME allows a client to request certificate management actions using a set of
JavaScript Object Notation (JSON) messages carried over HTTPS <xref target="RFC8259"/> <xref target="RFC2818"/>.
Issuance using ACME resembles a traditional CA’s issuance process, in which a user creates an account,
requests a certificate, and proves control of the domain(s) in that certificate in
order for the CA to issue the requested certificate.</t>

<t>The first phase of ACME is for the client to request an account with the
ACME server.  The client generates an asymmetric key pair and requests a
new account, optionally providing contact information, agreeing to terms
of service (ToS), and/or associating the account with an existing account
in another system. The creation request is signed with the generated
private key to prove that the client controls it.</t>

<figure title="Account Creation"><artwork><![CDATA[
      Client                                                   Server

      [Contact Information]
      [ToS Agreement]
      [Additional Data]
      Signature                     ------->
                                                          Account URL
                                    <-------           Account Object


                [] Information covered by request signatures
]]></artwork></figure>

<t>Once an account is registered, there are four major steps the client needs to take to
get a certificate:</t>

<t><list style="numbers">
  <t>Submit an order for a certificate to be issued</t>
  <t>Prove control of any identifiers requested in the certificate</t>
  <t>Finalize the order by submitting a CSR</t>
  <t>Await issuance and download the issued certificate</t>
</list></t>

<t>The client’s order for a certificate describes the desired identifiers
plus a few additional fields that
capture semantics that are not supported in the CSR format.  If the server is
willing to consider issuing such a certificate, it responds with a list of
requirements that the client must satisfy before the certificate will be issued.</t>

<t>For example, in most cases, the server will require the client to demonstrate
that it controls the identifiers in the requested certificate.  Because there
are many different ways to validate possession of different types of
identifiers, the server will choose from an extensible set of challenges that
are appropriate for the identifier being claimed.  The client responds with a
set of responses that tell the server which challenges the client has completed.
The server then validates that the client has completed the challenges.</t>

<t>Once the validation process is complete and the server is satisfied that the
client has met its requirements, the client finalizes the order by submitting
a PKCS#10 Certificate Signing Request (CSR). The server will issue the requested
certificate and make it available to the client.</t>

<figure title="Certificate Issuance"><artwork><![CDATA[
      Client                                                   Server

      [Order]
      Signature                     ------->
                                    <-------  Required Authorizations

      [Responses]
      Signature                     ------->

                          <~~~~~~~~Validation~~~~~~~~>

      [CSR]
      Signature                     ------->
                                    <-------          Acknowledgement

                          <~~~~~~Await issuance~~~~~~>

      [POST-as-GET request]
      Signature                     ------->
                                    <-------              Certificate

                [] Information covered by request signatures
]]></artwork></figure>

<t>To revoke a certificate, the client sends a signed revocation request indicating
the certificate to be revoked:</t>

<figure title="Certificate Revocation"><artwork><![CDATA[
      Client                                                 Server

      [Revocation request]
      Signature                    -------->

                                   <--------                 Result

                [] Information covered by request signatures
]]></artwork></figure>

<t>Note that while ACME is defined with enough flexibility to handle different
types of identifiers in principle, the primary use case addressed by this
document is the case where domain names are used as identifiers.  For example,
all of the identifier validation challenges described in
<xref target="identifier-validation-challenges"/> address validation of domain names.
The use of ACME for other identifiers will require further specification in order
to describe how these identifiers are encoded in the protocol and what types of
validation challenges the server might require.</t>

</section>
<section anchor="character-encoding" title="Character Encoding">

<t>All requests and responses sent via HTTP by ACME clients, ACME servers, and
validation servers as well as any inputs for digest computations MUST be encoded
using the UTF-8 character set <xref target="RFC3629"/>. Note that identifiers that appear in
certificates may have their own encoding considerations (e.g., DNS names containing
non-ASCII characters are expressed as A-labels rather than U-labels). Any such
encoding considerations are to be applied prior to the aforementioned UTF-8
encoding.</t>

</section>
<section anchor="message-transport" title="Message Transport">

<t>Communications between an ACME client and an ACME server are done over HTTPS,
using JSON Web Signature (JWS) <xref target="RFC7515"/> to provide some additional security
properties for messages sent from
the client to the server.  HTTPS provides server authentication and
confidentiality.  With some ACME-specific extensions, JWS provides
authentication of the client’s request payloads, anti-replay protection, and
integrity for the HTTPS request URL.</t>

<section anchor="https-requests" title="HTTPS Requests">

<t>Each ACME function is accomplished by the client sending a sequence of HTTPS
requests to the server, carrying JSON messages <xref target="RFC2818"/><xref target="RFC8259"/>.  Use of
HTTPS is REQUIRED. Each subsection of
<xref target="certificate-management"/> below describes the message formats used by the
function and the order in which messages are sent.</t>

<t>In most HTTPS transactions used by ACME, the ACME client is the HTTPS client
and the ACME server is the HTTPS server. The ACME server acts as a
client when validating challenges: an HTTP client when
validating an ‘http-01’ challenge, a DNS client with ‘dns-01’, etc.</t>

<t>ACME servers SHOULD follow the recommendations of <xref target="RFC7525"/> when configuring
their TLS implementations.  ACME servers that support TLS 1.3 MAY allow clients
to send early data (0-RTT).  This is safe because the ACME protocol itself
includes anti-replay protections (see <xref target="replay-protection"/>) in all cases where
they are required.  For this reason, there are no restrictions on what ACME
data can be carried in 0-RTT.</t>

<t>ACME clients MUST send a User-Agent header field, in accordance with
<xref target="RFC7231"/>. This header field SHOULD include the name and version of the
ACME software in addition to the name and version of the underlying
HTTP client software.</t>

<t>ACME clients SHOULD send an Accept-Language header field in accordance with
<xref target="RFC7231"/> to enable localization of error messages.</t>

<t>ACME servers that are intended to be generally accessible need to use
Cross-Origin Resource Sharing (CORS) in order to be accessible from
browser-based clients <xref target="W3C.REC-cors-20140116"/>.  Such servers SHOULD set the
Access-Control-Allow-Origin header field to the value “*”.</t>

<t>Binary fields in the JSON objects used by ACME are encoded using base64url
encoding described in Section 5 of <xref target="RFC4648"/> according to the profile specified
in JSON Web Signature in Section 2 of <xref target="RFC7515"/>. This encoding uses a URL safe
character set. Trailing ‘=’ characters MUST be stripped. Encoded
values that include trailing ‘=’ characters MUST be rejected as
improperly encoded.</t>

</section>
<section anchor="request-authentication" title="Request Authentication">

<t>All ACME requests with a non-empty body MUST encapsulate their payload
in a JSON Web Signature (JWS) <xref target="RFC7515"/> object, signed using the account’s
private key unless otherwise specified.  The server MUST verify the JWS before
processing the request. Encapsulating request bodies in JWS provides
authentication of requests.</t>

<t>A JWS object sent as the body of an ACME request MUST meet the following additional criteria:</t>

<t><list style="symbols">
  <t>The JWS MUST be in the  Flattened JSON Serialization <xref target="RFC7515"/></t>
  <t>The JWS MUST NOT have multiple signatures</t>
  <t>The JWS Unencoded Payload Option <xref target="RFC7797"/> MUST NOT be used</t>
  <t>The JWS Unprotected Header <xref target="RFC7515"/> MUST NOT be used</t>
  <t>The JWS Payload MUST NOT be detached</t>
  <t>The JWS Protected Header MUST include the following fields:
  <list style="symbols">
      <t>“alg” (Algorithm)
      <list style="symbols">
          <t>This field MUST NOT contain “none” or a Message Authentication Code (MAC) algorithm (e.g. one in which the algorithm registry description mentions MAC/HMAC).</t>
        </list></t>
      <t>“nonce” (defined in <xref target="replay-protection"/>)</t>
      <t>“url” (defined in <xref target="request-url-integrity"/>)</t>
      <t>Either “jwk” (JSON Web Key) or “kid” (Key ID) as specified below</t>
    </list></t>
</list></t>

<t>An ACME server MUST implement the “ES256” signature algorithm <xref target="RFC7518"/> and SHOULD implement the “EdDSA” signature algorithm using the “Ed25519” variant (indicated by “crv”) <xref target="RFC8037"/>.</t>

<t>The “jwk” and “kid” fields are mutually exclusive. Servers MUST reject requests
that contain both.</t>

<t>For newAccount requests, and for revokeCert requests authenticated by a certificate
key, there MUST be a “jwk” field. This field MUST contain the public key
corresponding to the private key used to sign the JWS.</t>

<t>For all other requests, the request is signed using an existing account, and
there MUST be a “kid” field. This field MUST contain the account URL received by
POSTing to the newAccount resource.</t>

<t>If the client sends a JWS signed with an algorithm that the server does not
support, then the server MUST return an error with status code 400 (Bad Request)
and type “urn:ietf:params:acme:error:badSignatureAlgorithm”.  The problem
document returned with the error MUST include an “algorithms” field with an
array of supported “alg” values.  See <xref target="errors"/> for more details on
the structure of error responses.</t>

<t>If the server supports the signature algorithm “alg” but either does not support
or chooses to reject the public key “jwk”, then the server MUST return an error
with status code 400 (Bad Request) and type
“urn:ietf:params:acme:error:badPublicKey”.  The problem document detail SHOULD
describe the reason for rejecting the public key; some example reasons are:</t>

<t><list style="symbols">
  <t>“alg” is “RS256” but the modulus “n” is too small (e.g., 512-bit)</t>
  <t>“alg” is “ES256” but “jwk” does not contain a valid P-256 public key</t>
  <t>“alg” is “EdDSA” and “crv” is “Ed448”, but the server only supports “EdDSA”
with “Ed25519”</t>
  <t>the corresponding private key is known to have been compromised</t>
</list></t>

<t>Because client requests in ACME carry JWS objects in the Flattened
JSON Serialization, they must have the Content-Type header field
set to “application/jose+json”.  If a request does not meet this
requirement, then the server MUST return a response with status code
415 (Unsupported Media Type).</t>

</section>
<section anchor="post-as-get" title="GET and POST-as-GET Requests">

<t>Note that authentication via signed JWS request bodies implies that
requests without an entity body are not authenticated, in particular
GET requests.  Except for the cases described in this section, if
the server receives a GET request, it MUST return an error with
status code 405 (Method Not Allowed) and type “malformed”.</t>

<t>If a client wishes to fetch a resource from the server (which would
otherwise be done with a GET), then it MUST send a POST request with
a JWS body as described above, where the payload of the JWS is a
zero-length octet string.  In other words, the “payload” field of the
JWS object MUST be present and set to the empty string (“”).</t>

<t>We will refer to these as “POST-as-GET” requests. On receiving a
request with a zero-length (and thus non-JSON) payload, the server
MUST authenticate the sender and verify any access control rules.
Otherwise, the server MUST treat this request as having the same
semantics as a GET request for the same resource.</t>

<t>The server MUST allow GET requests for the directory and newNonce
resources (see <xref target="resources"/>), in addition to POST-as-GET requests
for these resources.  This enables clients to bootstrap into the
ACME authentication system.</t>

</section>
<section anchor="request-url-integrity" title="Request URL Integrity">

<t>It is common in deployment for the entity terminating TLS for HTTPS to be different
from the entity operating the logical HTTPS server, with a “request routing”
layer in the middle.  For example, an ACME CA might have a content delivery
network terminate TLS connections from clients so that it can inspect client
requests for denial-of-service (DoS) protection.</t>

<t>These intermediaries can also change values in the request that are not signed
in the HTTPS request, e.g., the request URL and header fields.  ACME uses JWS to
provide an integrity mechanism, which protects against an intermediary
changing the request URL to another ACME URL.</t>

<t>As noted in <xref target="request-authentication"/>, all ACME request objects carry a
“url” header parameter in their protected header.  This header parameter encodes
the URL to which the client is directing the request.  On receiving such an
object in an HTTP request, the server MUST compare the “url” header parameter to
the request URL.  If the two do not match, then the server MUST reject the
request as unauthorized.</t>

<t>Except for the directory resource, all ACME resources are addressed with URLs
provided to the client by the server.  In POST requests sent to these resources, the client MUST set
the “url” header parameter to the exact string provided by the server (rather
than performing any re-encoding on the URL).  The server SHOULD perform the
corresponding string equality check, configuring each resource with the URL
string provided to clients and having the resource check that requests have the
same string in their “url” header parameter. The server MUST reject the request
as unauthorized if the string equality check fails.</t>

<section anchor="url-url-jws-header-parameter" title="&quot;url&quot; (URL) JWS Header Parameter">

<t>The “url” header parameter specifies the URL <xref target="RFC3986"/> to which this JWS
object is directed.  The “url” header parameter MUST be carried in the protected
header of the JWS.  The value of the “url” header parameter MUST be a string
representing the target URL.</t>

</section>
</section>
<section anchor="replay-protection" title="Replay Protection">

<t>In order to protect ACME resources from any possible replay attacks, ACME
POST requests have a mandatory anti-replay mechanism.  This mechanism is based on the
server maintaining a list of nonces that it has issued, and requiring
any signed request from the client to carry such a nonce.</t>

<t>An ACME server provides nonces to clients using the HTTP Replay-Nonce header field,
as specified in <xref target="replay-nonce"/>.  The server MUST include a Replay-Nonce
header field in every successful response to a POST request and SHOULD provide
it in error responses as well.</t>

<t>Every JWS sent by an ACME client MUST include, in its protected header, the
“nonce” header parameter, with contents as defined in
<xref target="nonce-nonce-jws-header-parameter"/>.  As part of JWS verification, the
ACME server MUST verify that the value of the “nonce” header is a value that the
server previously provided in a Replay-Nonce header field.  Once a nonce value
has appeared in an ACME request, the server MUST consider it invalid, in the same
way as a value it had never issued.</t>

<t>When a server rejects a request because its nonce value was unacceptable (or not
present), it MUST provide HTTP status code 400 (Bad Request), and indicate the
ACME error type “urn:ietf:params:acme:error:badNonce”.  An error response with
the “badNonce” error type MUST include a Replay-Nonce header field with a
fresh nonce that the server will accept in a retry of the original
query (and possibly in other requests, according to the server’s
nonce scoping policy).
On receiving such a response, a client SHOULD retry the request using the new
nonce.</t>

<t>The precise method used to generate and track nonces is up to the server.  For
example, the server could generate a random 128-bit value for each response,
keep a list of issued nonces, and strike nonces from this list as they are used.</t>

<t>Other than the constraint above with regard to nonces issued in
“badNonce” responses, ACME does not constrain how servers
scope nonces. Clients MAY assume that nonces have broad scope,
e.g., by having a single pool of nonces used for all requests.
However, when retrying in response to a “badNonce” error, the client
MUST use the nonce provided in the error response. Servers should
scope nonces broadly enough that retries are not needed very often.</t>

<section anchor="replay-nonce" title="Replay-Nonce">

<t>The Replay-Nonce HTTP header field includes a server-generated value that the
server can use to detect unauthorized replay in future client requests.  The
server MUST generate the values provided in Replay-Nonce header fields in such a way that
they are unique to each message, with high probability, and unpredictable to anyone besides the server. For instance, it is
acceptable to generate Replay-Nonces randomly.</t>

<t>The value of the Replay-Nonce header field MUST be an octet string encoded according to
the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  Clients MUST
ignore invalid Replay-Nonce values.  The ABNF <xref target="RFC5234"/> for the Replay-Nonce
header field follows:</t>

<figure><artwork><![CDATA[
  base64url = ALPHA / DIGIT / "-" / "_"

  Replay-Nonce = 1*base64url
]]></artwork></figure>

<t>The Replay-Nonce header field SHOULD NOT be included in HTTP request messages.</t>

</section>
<section anchor="nonce-nonce-jws-header-parameter" title="&quot;nonce&quot; (Nonce) JWS Header Parameter">

<t>The “nonce” header parameter provides a unique value that enables the verifier
of a JWS to recognize when replay has occurred. The “nonce” header parameter
MUST be carried in the protected header of the JWS.</t>

<t>The value of the “nonce” header parameter MUST be an octet string, encoded
according to the base64url encoding described in Section 2 of <xref target="RFC7515"/>.  If
the value of a “nonce” header parameter is not valid according to this encoding,
then the verifier MUST reject the JWS as malformed.</t>

</section>
</section>
<section anchor="rate-limits" title="Rate Limits">

<t>Creation of resources can be rate limited by ACME servers to ensure fair usage and
prevent abuse.  Once the rate limit is exceeded, the server MUST respond
with an error with the type “urn:ietf:params:acme:error:rateLimited”.
Additionally, the server SHOULD send a Retry-After header field <xref target="RFC7231"/> indicating
when the current request may succeed again.  If multiple rate limits are
in place, that is the time where all rate limits allow access again for
the current request with exactly the same parameters.</t>

<t>In addition to the human-readable “detail” field of the error response, the
server MAY send one or multiple link relations in the Link header field <xref target="RFC8288"/> pointing to
documentation about the specific rate limit that was hit, using the “help” link relation type.</t>

</section>
<section anchor="errors" title="Errors">

<t>Errors can be reported in ACME both at the HTTP layer and within challenge
objects as defined in <xref target="identifier-validation-challenges"/>. ACME servers can
return responses with an HTTP error response code (4XX or 5XX). For example,
if the client submits a request using a method not allowed in this document,
then the server MAY return status code 405 (Method Not Allowed).</t>

<t>When the server responds with an error status, it SHOULD provide additional
information using a problem document <xref target="RFC7807"/>.  To facilitate automatic
response to errors, this document defines the following standard tokens for use
in the “type” field (within the ACME URN namespace “urn:ietf:params:acme:error:”):</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>accountDoesNotExist</c>
      <c>The request specified an account that does not exist</c>
      <c>alreadyRevoked</c>
      <c>The request specified a certificate to be revoked that has already been revoked</c>
      <c>badCSR</c>
      <c>The CSR is unacceptable (e.g., due to a short key)</c>
      <c>badNonce</c>
      <c>The client sent an unacceptable anti-replay nonce</c>
      <c>badPublicKey</c>
      <c>The JWS was signed by a public key the server does not support</c>
      <c>badRevocationReason</c>
      <c>The revocation reason provided is not allowed by the server</c>
      <c>badSignatureAlgorithm</c>
      <c>The JWS was signed with an algorithm the server does not support</c>
      <c>caa</c>
      <c>Certification Authority Authorization (CAA) records forbid the CA from issuing a certificate</c>
      <c>compound</c>
      <c>Specific error conditions are indicated in the “subproblems” array.</c>
      <c>connection</c>
      <c>The server could not connect to validation target</c>
      <c>dns</c>
      <c>There was a problem with a DNS query during identifier validation</c>
      <c>externalAccountRequired</c>
      <c>The request must include a value for the “externalAccountBinding” field</c>
      <c>incorrectResponse</c>
      <c>Response received didn’t match the challenge’s requirements</c>
      <c>invalidContact</c>
      <c>A contact URL for an account was invalid</c>
      <c>malformed</c>
      <c>The request message was malformed</c>
      <c>orderNotReady</c>
      <c>The request attempted to finalize an order that is not ready to be finalized</c>
      <c>rateLimited</c>
      <c>The request exceeds a rate limit</c>
      <c>rejectedIdentifier</c>
      <c>The server will not issue certificates for the identifier</c>
      <c>serverInternal</c>
      <c>The server experienced an internal error</c>
      <c>tls</c>
      <c>The server received a TLS error during validation</c>
      <c>unauthorized</c>
      <c>The client lacks sufficient authorization</c>
      <c>unsupportedContact</c>
      <c>A contact URL for an account used an unsupported protocol scheme</c>
      <c>unsupportedIdentifier</c>
      <c>An identifier is of an unsupported type</c>
      <c>userActionRequired</c>
      <c>Visit the “instance” URL and take actions specified there</c>
</texttable>

<t>This list is not exhaustive. The server MAY return errors whose “type” field is
set to a URI other than those defined above.  Servers MUST NOT use the ACME URN
namespace for errors not listed in the appropriate IANA registry (see <xref target="acme-urn-space"/>).  Clients SHOULD display the
“detail” field of all errors.</t>

<t>In the remainder of this document, we use the tokens in the table above to refer
to error types, rather than the full URNs.  For example, an “error of type
‘badCSR’” refers to an error document with “type” value
“urn:ietf:params:acme:error:badCSR”.</t>

<section anchor="subproblems" title="Subproblems">

<t>Sometimes a CA may need to return multiple errors in response to a request.
Additionally, the CA may need to attribute errors to specific
identifiers.  For instance, a newOrder request may contain multiple
identifiers for which the CA cannot issue. In this situation, an ACME
problem document MAY contain the “subproblems” field, containing a JSON
array of problem documents, each of which MAY contain an “identifier”
field. If present, the “identifier” field MUST contain an ACME identifier
(<xref target="iana-identifier"/>). The “identifier” field MUST NOT be present at
the top level in ACME problem documents. It can only be present in subproblems.
Subproblems need not all have the same type, and they do not need to match the top level type.</t>

<t>ACME clients may choose to use the “identifier” field of a subproblem
as a hint that an operation would succeed if that identifier were omitted. For
instance, if an order contains ten DNS identifiers, and the newOrder
request returns a problem document with two subproblems (referencing two
of those identifiers), the ACME client may choose to submit another order
containing only the eight identifiers not listed in the problem document.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json
Link: <https://example.com/acme/directory>;rel="index"

{
    "type": "urn:ietf:params:acme:error:malformed",
    "detail": "Some of the identifiers requested were rejected",
    "subproblems": [
        {
            "type": "urn:ietf:params:acme:error:malformed",
            "detail": "Invalid underscore in DNS name \"_example.org\"",
            "identifier": {
                "type": "dns",
                "value": "_example.org"
            }
        },
        {
            "type": "urn:ietf:params:acme:error:rejectedIdentifier",
            "detail": "This CA will not issue for \"example.net\"",
            "identifier": {
                "type": "dns",
                "value": "example.net"
            }
        }
    ]
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="certificate-management" title="Certificate Management">

<t>In this section, we describe the certificate management functions that ACME
enables:</t>

<t><list style="symbols">
  <t>Account Creation</t>
  <t>Ordering a Certificate</t>
  <t>Identifier Authorization</t>
  <t>Certificate Issuance</t>
  <t>Certificate Revocation</t>
</list></t>

<section anchor="resources" title="Resources">

<t>ACME is structured as a HTTP-based application with the following types of resources:</t>

<t><list style="symbols">
  <t>Account resources, representing information about an account
(<xref target="account-objects"/>, <xref target="account-management"/>)</t>
  <t>Order resources, representing an account’s requests to issue certificates
(<xref target="order-objects"/>)</t>
  <t>Authorization resources, representing an account’s authorization to act for an
identifier (<xref target="authorization-objects"/>)</t>
  <t>Challenge resources, representing a challenge to prove control of an
identifier (<xref target="identifier-authorization"/>, <xref target="identifier-validation-challenges"/>)</t>
  <t>Certificate resources, representing issued certificates
(<xref target="downloading-the-certificate"/>)</t>
  <t>A “directory” resource (<xref target="directory"/>)</t>
  <t>A “newNonce” resource (<xref target="getting-a-nonce"/>)</t>
  <t>A “newAccount” resource (<xref target="account-management"/>)</t>
  <t>A “newOrder” resource (<xref target="applying-for-certificate-issuance"/>)</t>
  <t>A “revokeCert” resource (<xref target="certificate-revocation"/>)</t>
  <t>A “keyChange” resource (<xref target="account-key-roll-over"/>)</t>
</list></t>

<t>The server MUST provide “directory” and “newNonce” resources.</t>

<t>ACME uses different URLs for different management functions. Each function is
listed in a directory along with its corresponding URL, so clients only need to
be configured with the directory URL.  These URLs are connected by a few
different link relations <xref target="RFC5988"/>.</t>

<t>The “up” link relation is used with challenge resources to indicate the
authorization resource to which a challenge belongs.  It is also used, with some
media types, from certificate resources to indicate a resource from which the
client may fetch a chain of CA certificates that could be used to validate the
certificate in the original resource.</t>

<t>The “index” link relation is present on all resources other than the
directory and indicates the URL of the directory.</t>

<t>The following diagram illustrates the relations between resources on an ACME
server.  For the most part, these relations are expressed by URLs provided as
strings in the resources’ JSON representations.  Lines with labels in quotes
indicate HTTP link relations.</t>

<figure title="ACME Resources and Relationships"><artwork><![CDATA[
                               directory
                                   |
                                   +--> newNonce
                                   |
       +----------+----------+-----+-----+------------+
       |          |          |           |            |
       |          |          |           |            |
       V          V          V           V            V
  newAccount   newAuthz   newOrder   revokeCert   keyChange
       |          |          |
       |          |          |
       V          |          V
    account       |        order --+--> finalize
                  |          |     |
                  |          |     +--> cert
                  |          V
                  +---> authorization
                            | ^
                            | | "up"
                            V |
                          challenge
]]></artwork></figure>

<t>The following table illustrates a typical sequence of requests required to
establish a new account with the server, prove control of an identifier, issue a
certificate, and fetch an updated certificate some time after issuance.  The
“-&gt;” is a mnemonic for a Location header field pointing to a created resource.</t>

<texttable>
      <ttcol align='left'>Action</ttcol>
      <ttcol align='left'>Request</ttcol>
      <ttcol align='left'>Response</ttcol>
      <c>Get directory</c>
      <c>GET  directory</c>
      <c>200</c>
      <c>Get nonce</c>
      <c>HEAD newNonce</c>
      <c>200</c>
      <c>Create account</c>
      <c>POST newAccount</c>
      <c>201 -&gt; account</c>
      <c>Submit order</c>
      <c>POST newOrder</c>
      <c>201 -&gt; order</c>
      <c>Fetch challenges</c>
      <c>POST-as-GET order’s authorization urls</c>
      <c>200</c>
      <c>Respond to challenges</c>
      <c>POST authorization challenge urls</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Finalize order</c>
      <c>POST order’s finalize url</c>
      <c>200</c>
      <c>Poll for status</c>
      <c>POST-as-GET order</c>
      <c>200</c>
      <c>Download certificate</c>
      <c>POST-as-GET order’s certificate url</c>
      <c>200</c>
</texttable>

<t>The remainder of this section provides the details of how these resources are
structured and how the ACME protocol makes use of them.</t>

<section anchor="directory" title="Directory">

<t>In order to help clients configure themselves with the right URLs for each ACME
operation, ACME servers provide a directory object. This should be the only URL
needed to configure clients. It is a JSON object, whose field names are drawn from
the resource registry (<xref target="iana-resource"/>) and whose values are the corresponding
URLs.</t>

<texttable>
      <ttcol align='left'>Field</ttcol>
      <ttcol align='left'>URL in Value</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>keyChange</c>
      <c>Key change</c>
</texttable>

<t>There is no constraint on the URL of the directory except that it
should be different from the other ACME server resources’ URLs, and that it
should not clash with other services. For instance:</t>

<t><list style="symbols">
  <t>a host that functions as both an ACME and a Web server may want to keep
the root path “/” for an HTML “front page” and place the ACME
directory under the path “/acme”.</t>
  <t>a host that only functions as an ACME server could place the directory
under the path “/”.</t>
</list></t>

<t>If the ACME server does not implement pre-authorization (<xref target="pre-authorization"/>), it
MUST omit the “newAuthz” field of the directory.</t>

<t>The object MAY additionally contain a “meta” field. If present, it MUST be a
JSON object; each field in the object is an item of metadata relating to
the service provided by the ACME server.</t>

<t>The following metadata items are defined (<xref target="iana-meta"/>), all of which are OPTIONAL:</t>

<t><list style="hanging">
  <t hangText='termsOfService (optional, string):'>
  A URL identifying the current terms of service.</t>
  <t hangText='website (optional, string):'>
  An HTTP or HTTPS URL locating a website providing more
information about the ACME server.</t>
  <t hangText='caaIdentities (optional, array of string):'>
  The hostnames that the ACME server recognizes as referring to
itself for the purposes of CAA record validation as defined in
<xref target="RFC6844"/>.  Each string MUST represent the same sequence of ASCII
code points that the server will expect to see as the “Issuer Domain
Name” in a CAA issue or issuewild property tag.  This allows clients
to determine the correct issuer domain name to use when configuring
CAA records.</t>
  <t hangText='externalAccountRequired (optional, boolean):'>
  If this field is present and set to “true”, then the CA requires that all
newAccount requests include an “externalAccountBinding” field associating the
new account with an external account.</t>
</list></t>

<t>Clients access the directory by sending a GET request to the directory URL.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "newNonce": "https://example.com/acme/new-nonce",
  "newAccount": "https://example.com/acme/new-account",
  "newOrder": "https://example.com/acme/new-order",
  "newAuthz": "https://example.com/acme/new-authz",
  "revokeCert": "https://example.com/acme/revoke-cert",
  "keyChange": "https://example.com/acme/key-change",
  "meta": {
    "termsOfService": "https://example.com/acme/terms/2017-5-30",
    "website": "https://www.example.com/",
    "caaIdentities": ["example.com"],
    "externalAccountRequired": false
  }
}
]]></artwork></figure>

</section>
<section anchor="account-objects" title="Account Objects">

<t>An ACME account resource represents a set of metadata associated with an account.
Account resources have the following structure:</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this account. Possible values are “valid”, “deactivated”, and
“revoked”.  The value “deactivated” should be used to indicate client-initiated
deactivation whereas “revoked” should be used to indicate server-initiated
deactivation. See <xref target="status-changes"/>.</t>
  <t hangText='contact (optional, array of string):'>
  An array of URLs that the server can use to contact the client for issues
related to this account. For example, the server may wish to notify the
client about server-initiated revocation or certificate expiration.
For information on supported URL schemes, see <xref target="account-management"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Including this field in a newAccount request, with a value of true, indicates
the client’s agreement with the terms of service. This field cannot be updated
by the client.</t>
  <t hangText='externalAccountBinding (optional, object):'>
  Including this field in a newAccount request indicates approval by the holder
of an existing non-ACME account to bind that account to this ACME account. This
field is not updateable by the client (see <xref target="external-account-binding"/>).</t>
  <t hangText='orders (required, string):'>
  A URL from which a list of orders submitted by this account can be fetched via
a POST-as-GET request, as described in <xref target="orders-list"/>.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "contact": [
    "mailto:cert-admin@example.org",
    "mailto:admin@example.org"
  ],
  "termsOfServiceAgreed": true,
  "orders": "https://example.com/acme/orders/rzGoeA"
}
]]></artwork></figure>

<section anchor="orders-list" title="Orders List">

<t>Each account object includes an “orders” URL from which a list of orders created
by the account can be fetched via POST-as-GET request. The result of the request
MUST be a JSON object whose “orders” field is an array of URLs, each identifying
an order belonging to the account.  The server SHOULD include pending orders
and SHOULD NOT include orders that are invalid in the array of URLs. The server
MAY return an incomplete list, along with a Link header field with a “next” link
relation indicating where further entries can be acquired.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"
Link: <https://example.com/acme/orders/rzGoeA?cursor=2>;rel="next"

{
  "orders": [
    "https://example.com/acme/order/TOlocE8rfgo",
    "https://example.com/acme/order/4E16bbL5iSw",
    /* more URLs not shown for example brevity */
    "https://example.com/acme/order/neBHYLfw0mg"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="order-objects" title="Order Objects">

<t>An ACME order object represents a client’s request for a certificate and is
used to track the progress of that order through to issuance.  Thus, the object
contains information about the requested certificate, the authorizations that
the server requires the client to complete, and any certificates that have
resulted from this order.</t>

<t><list style="hanging">
  <t hangText='status (required, string):'>
  The status of this order.  Possible values are “pending”,
“ready”, “processing”, “valid”, and “invalid”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this order invalid, encoded
in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED for
objects with “pending” or “valid” in the status field.</t>
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the order pertains to.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.  This document defines the “dns”
identifier type.  See the registry defined in <xref target="iana-identifier"/>
for any others.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='error (optional, object):'>
  The error that occurred while processing the order, if any.
This field is structured as a problem document <xref target="RFC7807"/>.</t>
  <t hangText='authorizations (required, array of string):'>
  For pending orders, the authorizations that the client needs to complete
before the requested certificate can be issued (see
<xref target="identifier-authorization"/>), including unexpired authorizations that the client has completed in the past for identifiers specified in the order. The authorizations required are dictated by server policy; there may not be a 1:1 relationship between the order identifiers and the authorizations required. For final orders (in the “valid” or “invalid” state), the authorizations that
were completed.  Each entry is a URL from which an authorization can be fetched
with a POST-as-GET request.</t>
  <t hangText='finalize (required, string):'>
  A URL that a CSR must be POSTed to once all of the order’s authorizations are
satisfied to finalize the order. The result of a successful finalization will be
the population of the certificate URL for the order.</t>
  <t hangText='certificate (optional, string):'>
  A URL for the certificate that has been issued in response to this order.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2016-01-20T14:09:07.99Z",

  "identifiers": [
    { "type": "dns", "value": "www.example.org" },
    { "type": "dns", "value": "example.org" }
  ],

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/mAt3xBGaobw"
}
]]></artwork></figure>

<t>Any identifier of type “dns” in a newOrder request MAY have a wildcard domain
name as its value. A wildcard domain name consists of a single asterisk
character followed by a single full stop character (“*.”) followed by a domain
name as defined for use in the Subject Alternate Name Extension by
<xref target="RFC5280"/>. An authorization returned by the server for a wildcard domain name
identifier MUST NOT include the asterisk and full stop (“*.”) prefix in the
authorization identifier value. The returned authorization MUST include the
optional “wildcard” field, with a value of true.</t>

<t>The elements of the “authorizations” and “identifiers” arrays are immutable once
set.  The server MUST NOT change the contents of either array after they are
created. If a client observes a change in the contents of either array, then it
SHOULD consider the order invalid.</t>

<t>The “authorizations” array of the order SHOULD reflect all authorizations
that the CA takes into account in deciding to issue, even if some authorizations
were fulfilled in earlier orders or in pre-authorization transactions.  For
example, if a CA allows multiple orders to be fulfilled based on a single
authorization transaction, then it SHOULD reflect that authorization in all of
the orders.</t>

<t>Note that just because an authorization URL is listed in the
“authorizations” array of an order object doesn’t mean that the
client is required to take action.  There are several reasons that
the referenced authorizations may already be valid:</t>

<t><list style="symbols">
  <t>The client completed the authorization as part of a previous order</t>
  <t>The client previously pre-authorized the identifier (see <xref target="pre-authorization"/>)</t>
  <t>The server granted the client authorization based on an external account</t>
</list></t>

<t>Clients SHOULD check the “status” field of an order to determine
whether they need to take any action.</t>

</section>
<section anchor="authorization-objects" title="Authorization Objects">

<t>An ACME authorization object represents a server’s authorization for an account
to represent an identifier.  In addition to the identifier, an authorization
includes several metadata fields, such as the status of the authorization (e.g.,
“pending”, “valid”, or “revoked”) and which challenges were used to validate
possession of the identifier.</t>

<t>The structure of an ACME authorization resource is as follows:</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier that the account is authorized to represent.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier (see below and <xref target="iana-identifier"/>).</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='status (required, string):'>
  The status of this authorization.  Possible values are “pending”,
“valid”, “invalid”, “deactivated”, “expired”, and “revoked”.  See
<xref target="status-changes"/>.</t>
  <t hangText='expires (optional, string):'>
  The timestamp after which the server will consider this authorization invalid,
encoded in the format specified in <xref target="RFC3339"/>.  This field is REQUIRED
for objects with “valid” in the “status” field.</t>
  <t hangText='challenges (required, array of objects):'>
  For pending authorizations, the challenges that the client can
fulfill in order to prove possession of the identifier.  For valid
authorizations, the challenge that was validated.  For invalid
authorizations, the challenge that was attempted and failed.  Each
array entry is an object with parameters required to validate the
challenge.  A client should attempt to fulfill one of these
challenges, and a server should consider any one of the challenges
sufficient to make the authorization valid.</t>
  <t hangText='wildcard (optional, boolean):'>
  This field MUST be present and true for authorizations created as
a result of a newOrder request containing a DNS identifier with a
value that was a wildcard domain name.  For other authorizations,
it MUST be absent.  Wildcard domain names are described in <xref target="order-objects"/>.</t>
</list></t>

<t>The only type of identifier defined by this specification is a fully qualified
domain name (type: “dns”). The domain name MUST be encoded in the
form in which it would appear in a certificate.  That is, it MUST be
encoded according to the rules in Section 7 of <xref target="RFC5280"/>.  Servers MUST verify
any identifier values that begin with the ASCII-Compatible Encoding prefix
“xn--” as defined in <xref target="RFC5890"/> are properly encoded. Wildcard domain names
(with “*” as the first label) MUST NOT be included in authorization objects. If
an authorization object conveys authorization for the base domain of a newOrder
DNS identifier containing a wildcard domain name, then the optional authorizations
“wildcard” field MUST be present with a value of true.</t>

<t><xref target="identifier-validation-challenges"/> describes a set of challenges for domain
name validation.</t>

<figure><artwork><![CDATA[
{
  "status": "valid",
  "expires": "2015-03-01T14:09:07.99Z",

  "identifier": {
    "type": "dns",
    "value": "www.example.org"
  },

  "challenges": [
    {
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "type": "http-01",
      "status": "valid",
      "token": "DGyRejmCefe7v4NfDGDKfA",
      "validated": "2014-12-01T12:05:58.16Z"
    }
  ],

  "wildcard": false
}
]]></artwork></figure>

</section>
<section anchor="challenge-objects" title="Challenge Objects">

<t>An ACME challenge object represents a server’s offer to validate a
client’s possession of an identifier in a specific way.  Unlike the
other objects listed above, there is not a single standard structure
for a challenge object.  The contents of a challenge object depend
on the validation method being used.  The general structure of
challenge objects and an initial set of validation methods are
described in <xref target="identifier-validation-challenges"/>.</t>

</section>
<section anchor="status-changes" title="Status Changes">

<t>Each ACME object type goes through a simple state machine over its
lifetime.  The “status” field of the object indicates which state
the object is currently in.</t>

<t>Challenge objects are created in the “pending” state.  They
transition to the “processing” state when the client responds to the
challenge (see <xref target="responding-to-challenges"/>) and the server begins
attempting to validate that the client has completed the challenge.
Note that within the “processing” state, the server may attempt to
validate the challenge multiple times (see <xref target="retrying-challenges"/>).
Likewise, client requests for retries do not cause a state change.
If validation is successful, the challenge moves to the “valid”
state; if there is an error, the challenge moves to the “invalid”
state.</t>

<figure title="State Transitions for Challenge Objects"><artwork><![CDATA[
         pending
            |
            | Receive
            | response
            V
        processing <-+
            |   |    | Server retry or
            |   |    | client retry request
            |   +----+
            |
            |
Successful  |   Failed
validation  |   validation
  +---------+---------+
  |                   |
  V                   V
valid              invalid
]]></artwork></figure>

<t>Authorization objects are created in the “pending” state.  If one of
the challenges listed in the authorization transitions to the
“valid” state, then the authorization also changes to the “valid”
state.  If the client attempts to fulfill a challenge and fails, or
if there is an error while the authorization is still
pending, then the authorization transitions to the “invalid” state.
Once the authorization is in the “valid” state, it can expire
(“expired”), be deactivated by the client (“deactivated”, see
<xref target="deactivating-an-authorization"/>), or revoked by the server
(“revoked”).</t>

<figure title="State Transitions for Authorization Objects"><artwork><![CDATA[
                   pending --------------------+
                      |                        |
    Challenge failure |                        |
           or         |                        |
          Error       |  Challenge valid       |
            +---------+---------+              |
            |                   |              |
            V                   V              |
         invalid              valid            |
                                |              |
                                |              |
                                |              |
                 +--------------+--------------+
                 |              |              |
                 |              |              |
          Server |       Client |   Time after |
          revoke |   deactivate |    "expires" |
                 V              V              V
              revoked      deactivated      expired
]]></artwork></figure>

<t>Order objects are created in the “pending” state.  Once all of the
authorizations listed in the order object are in the “valid” state,
the order transitions to the “ready” state.  The order moves to the
“processing” state after the client submits a request to the order’s
“finalize” URL and the CA begins the issuance process for the
certificate.  Once the certificate is issued, the order enters the
“valid” state.  If an error occurs at any of these stages, the
order moves to the “invalid” state.  The order also moves to the
“invalid” state if it expires or one of its authorizations enters a
final state other than “valid” (“expired”, “revoked”, or “deactivated”).</t>

<figure title="State Transitions for Order Objects"><artwork><![CDATA[
 pending --------------+
    |                  |
    | All authz        |
    | "valid"          |
    V                  |
  ready ---------------+
    |                  |
    | Receive          |
    | finalize         |
    | request          |
    V                  |
processing ------------+
    |                  |
    | Certificate      | Error or
    | issued           | Authorization failure
    V                  V
  valid             invalid
]]></artwork></figure>

<t>Account objects are created in the “valid” state, since no further
action is required to create an account after a successful
newAccount request.  If the account is deactivated by the client  or
revoked by the server, it moves to the corresponding state.</t>

<figure title="State Transitions for Account Objects"><artwork><![CDATA[
                  valid
                    |
                    |
        +-----------+-----------+
 Client |                Server |
deactiv.|                revoke |
        V                       V
   deactivated               revoked
]]></artwork></figure>

<t>Note that some of these states may not ever appear in a “status”
field, depending on server behavior.  For example, a server that
issues synchronously will never show an order in the “processing”
state.  A server that deletes expired authorizations immediately
will never show an authorization in the “expired” state.</t>

</section>
</section>
<section anchor="getting-a-nonce" title="Getting a Nonce">

<t>Before sending a POST request to the server, an ACME client needs to have a
fresh anti-replay nonce to put in the “nonce” header of the JWS.  In most cases,
the client will have gotten a nonce from a previous request.  However, the
client might sometimes need to get a new nonce, e.g., on its first request to
the server or if an existing nonce is no longer valid.</t>

<t>To get a fresh nonce, the client sends a HEAD request to the newNonce resource
on the server.  The server’s response MUST include a Replay-Nonce header field
containing a fresh nonce and SHOULD have status code 200 (OK).  The
server MUST also respond to GET requests for this resource, returning an empty
body (while still providing a Replay-Nonce header) with a status code of 204 (No Content).</t>

<figure><artwork><![CDATA[
HEAD /acme/new-nonce HTTP/1.1
Host: example.com

HTTP/1.1 200 OK
Replay-Nonce: oFvnlFP1wIhRlYS2jTaXbA
Cache-Control: no-store
Link: <https://example.com/acme/directory>;rel="index"
]]></artwork></figure>

<t>Proxy caching of responses from the newNonce resource can cause
clients to receive the same nonce repeatedly, leading to “badNonce” errors.
The server MUST include a Cache-Control header field with the “no-store”
directive in responses for the newNonce resource, in order to prevent
caching of this resource.</t>

</section>
<section anchor="account-management" title="Account Management">

<t>In this section, we describe how an ACME client can create an
account on an ACME server and perform some modifications to the
account after it has been created.</t>

<t>A client creates a new account with the server by sending a POST request to the
server’s newAccount URL.  The body of the request is a stub account object
containing some subset of the following fields:</t>

<t><list style="hanging">
  <t hangText='contact (optional, array of string):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='termsOfServiceAgreed (optional, boolean):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/>.</t>
  <t hangText='onlyReturnExisting (optional, boolean):'>
  If this field is present with the value “true”, then the server MUST NOT
create a new account if one does not already exist.  This allows a client to
look up an account URL based on an account key (see
<xref target="finding-an-account-url-given-a-key"/>).</t>
  <t hangText='externalAccountBinding (optional, object):'>
  Same meaning as the corresponding server field defined in <xref target="account-objects"/></t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": {...},
    "nonce": "6S8IqOGY7eL2lsGoTZYifg",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "termsOfServiceAgreed": true,
    "contact": [
      "mailto:cert-admin@example.org",
      "mailto:admin@example.org"
    ]
  }),
  "signature": "RZPOnYoPs1PhjszF...-nh6X1qtOFPB519I"
}
]]></artwork></figure>

<t>The server MUST ignore any values provided in the “orders” fields in account
objects sent by the client, as well as any other fields that it does not
recognize. If new fields are specified in the future, the specification of those
fields MUST describe whether they can be provided by the client. The server MUST
NOT reflect the “onlyReturnExisting” field or any unrecognized fields in the
resulting account object. This allows clients to detect when servers do not
support an extension field.</t>

<t>The server SHOULD validate that the contact URLs in the “contact” field are
valid and supported by the server. If the server validates contact URLs, it MUST
support the “mailto” scheme.  Clients MUST NOT provide a “mailto” URL in the
“contact” field that contains <spanx style="verb">hfields</spanx> <xref target="RFC6068"/> or more than one
<spanx style="verb">addr-spec</spanx> in the <spanx style="verb">to</spanx> component.  If a server encounters a “mailto” contact
URL that does not meet these criteria, then it SHOULD reject it as invalid.</t>

<t>If the server rejects a contact URL for using an
unsupported scheme, it MUST return an error of type “unsupportedContact”, with
a description of the error and what types of contact URLs the server
considers acceptable. If the server rejects a contact URL for using a supported
scheme but an invalid value, then the server MUST return an error of type
“invalidContact”.</t>

<t>If the server wishes to require the client to agree to terms under which the ACME
service is to be used, it MUST indicate the URL where such terms can be accessed
in the “termsOfService” subfield of the “meta” field in the directory object,
and the server MUST reject newAccount requests that do not have the
“termsOfServiceAgreed” field set to “true”.  Clients SHOULD NOT automatically agree
to terms by default.  Rather, they SHOULD require some user interaction for
agreement to terms.</t>

<t>The server creates an account and stores the public key used to verify the
JWS (i.e., the “jwk” element of the JWS header) to authenticate future requests
from the account.  The server returns this account object in a 201 (Created)
response, with the account URL in a Location header field. The account URL is
used as the “kid” value in the JWS authenticating subsequent requests by this
account (see <xref target="request-authentication"/>).  The account URL is also used for
requests for management actions on this account, as described below.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Replay-Nonce: D8s4D2mLs8Vn-goWuPQeKA
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/acct/evOfKhNU60wg

{
  "status": "valid",

  "contact": [
    "mailto:cert-admin@example.org",
    "mailto:admin@example.org"
  ],

  "orders": "https://example.com/acme/acct/evOfKhNU60wg/orders"
}
]]></artwork></figure>

<section anchor="finding-an-account-url-given-a-key" title="Finding an Account URL Given a Key">

<t>If the server receives a newAccount request signed with a key for which it already has an account registered with the provided account key,
then it MUST return a response with status code 200 (OK) and provide the URL of
that account in the Location header field.  The body of this response represents the account object as it existed on the server before this request; any fields in the request object MUST be ignored.  This allows a client that has
an account key but not the corresponding account URL to recover the account URL.</t>

<t>If a client wishes to find the URL for an existing account and does not want an
account to be created if one does not already exist, then it SHOULD do so by
sending a POST request to the newAccount URL with a JWS whose payload has an
“onlyReturnExisting” field set to “true” ({“onlyReturnExisting”: true}).
If a client sends such a request and an account does not exist, then the server
MUST return an error response with status code 400 (Bad Request) and type
“urn:ietf:params:acme:error:accountDoesNotExist”.</t>

</section>
<section anchor="account-update" title="Account Update">

<t>If the client wishes to update this information in the future, it sends a POST
request with updated information to the account URL.  The server MUST ignore any
updates to the “orders” field, “termsOfServiceAgreed” field (see <xref target="changes-of-terms-of-service"/>), the “status” field (except as allowed by <xref target="account-deactivation"/>), or any other fields it does not recognize. If the server
accepts the update, it MUST return a response with a 200 (OK) status code and the
resulting account object.</t>

<t>For example, to update the contact information in the above account, the client
could send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ax5RnthDqp_Yf4_HZnFLmA",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "contact": [
      "mailto:certificates@example.org",
      "mailto:admin@example.org"
    ]
  }),
  "signature": "hDXzvcj8T6fbFbmn...rDzXzzvzpRy64N0o"
}
]]></artwork></figure>

</section>
<section anchor="changes-of-terms-of-service" title="Changes of Terms of Service">

<t>As described above, a client can indicate its agreement with the CA’s terms of
service by setting the “termsOfServiceAgreed” field in its account object to
“true”.</t>

<t>If the server has changed its terms of service since a client initially agreed,
and the server is unwilling to process a request without explicit agreement to
the new terms, then it MUST return an error response with status code 403
(Forbidden) and type “urn:ietf:params:acme:error:userActionRequired”.  This
response MUST include a Link header field with link relation “terms-of-service” and
the latest terms-of-service URL.</t>

<t>The problem document returned with the error MUST also include an “instance”
field, indicating a URL that the client should direct a human user to visit in
order for instructions on how to agree to the terms.</t>

<figure><artwork><![CDATA[
HTTP/1.1 403 Forbidden
Replay-Nonce: T81bdZroZ2ITWSondpTmAw
Link: <https://example.com/acme/directory>;rel="index"
Link: <https://example.com/acme/terms/2017-6-02>;rel="terms-of-service"
Content-Type: application/problem+json
Content-Language: en

{
  "type": "urn:ietf:params:acme:error:userActionRequired",
  "detail": "Terms of service have changed",
  "instance": "https://example.com/acme/agreement/?token=W8Ih3PswD-8"
}
]]></artwork></figure>

</section>
<section anchor="external-account-binding" title="External Account Binding">

<t>The server MAY require a value for the “externalAccountBinding” field to be
present in “newAccount” requests.  This can be used to associate an ACME account with an
existing account in a non-ACME system, such as a CA customer database.</t>

<t>To enable ACME account binding, the CA operating the ACME server needs to provide the ACME client with a
MAC key and a key identifier, using some mechanism outside of ACME. The key
identifier MUST be an ASCII string. The MAC key SHOULD be provided in
base64url-encoded form, to maximize compatibility between non-ACME provisioning systems
and ACME clients.</t>

<t>The ACME client then computes a binding JWS to indicate the external account holder’s
approval of the ACME account key.  The payload of this JWS is the ACME account key
being registered, in JWK form.  The protected header of the JWS MUST meet the
following criteria:</t>

<t><list style="symbols">
  <t>The “alg” field MUST indicate a MAC-based algorithm</t>
  <t>The “kid” field MUST contain the key identifier provided by the CA</t>
  <t>The “nonce” field MUST NOT be present</t>
  <t>The “url” field MUST be set to the same value as the outer JWS</t>
</list></t>

<t>The “signature” field of the JWS will contain the MAC value computed with the
MAC key provided by the CA.</t>

<figure><artwork><![CDATA[
POST /acme/new-account HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "jwk": /* account key */,
    "nonce": "K60BWPrMQG9SDxBDS_xtSw",
    "url": "https://example.com/acme/new-account"
  }),
  "payload": base64url({
    "contact": [
      "mailto:cert-admin@example.org",
      "mailto:admin@example.org"
    ],
    "termsOfServiceAgreed": true,

    "externalAccountBinding": {
      "protected": base64url({
        "alg": "HS256",
        "kid": /* key identifier from CA */,
        "url": "https://example.com/acme/new-account"
      }),
      "payload": base64url(/* same as in "jwk" above */),
      "signature": /* MAC using MAC key from CA */
    }
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>If such a CA requires that newAccount requests contain an “externalAccountBinding”
field, then it MUST provide the value “true” in the “externalAccountRequired” subfield
of the “meta” field in the directory object.  If the CA receives a
newAccount request without an “externalAccountBinding” field, then it SHOULD
reply with an error of type “externalAccountRequired”.</t>

<t>When a CA receives a newAccount request containing an
“externalAccountBinding” field, it decides whether or not to verify the
binding.  If the CA does not verify the binding, then it MUST NOT reflect the
“externalAccountBinding” field in the resulting account object (if any).  To
verify the account binding, the CA MUST take the following steps:</t>

<t><list style="numbers">
  <t>Verify that the value of the field is a well-formed JWS</t>
  <t>Verify that the JWS protected field meets the above criteria</t>
  <t>Retrieve the MAC key corresponding to the key identifier in the “kid” field</t>
  <t>Verify that the MAC on the JWS verifies using that MAC key</t>
  <t>Verify that the payload of the JWS represents the same key as was used to
verify the outer JWS (i.e., the “jwk” field of the outer JWS)</t>
</list></t>

<t>If all of these checks pass and the CA creates a new account, then the CA may
consider the new account associated with the external account corresponding to
the MAC key.  The account object the CA returns MUST include an
“externalAccountBinding” field with the same value as the field in
the request.  If any of these checks fail, then the CA MUST
reject the newAccount request.</t>

</section>
<section anchor="account-key-roll-over" title="Account Key Rollover">

<t>A client may wish to change the public key that is associated with an account in
order to recover from a key compromise or proactively mitigate the impact of an
unnoticed key compromise.</t>

<t>To change the key associated with an account, the client sends a
request to the server containing signatures by both the old and new
keys.  The signature by the new key covers the account URL and the
old key, signifying a request by the new key holder to take over the
account from the old key holder.  The signature by the old key
covers this request and its signature, and indicates the old key
holder’s assent to the rollover request.</t>

<t>To create this request object, the client first constructs a
keyChange object describing the account to be updated and its
account key:</t>

<t><list style="hanging">
  <t hangText='account (required, string):'>
  The URL for the account being modified.  The content of this field MUST be the
exact string provided in the Location header field in response to the
newAccount request that created the account.</t>
  <t hangText='oldKey (required, JWK):'>
  The JWK representation of the old key.</t>
</list></t>

<t>The client then encapsulates the keyChange object in an “inner” JWS, signed with the
requested new account key.
This “inner” JWS becomes the payload for the “outer” JWS that is the body of the ACME
request.</t>

<t>The outer JWS MUST meet the normal requirements for an ACME JWS request body (see
<xref target="request-authentication"/>).  The inner JWS MUST meet the normal requirements,
with the following differences:</t>

<t><list style="symbols">
  <t>The inner JWS MUST have a “jwk” header parameter, containing the public key of
the new key pair.</t>
  <t>The inner JWS MUST have the same “url” header parameter as the outer JWS.</t>
  <t>The inner JWS MUST omit the “nonce” header parameter.</t>
</list></t>

<t>This transaction has signatures from both the old and new keys so that the
server can verify that the holders of the two keys both agree to the change.
The signatures are nested to preserve the property that all signatures on POST
messages are signed by exactly one key.  The “inner” JWS effectively
represents a request by the holder of the new key to take over the
account form the holder of the old key.  The “outer” JWS represents
the current account holder’s assent to this request.</t>

<figure><artwork><![CDATA[
POST /acme/key-change HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "S9XaOcxP5McpnTcWPIhYuB",
    "url": "https://example.com/acme/key-change"
  }),
  "payload": base64url({
    "protected": base64url({
      "alg": "ES256",
      "jwk": /* new key */,
      "url": "https://example.com/acme/key-change"
    }),
    "payload": base64url({
      "account": "https://example.com/acme/acct/evOfKhNU60wg",
      "oldKey": /* old key */
    }),
    "signature": "Xe8B94RD30Azj2ea...8BmZIRtcSKPSd8gU"
  }),
  "signature": "5TWiqIYQfIDfALQv...x9C2mg8JGPxl5bI4"
}
]]></artwork></figure>

<t>On receiving a keyChange request, the server MUST perform the following steps in
addition to the typical JWS validation:</t>

<t><list style="numbers">
  <t>Validate the POST request belongs to a currently active account, as described
in <xref target="message-transport"/>.</t>
  <t>Check that the payload of the JWS is a well-formed JWS object (the “inner
JWS”).</t>
  <t>Check that the JWS protected header of the inner JWS has a “jwk” field.</t>
  <t>Check that the inner JWS verifies using the key in its “jwk” field.</t>
  <t>Check that the payload of the inner JWS is a well-formed keyChange object
(as described above).</t>
  <t>Check that the “url” parameters of the inner and outer JWSs are the same.</t>
  <t>Check that the “account” field of the keyChange object contains the URL for
the account matching the old key (i.e., the “kid” field in the
outer JWS).</t>
  <t>Check that the “oldKey” field of the keyChange object is the
same as the account key for the account in question.</t>
  <t>Check that no account exists whose account key is the same as the key in the
“jwk” header parameter of the inner JWS.</t>
</list></t>

<t>If all of these checks pass, then the server updates the corresponding account
by replacing the old account key with the new public key and returns status
code 200 (OK). Otherwise, the server responds with an error status code and a
problem document describing the error.  If there is an existing account with
the new key provided, then the server SHOULD use status code 409 (Conflict) and
provide the URL of that account in the Location header field.</t>

<t>Note that changing the account key for an account SHOULD NOT have any other
impact on the account.  For example, the server MUST NOT invalidate pending
orders or authorization transactions based on a change of account key.</t>

</section>
<section anchor="account-deactivation" title="Account Deactivation">

<t>A client can deactivate an account by posting a signed update to the account URL with
a status field of “deactivated”.  Clients may wish to do this when the account
key is compromised or decommissioned. A deactivated account can no longer request
certificate issuance or access resources related to the account, such as orders
or authorizations.  If a server receives a POST or POST-as-GET from
a deactivated account, it MUST return an error response with status
code 401 (Unauthorized) and type “urn:ietf:params:acme:error:unauthorized”.</t>

<figure><artwork><![CDATA[
POST /acme/acct/evOfKhNU60wg HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "ntuJWWSic4WVNSqeUmshgg",
    "url": "https://example.com/acme/acct/evOfKhNU60wg"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "earzVLd3m5M4xJzR...bVTqn7R08AKOVf3Y"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key. If the
server accepts the deactivation request, it replies with a 200 (OK) status code
and the current contents of the account object.</t>

<t>Once an account is deactivated, the server MUST NOT accept further requests
authorized by that account’s key. The server SHOULD cancel any pending operations authorized
by the account’s key, such as certificate orders. A server may take a variety of actions in
response to an account deactivation, e.g., deleting data related to that account
or sending mail to the account’s contacts.  Servers SHOULD NOT revoke
certificates issued by the deactivated account, since this could cause
operational disruption for servers using these certificates. ACME does not
provide a way to reactivate a deactivated account.</t>

</section>
</section>
<section anchor="applying-for-certificate-issuance" title="Applying for Certificate Issuance">

<t>The client begins the certificate issuance process by sending a POST request to the server’s
newOrder resource.  The body of the POST is a JWS object whose JSON payload is
a subset of the order object defined in <xref target="order-objects"/>, containing the fields
that describe the certificate to be issued:</t>

<t><list style="hanging">
  <t hangText='identifiers (required, array of object):'>
  An array of identifier objects that the client wishes to submit an order for.

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
  <t hangText='notBefore (optional, string):'>
  The requested value of the notBefore field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
  <t hangText='notAfter (optional, string):'>
  The requested value of the notAfter field in the certificate, in the date
format defined in <xref target="RFC3339"/>.</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-order HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "5XJ1L3lEkMG7tR6pA00clA",
    "url": "https://example.com/acme/new-order"
  }),
  "payload": base64url({
    "identifiers": [
      { "type": "dns", "value": "www.example.org" },
      { "type": "dns", "value": "example.org" }
    ],
    "notBefore": "2016-01-01T00:04:00+04:00",
    "notAfter": "2016-01-08T00:04:00+04:00"
  }),
  "signature": "H6ZXtGjTZyUnPeKn...wEA4TklBdh3e454g"
}
]]></artwork></figure>

<t>The server MUST return an error if it cannot fulfill the request as specified,
and it MUST NOT issue a certificate with contents other than those requested.  If
the server requires the request to be modified in a certain way, it should
indicate the required changes using an appropriate error type and description.</t>

<t>If the server is willing to issue the requested certificate, it responds with a
201 (Created) response.  The body of this response is an order object reflecting
the client’s request and any authorizations the client must complete before the
certificate will be issued.</t>

<figure><artwork><![CDATA[
HTTP/1.1 201 Created
Replay-Nonce: MYAuvOpaoIiywTezizk5vw
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "pending",
  "expires": "2016-01-05T14:09:07.99Z",

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "identifiers": [
    { "type": "dns", "value": "www.example.org" },
    { "type": "dns", "value": "example.org" }
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize"
}
]]></artwork></figure>

<t>The order object returned by the server represents a promise that if the
client fulfills the server’s requirements before the “expires” time, then the
server will be willing to finalize the order upon request and issue the
requested certificate.  In the order object, any authorization referenced in the
“authorizations” array whose status is “pending” represents an authorization
transaction that the client must complete before the server will issue the
certificate (see <xref target="identifier-authorization"/>).  If the client fails to complete
the required actions before the “expires” time, then the server SHOULD change
the status of the order to “invalid” and MAY delete the order resource. Clients
MUST NOT make any assumptions about the sort order of “identifiers” or
“authorizations” elements in the returned order object.</t>

<t>Once the client believes it has fulfilled the server’s requirements, it should
send a POST request to the order resource’s finalize URL. The POST body MUST
include a CSR:</t>

<t><list style="hanging">
  <t hangText='csr (required, string):'>
  A CSR encoding the parameters for the certificate being requested <xref target="RFC2986"/>.
The CSR is sent in the base64url-encoded version of the DER format.  (Note:
Because this field uses base64url, and does not include headers, it is different
from PEM.)</t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/order/TOlocE8rfgo/finalize HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "MSF2j2nawWHPxxkE3ZJtKQ",
    "url": "https://example.com/acme/order/TOlocE8rfgo/finalize"
  }),
  "payload": base64url({
    "csr": "MIIBPTCBxAIBADBFMQ...FS6aKdZeGsysoCo4H9P",
  }),
  "signature": "uOrUfIIk5RyQ...nw62Ay1cl6AB"
}
]]></artwork></figure>

<t>The CSR encodes the client’s requests with regard to the content of the
certificate to be issued.  The CSR MUST indicate the exact same set of requested
identifiers as the initial newOrder request.  Identifiers of type “dns” MUST appear either in the commonName portion
of the requested subject name or in an extensionRequest attribute <xref target="RFC2985"/>
requesting a subjectAltName extension, or both.  (These identifiers may appear
in any sort order.)  Specifications that define
new identifier types must specify where in the certificate signing
request these
identifiers can appear.</t>

<t>A request to finalize an order will result in an error if the CA is unwilling to issue a certificate corresponding to the submitted CSR.  For example:</t>

<t><list style="symbols">
  <t>If the CSR and order identifiers differ</t>
  <t>If the account is not authorized for the identifiers indicated in the CSR</t>
  <t>If the CSR requests extensions that the CA is not willing to include</t>
</list></t>

<t>In such cases, the problem document returned by the server SHOULD
use error code “badCSR” and describe specific reasons the CSR was
rejected in its “detail” field.  After returning such an error, the
server SHOULD leave the order in the “ready” state, to allow the
client to submit a new finalize request with an amended CSR.</t>

<t>A request to finalize an order will result in error if the order is not in the
“ready” state.  In such cases, the server MUST return a 403 (Forbidden) error
with a problem document of type “orderNotReady”.  The client should then send a
POST-as-GET request to the order resource to obtain its current state.  The
status of the order will indicate what action the client should take (see
below).</t>

<t>If a request to finalize an order is successful, the server will return a 200
(OK) with an updated order object.  The status of the order will indicate what
action the client should take:</t>

<t><list style="symbols">
  <t>“invalid”: The certificate will not be issued.  Consider this order process
abandoned.</t>
  <t>“pending”: The server does not believe that the client has fulfilled the
requirements.  Check the “authorizations” array for entries that are still
pending.</t>
  <t>“ready”: The server agrees that the requirements have been
fulfilled, and is awaiting finalization.  Submit a finalization
request.</t>
  <t>“processing”: The certificate is being issued. Send a POST-as-GET request after the
time given in the Retry-After header field of the response, if
any.</t>
  <t>“valid”: The server has issued the certificate and provisioned its URL to the
“certificate” field of the order.  Download the certificate.</t>
</list></t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: CGf81JWBsq8QyIgPCi9Q9X
Link: <https://example.com/acme/directory>;rel="index"
Location: https://example.com/acme/order/TOlocE8rfgo

{
  "status": "valid",
  "expires": "2016-01-20T14:09:07.99Z",

  "notBefore": "2016-01-01T00:00:00Z",
  "notAfter": "2016-01-08T00:00:00Z",

  "identifiers": [
    { "type": "dns", "value": "www.example.org" },
    { "type": "dns", "value": "example.org" }
  ],

  "authorizations": [
    "https://example.com/acme/authz/PAniVnsZcis",
    "https://example.com/acme/authz/r4HqLzrSrpI"
  ],

  "finalize": "https://example.com/acme/order/TOlocE8rfgo/finalize",

  "certificate": "https://example.com/acme/cert/mAt3xBGaobw"
}
]]></artwork></figure>

<section anchor="pre-authorization" title="Pre-authorization">

<t>The order process described above presumes that authorization objects are
created reactively, in response to a certificate order.  Some servers
may also wish to enable clients to obtain authorization for an identifier
proactively, outside of the context of a specific issuance.  For example, a
client hosting virtual servers for a collection of names might wish to obtain
authorization before any virtual servers are created and only create a certificate when
a virtual server starts up.</t>

<t>In some cases, a CA running an ACME server might have a completely external,
non-ACME process for authorizing a client to issue certificates for an identifier.  In these
cases, the CA should provision its ACME server with authorization objects
corresponding to these authorizations and reflect them as already valid in any
orders submitted by the client.</t>

<t>If a CA wishes to allow pre-authorization within ACME, it can offer a “new
authorization” resource in its directory by adding the field “newAuthz” with a
URL for the newAuthz resource.</t>

<t>To request authorization for an identifier, the client sends a POST request to
the newAuthz resource specifying the identifier for which authorization
is being requested.</t>

<t><list style="hanging">
  <t hangText='identifier (required, object):'>
  The identifier to appear in the resulting authorization object
(see <xref target="authorization-objects"/>).

      <list style="hanging">
        <t hangText='type (required, string):'>
        The type of identifier.</t>
        <t hangText='value (required, string):'>
        The identifier itself.</t>
      </list>
  </t>
</list></t>

<figure><artwork><![CDATA[
POST /acme/new-authz HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/new-authz"
  }),
  "payload": base64url({
    "identifier": {
      "type": "dns",
      "value": "example.org"
    }
  }),
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}
]]></artwork></figure>

<t>Note that because the identifier in a pre-authorization request is
the exact identifier to be included in the authorization object,
pre-authorization cannot be used to authorize issuance of certificates
containing wildcard domain names.</t>

<t>Before processing the authorization request, the server SHOULD determine whether
it is willing to issue certificates for the identifier.  For example, the server
should check that the identifier is of a supported type.  Servers might also
check names against a blacklist of known high-value identifiers.  If the server
is unwilling to issue for the identifier, it SHOULD return an error
with status code 403 (Forbidden), with a problem document describing
the reason for the rejection.</t>

<t>If the server is willing to proceed, it builds a pending authorization object
from the inputs submitted by the client:</t>

<t><list style="symbols">
  <t>“identifier” the identifier submitted by the client</t>
  <t>“status” MUST be “pending” unless the server has out-of-band information
about the client’s authorization status</t>
  <t>“challenges” as selected by the server’s policy for this identifier</t>
</list></t>

<t>The server allocates a new URL for this authorization and returns a 201
(Created) response with the authorization URL in the Location header field and
the JSON authorization object in the body.  The client then follows the process
described in <xref target="identifier-authorization"/> to complete the authorization process.</t>

</section>
<section anchor="downloading-the-certificate" title="Downloading the Certificate">

<t>To download the issued certificate, the client simply sends a POST-as-GET request to the
certificate URL.</t>

<t>The default format of the certificate is application/pem-certificate-chain (see <xref target="iana-considerations"/>).</t>

<t>The server MAY provide one or more link relation header fields <xref target="RFC5988"/> with
relation “alternate”. Each such field SHOULD express an alternative certificate
chain starting with the same end-entity certificate. This can be used to express
paths to various trust anchors. Clients can fetch these alternates and use their
own heuristics to decide which is optimal.</t>

<figure><artwork><![CDATA[
POST /acme/cert/mAt3xBGaobw HTTP/1.1
Host: example.com
Content-Type: application/jose+json
Accept: application/pem-certificate-chain

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/cert/mAt3xBGaobw"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/pem-certificate-chain
Link: <https://example.com/acme/directory>;rel="index"

-----BEGIN CERTIFICATE-----
[End-entity certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Issuer certificate contents]
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[Other certificate contents]
-----END CERTIFICATE-----
]]></artwork></figure>

<t>A certificate resource represents a single, immutable certificate. If the client
wishes to obtain a renewed certificate, the client initiates a new order process
to request one.</t>

<t>Because certificate resources are immutable once issuance is complete, the
server MAY enable the caching of the resource by adding Expires and
Cache-Control header fields specifying a point in time in the distant future. These
header fields have no relation to the certificate’s period of validity.</t>

<t>The ACME client MAY request other formats by including an Accept
header field <xref target="RFC7231"/> in its request.  For example, the client could use the media type
<spanx style="verb">application/pkix-cert</spanx> <xref target="RFC2585"/> or <spanx style="verb">application/pkcs7-mime</spanx> <xref target="RFC5751"/> to request the end-entity certificate
in DER format. Server support for alternate formats is OPTIONAL. For
formats that can only express a single certificate, the server SHOULD
provide one or more <spanx style="verb">Link: rel="up"</spanx> header fields pointing to an issuer or
issuers so that ACME clients can build a certificate chain as defined
in TLS (see Section 4.4.2 of <xref target="RFC8446"/>).</t>

</section>
</section>
<section anchor="identifier-authorization" title="Identifier Authorization">

<t>The identifier authorization process establishes the authorization of an account
to manage certificates for a given identifier.  This process assures the
server of two things:</t>

<t><list style="numbers">
  <t>That the client controls the private key of the account key pair, and</t>
  <t>That the client controls the identifier in question.</t>
</list></t>

<t>This process may be repeated to associate multiple identifiers with an account
(e.g., to request certificates with multiple identifiers) or to associate
multiple accounts with an identifier (e.g., to allow multiple entities to manage
certificates).</t>

<t>Authorization resources are created by the server in response to newOrder or
newAuthz requests submitted by an account key holder; their
URLs are provided to the client in the responses to these requests.  The
authorization object is implicitly tied to the account key used to sign the
request.</t>

<t>When a client receives an order from the server in reply to a newOrder request, it downloads the authorization
resources by sending POST-as-GET requests to the indicated URLs.  If the client
initiates authorization using a request to the newAuthz resource, it
will have already received the pending authorization object in the response
to that request.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"

{
  "status": "pending",
  "expires": "2016-01-02T14:09:30Z",

  "identifier": {
    "type": "dns",
    "value": "www.example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    },
    {
      "type": "dns-01",
      "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
      "token": "DGyRejmCefe7v4NfDGDKfA"
    }
  ]
}
]]></artwork></figure>

<section anchor="responding-to-challenges" title="Responding to Challenges">

<t>To prove control of the identifier and receive authorization, the client needs to
provision the required challenge response based on the challenge type and
indicate to the server that it is ready for the challenge validation to
be attempted.</t>

<t>The client indicates to the server that it is ready for the challenge validation by
sending an empty JSON body (<spanx style="verb">{}</spanx>) carried in a POST request to the challenge
URL (not the authorization URL).</t>

<t>For example, if the client were to respond to the “http-01” challenge in the
above authorization, it would send the following request:</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4 HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "Q_s3MWoqT05TrdkM2MTDcw",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "9cbg5JO1Gf5YLjjz...SpkUfcdPai9uVYYQ"
}
]]></artwork></figure>

<t>The server updates the authorization document by updating its representation of
the challenge with the response object provided by the client.  The server MUST
ignore any fields in the response object that are not specified as response
fields for this type of challenge.
Note that the challenges in this document do
not define any response fields, but future specifications might define them.
The server provides a 200 (OK) response
with the updated challenge object as its body.</t>

<t>If the client’s response is invalid for any reason or does not provide the
server with appropriate information to validate the challenge, then the server
MUST return an HTTP error.  On receiving such an error, the client SHOULD undo
any actions that have been taken to fulfill the challenge, e.g., removing files
that have been provisioned to a web server.</t>

<t>The server is said to “finalize” the authorization when it has completed
one of the validations.  This is done by assigning the authorization a status of “valid”
or “invalid”, corresponding to whether it considers the account authorized
for the identifier. If the final state is “valid”, then the server MUST include
an “expires” field. When finalizing an authorization, the server MAY remove
challenges other than the one that was completed, and it may modify the “expires”
field. The server SHOULD NOT remove challenges with status “invalid”.</t>

<t>Usually, the validation process will take some time, so the client will need to
poll the authorization resource to see when it is finalized.  For challenges
where the client can tell when the server has validated the challenge (e.g., by
seeing an HTTP or DNS request from the server), the client SHOULD NOT begin
polling until it has seen the validation request from the server.</t>

<t>To check on the status of an authorization, the client sends a POST-as-GET request to
the authorization URL, and the server responds with the current authorization
object. In responding to poll requests while the validation is still in
progress, the server MUST return a 200 (OK) response and MAY include a
Retry-After header field to suggest a polling interval to the client.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "uQpSjlRb4vQVCjVYAyyUWg",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": "",
  "signature": "nuSDISbWG8mMgE7H...QyVUL68yzf3Zawps"
}

HTTP/1.1 200 OK
Content-Type: application/json
Link: <https://example.com/acme/directory>;rel="index"

{
  "status": "valid",
  "expires": "2018-09-09T14:09:01.13Z",

  "identifier": {
    "type": "dns",
    "value": "www.example.org"
  },

  "challenges": [
    {
      "type": "http-01",
      "url": "https://example.com/acme/chall/prV_B7yEyA4",
      "status": "valid",
      "validated": "2014-12-01T12:05:13.72Z",
      "token": "IlirfxKKXAsHtmzK29Pj8A"
    }
  ]
}
]]></artwork></figure>

</section>
<section anchor="deactivating-an-authorization" title="Deactivating an Authorization">

<t>If a client wishes to relinquish its authorization to issue certificates for an
identifier, then it may request that the server deactivate each authorization
associated with it by sending POST requests with the static object
{“status”: “deactivated”} to each authorization URL.</t>

<figure><artwork><![CDATA[
POST /acme/authz/PAniVnsZcis HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "xWCM9lGbIyCgue8di6ueWQ",
    "url": "https://example.com/acme/authz/PAniVnsZcis"
  }),
  "payload": base64url({
    "status": "deactivated"
  }),
  "signature": "srX9Ji7Le9bjszhu...WTFdtujObzMtZcx4"
}
]]></artwork></figure>

<t>The server MUST verify that the request is signed by the account key
corresponding to the account that owns the authorization. If the server accepts
the deactivation, it should reply with a 200 (OK) status code and the updated
contents of the authorization object.</t>

<t>The server MUST NOT treat deactivated authorization objects as sufficient for
issuing certificates.</t>

</section>
</section>
<section anchor="certificate-revocation" title="Certificate Revocation">

<t>To request that a certificate be revoked, the client sends a POST request to
the ACME server’s revokeCert URL.  The body of the POST is a JWS object whose
JSON payload contains the certificate to be revoked:</t>

<t><list style="hanging">
  <t hangText='certificate (required, string):'>
  The certificate to be revoked, in the base64url-encoded version of the DER
format.  (Note: Because this field uses base64url, and does not include headers,
it is different from PEM.)</t>
  <t hangText='reason (optional, int):'>
  One of the revocation reasonCodes defined in Section 5.3.1 of <xref target="RFC5280"/>
to be used when generating OCSP responses and CRLs. If this field is not set,
the server SHOULD omit the reasonCode CRL entry extension when generating OCSP
responses and CRLs. The server MAY disallow a subset of reasonCodes from being
used by the user. If a request contains a disallowed reasonCode, then the server MUST
reject it with the error type “urn:ietf:params:acme:error:badRevocationReason”.
The problem document detail SHOULD indicate which reasonCodes are allowed.</t>
</list></t>

<t>Revocation requests are different from other ACME requests in that they can be
signed with either an account key pair or the key pair in the certificate.</t>

<t>Example using an account key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 4
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Example using the certificate key pair for the signature:</t>

<figure><artwork><![CDATA[
POST /acme/revoke-cert HTTP/1.1
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "RS256",
    "jwk": /* certificate's public key */,
    "nonce": "JHb54aT_KTXBWQOzGYkt9A",
    "url": "https://example.com/acme/revoke-cert"
  }),
  "payload": base64url({
    "certificate": "MIIEDTCCAvegAwIBAgIRAP8...",
    "reason": 1
  }),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>Before revoking a certificate, the server MUST verify that the key used to sign
the request is authorized to revoke the certificate.  The server MUST consider
at least the following accounts authorized for a given certificate:</t>

<t><list style="symbols">
  <t>the account that issued the certificate.</t>
  <t>an account that holds authorizations for all of the identifiers in the
certificate.</t>
</list></t>

<t>The server MUST also consider a revocation request valid if it is signed with
the private key corresponding to the public key in the certificate.</t>

<t>If the revocation succeeds, the server responds with status code 200 (OK).  If
the revocation fails, the server returns an error.  For example, if the certificate
has already been revoked, the server returns an error response with status code 400
(Bad Request) and type “urn:ietf:params:acme:error:alreadyRevoked”.</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Replay-Nonce: IXVHDyxIRGcTE0VSblhPzw
Content-Length: 0
Link: <https://example.com/acme/directory>;rel="index"

--- or ---

HTTP/1.1 403 Forbidden
Replay-Nonce: lXfyFzi6238tfPQRwgfmPU
Content-Type: application/problem+json
Content-Language: en
Link: <https://example.com/acme/directory>;rel="index"

{
  "type": "urn:ietf:params:acme:error:unauthorized",
  "detail": "No authorization provided for name example.org"
}
]]></artwork></figure>

</section>
</section>
<section anchor="identifier-validation-challenges" title="Identifier Validation Challenges">

<t>There are few types of identifiers in the world for which there is a standardized
mechanism to prove possession of a given identifier.  In all practical cases,
CAs rely on a variety of means to test whether an entity applying for a
certificate with a given identifier actually controls that identifier.</t>

<t>Challenges provide the server with assurance that an account holder is also
the entity that controls an identifier.  For each type of challenge, it must be
the case that, in order for an entity to successfully complete the challenge, the
entity must both:</t>

<t><list style="symbols">
  <t>Hold the private key of the account key pair used to respond to the challenge, and</t>
  <t>Control the identifier in question.</t>
</list></t>

<t><xref target="security-considerations"/> documents how the challenges defined in this
document meet these requirements.  New challenges will need to document how they
do.</t>

<t>ACME uses an extensible challenge/response framework for identifier validation.
The server presents a set of challenges in the authorization object it sends to a
client (as objects in the “challenges” array), and the client responds by
sending a response object in a POST request to a challenge URL.</t>

<t>This section describes an initial set of challenge types.  The definition of a
challenge type includes:</t>

<t><list style="numbers">
  <t>Content of challenge objects</t>
  <t>Content of response objects</t>
  <t>How the server uses the challenge and response to verify control of an
identifier</t>
</list></t>

<t>Challenge objects all contain the following basic fields:</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The type of challenge encoded in the object.</t>
  <t hangText='url (required, string):'>
  The URL to which a response can be posted.</t>
  <t hangText='status (required, string):'>
  The status of this challenge.  Possible values are “pending”,
“processing”, “valid”, and “invalid” (see <xref target="status-changes"/>).</t>
  <t hangText='validated (optional, string):'>
  The time at which the server validated this challenge, encoded in the
format specified in <xref target="RFC3339"/>.  This field is REQUIRED if the
“status” field is “valid”.</t>
  <t hangText='error (optional, object):'>
  Error that occurred while the server was validating the challenge, if any,
structured as a problem document <xref target="RFC7807"/>. Multiple errors can be indicated
by using subproblems <xref target="subproblems"/>. A challenge object with an error MUST have
status equal to “invalid”.</t>
</list></t>

<t>All additional fields are specified by the challenge type.  If the server sets a
challenge’s “status” to “invalid”, it SHOULD also include the “error” field to
help the client diagnose why the challenge failed.</t>

<t>Different challenges allow the server to obtain proof of different aspects of
control over an identifier.  In some challenges, like HTTP and DNS, the
client directly proves its ability to do certain things related to the
identifier.  The choice of which challenges to offer to a client under which
circumstances is a matter of server policy.</t>

<t>The identifier validation challenges described in this section all relate to
validation of domain names.  If ACME is extended in the future to support other
types of identifiers, there will need to be new challenge types, and they will
need to specify which types of identifier they apply to.</t>

<section anchor="key-authorizations" title="Key Authorizations">

<t>All challenges defined in this document make use of a key authorization
string.  A key authorization is a string that concatenates the token for the
challenge with a key fingerprint, separated by a “.” character:</t>

<figure><artwork><![CDATA[
keyAuthorization = token || '.' || base64url(Thumbprint(accountKey))
]]></artwork></figure>

<t>The “Thumbprint” step indicates the computation specified in <xref target="RFC7638"/>,
using the SHA-256 digest <xref target="FIPS180-4"></xref>.  As noted in <xref target="RFC7518"/> any prepended
zero octets in the fields of a JWK object MUST be stripped before doing the computation.</t>

<t>As specified in the individual challenges below, the token for a challenge is a
string comprised entirely of characters in the URL-safe base64 alphabet.
The “||” operator indicates concatenation of strings.</t>

</section>
<section anchor="retrying-challenges" title="Retrying Challenges">

<t>ACME challenges typically require the client to set up some network-accessible
resource that the server can query in order to validate that the client
controls an identifier.  In practice, it is not uncommon for the server’s
queries to fail while a resource is being set up, e.g., due to information
propagating across a cluster or firewall rules not being in place.</t>

<t>Clients SHOULD NOT respond to challenges until they believe that the server’s
queries will succeed. If a server’s initial validation query fails, the server
SHOULD retry the query after some time, in order to account for delay in setting
up responses such as DNS records or HTTP resources. The precise retry schedule
is up to the server, but server operators should keep in mind the operational
scenarios that the schedule is trying to accommodate.  Given that retries are
intended to address things like propagation delays in HTTP or DNS provisioning,
there should not usually be any reason to retry more often than every 5 or 10
seconds. While the server is still trying, the
status of the challenge remains “processing”; it is only marked “invalid” once the
server has given up.</t>

<t>The server MUST provide information about its retry state to the client via the
“error” field in the challenge and the Retry-After HTTP header field in
response to requests to the challenge resource. The server MUST add an entry to
the “error” field in the challenge after each failed validation query. The
server SHOULD set the Retry-After header field to a time after the server’s
next validation query, since the status of the challenge will not change until
that time.</t>

<t>Clients can explicitly request a retry by resending their response to a
challenge in a new POST request (with a new nonce, etc.). This allows clients
to request a retry when the state has changed (e.g., after firewall rules have been
updated). Servers SHOULD retry a request immediately on receiving such a POST
request. In order to avoid denial-of-service attacks via client-initiated
retries, servers SHOULD rate-limit such requests.</t>

</section>
<section anchor="http-challenge" title="HTTP Challenge">

<t>With HTTP validation, the client in an ACME transaction proves its control over
a domain name by proving that it can provision HTTP resources on a server
accessible under that domain name.
The ACME server challenges the client to
provision a file at a specific path, with a specific string as its content.</t>

<t>As a domain may resolve to multiple IPv4 and IPv6 addresses, the server will
connect to at least one of the hosts found in the DNS A and AAAA records, at its
discretion.  Because many web servers allocate a default HTTPS virtual host to a
particular low-privilege tenant user in a subtle and non-intuitive manner, the
challenge must be completed over HTTP, not HTTPS.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “http-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy.
It MUST NOT contain any characters outside the base64url alphabet and MUST NOT
include base64 padding characters (“=”).  See <xref target="RFC4086"/> for additional information
on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "http-01",
  "url": "https://example.com/acme/chall/prV_B7yEyA4",
  "status": "pending",
  "token": "LoqXcYV8q5ONbJQxbmR7SCTNo3tiAXDfowyjxAjEuX0"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from
the “token” value provided in the challenge and the client’s account key.  The
client then provisions the key authorization as a resource on the HTTP server
for the domain in question.</t>

<t>The path at which the resource is provisioned is comprised of the fixed prefix
“/.well-known/acme-challenge/”, followed by the “token” value in the challenge.
The value of the resource MUST be the ASCII representation of the key
authorization.</t>

<figure><artwork><![CDATA[
GET /.well-known/acme-challenge/LoqXcYV8...jxAjEuX0
Host: example.org

HTTP/1.1 200 OK
Content-Type: application/octet-stream

LoqXcYV8...jxAjEuX0.9jg46WB3...fm21mqTI
]]></artwork></figure>

<t>(In the above, “…” indicates that the token and the JWK
thumbprint in the key authorization have been truncated to fit on
the page.)</t>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/prV_B7yEyA4
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "UQI1PoRi5OuXzxuX7V7wL0",
    "url": "https://example.com/acme/chall/prV_B7yEyA4"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>Given a challenge/response pair, the server verifies the client’s control of the
domain by verifying that the resource was provisioned as expected.</t>

<t><list style="numbers">
  <t>Construct a URL by populating the URL template <xref target="RFC6570"/>
“http://{domain}/.well-known/acme-challenge/{token}”, where:
  <list style="symbols">
      <t>the domain field is set to the domain name being verified; and</t>
      <t>the token field is set to the token in the challenge.</t>
    </list></t>
  <t>Verify that the resulting URL is well-formed.</t>
  <t>Dereference the URL using an HTTP GET request.  This request MUST be sent to
TCP port 80 on the HTTP server.</t>
  <t>Verify that the body of the response is a well-formed key authorization.  The
server SHOULD ignore whitespace characters at the end of the body.</t>
  <t>Verify that key authorization provided by the HTTP server matches the key
authorization stored by the server.</t>
</list></t>

<t>The server SHOULD follow redirects when dereferencing the URL.
Clients might use redirects, for example, so that the response can
be provided by a centralized certificate management server.  See
<xref target="integrity-of-authorizations"/> for security considerations related
to redirects.</t>

<t>If all of the above verifications succeed, then the validation is successful.
If the request fails, or the body does not pass these checks, then it has
failed.</t>

<t>The client SHOULD de-provision the resource provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

<t>Note that because the token appears both in the request sent by the
ACME server and in the key authorization in the response, it is
possible to build clients that copy the token from request to
response.  Clients should avoid this behavior because it can lead
to cross-site scripting vulnerabilities; instead, clients should be
explicitly configured on a per-challenge basis. A client that does
copy tokens from requests to responses MUST validate that the token
in the request matches the token syntax above (e.g., that it
includes only characters from the base64url alphabet).</t>

</section>
<section anchor="dns-challenge" title="DNS Challenge">

<t>When the identifier being validated is a domain name, the client can prove
control of that domain by provisioning a TXT resource record containing a designated
value for a specific validation domain name.</t>

<t><list style="hanging">
  <t hangText='type (required, string):'>
  The string “dns-01”.</t>
  <t hangText='token (required, string):'>
  A random value that uniquely identifies the challenge.  This value MUST have
at least 128 bits of entropy. It MUST NOT contain any characters outside the
base64url alphabet, including padding characters (“=”). See <xref target="RFC4086"/> for
additional information on randomness requirements.</t>
</list></t>

<figure><artwork><![CDATA[
{
  "type": "dns-01",
  "url": "https://example.com/acme/chall/Rg5dV14Gh1Q",
  "status": "pending",
  "token": "evaGxfADs6pSRb2LAv9IZf17Dt3juxGJ-PCt92wr-oA"
}
]]></artwork></figure>

<t>A client fulfills this challenge by constructing a key authorization from the
“token” value provided in the challenge and the client’s account key.  The
client then computes the SHA-256 digest <xref target="FIPS180-4"></xref> of the key authorization.</t>

<t>The record provisioned to the DNS contains the base64url encoding of this digest.  The
client constructs the validation domain name by prepending the label
“_acme-challenge” to the domain name being validated, then provisions a TXT
record with the digest value under that name. For example, if the domain name
being validated is “www.example.org”, then the client would provision the following
DNS record:</t>

<figure><artwork><![CDATA[
_acme-challenge.www.example.org. 300 IN TXT "gfj9Xq...Rg85nM"
]]></artwork></figure>

<t>A client responds with an empty object ({}) to acknowledge that the challenge
can be validated by the server.</t>

<figure><artwork><![CDATA[
POST /acme/chall/Rg5dV14Gh1Q
Host: example.com
Content-Type: application/jose+json

{
  "protected": base64url({
    "alg": "ES256",
    "kid": "https://example.com/acme/acct/evOfKhNU60wg",
    "nonce": "SS2sSl1PtspvFZ08kNtzKd",
    "url": "https://example.com/acme/chall/Rg5dV14Gh1Q"
  }),
  "payload": base64url({}),
  "signature": "Q1bURgJoEslbD1c5...3pYdSMLio57mQNN4"
}
]]></artwork></figure>

<t>On receiving a response, the server constructs and stores the key authorization
from the challenge “token” value and the current client account key.</t>

<t>To validate a DNS challenge, the server performs the following steps:</t>

<t><list style="numbers">
  <t>Compute the SHA-256 digest <xref target="FIPS180-4"></xref> of the stored key authorization</t>
  <t>Query for TXT records for the validation domain name</t>
  <t>Verify that the contents of one of the TXT records match the digest value</t>
</list></t>

<t>If all of the above verifications succeed, then the validation is successful.
If no DNS record is found, or DNS record and response payload do not pass these
checks, then the validation fails.</t>

<t>The client SHOULD de-provision the resource record(s) provisioned for this
challenge once the challenge is complete, i.e., once the “status”
field of the challenge has the value “valid” or “invalid”.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-applicationpem-certificate-chain" title="Media Type: application/pem-certificate-chain">

<t>A file of this type contains one or more certificates encoded with
the PEM textual encoding, according to <xref target="RFC7468"/>.  The
textual encoding of certificates in this file MUST use the strict
encoding and MUST NOT include explanatory text.  The ABNF for this
format is as follows, where <spanx style="verb">stricttextualmsg</spanx> and <spanx style="verb">eol</spanx> are as
defined in Section 3 of RFC 7468:</t>

<figure><artwork><![CDATA[
certchain = stricttextualmsg *(eol stricttextualmsg)
]]></artwork></figure>

<t>In order to provide easy interoperation with TLS, the first
certificate MUST be an end-entity certificate. Each following certificate
SHOULD directly certify the one preceding it. Because certificate validation
requires that trust anchors be distributed independently, a certificate
that represents a trust anchor MAY be omitted from the chain, provided
that supported peers are known to possess any omitted certificates.</t>

<t>The following has been registered in the “Media Types” registry:</t>

<t>Type name: application</t>

<t>Subtype name: pem-certificate-chain</t>

<t>Required parameters: None</t>

<t>Optional parameters: None</t>

<t>Encoding considerations: 7bit</t>

<t>Security considerations: Carries a cryptographic certificate and its associated certificate chain.  This media type carries no active content.</t>

<t>Interoperability considerations: None</t>

<t>Published specification: RFC 8555</t>

<t>Applications that use this media type: ACME clients and servers, HTTP servers, other applications that need to be configured with a certificate chain</t>

<t>Additional information:</t>

<figure><artwork><![CDATA[
Deprecated alias names for this type: n/a
Magic number(s): n/a
File extension(s): .pem
Macintosh file type code(s): n/a
]]></artwork></figure>

<t>Person &amp; email address to contact for further information: See Authors’ Addresses section.</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: n/a</t>

<t>Author: See Authors’ Addresses section.</t>

<t>Change controller: IETF &lt;iesg@ietf.org&gt;</t>

</section>
<section anchor="well-known-uri-for-the-http-challenge" title="Well-Known URI for the HTTP Challenge">

<t>The following value has been registered in the “Well-Known URIs” registry
(using the template from <xref target="RFC5785"/>):</t>

<t>URI suffix: acme-challenge</t>

<t>Change controller: IETF</t>

<t>Specification document(s): RFC 8555, <xref target="http-challenge"/></t>

<t>Related information: N/A</t>

</section>
<section anchor="replay-nonce-http-header" title="Replay-Nonce HTTP Header">

<t>The following value has been registered in the “Message Headers”
registry:</t>

<texttable>
      <ttcol align='left'>Header Field Name</ttcol>
      <ttcol align='left'>Protocol</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Replay-Nonce</c>
      <c>http</c>
      <c>standard</c>
      <c>RFC 8555, <xref target="replay-nonce"/></c>
</texttable>

</section>
<section anchor="url-jws-header-parameter" title="&quot;url&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “url”</t>
  <t>Header Parameter Description: URL</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="url-url-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="nonce-jws-header-parameter" title="&quot;nonce&quot; JWS Header Parameter">

<t>The following value has been registered in the “JSON Web Signature and
Encryption Header Parameters” registry:</t>

<t><list style="symbols">
  <t>Header Parameter Name: “nonce”</t>
  <t>Header Parameter Description: Nonce</t>
  <t>Header Parameter Usage Location(s): JWE, JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): RFC 8555, <xref target="nonce-nonce-jws-header-parameter"/></t>
</list></t>

</section>
<section anchor="acme-urn-space" title="URN Sub-namespace for ACME (urn:ietf:params:acme)">

<t>The following value has been registered in the “IETF URN Sub-namespace for
Registered Protocol Parameter Identifiers” registry, following the
template in <xref target="RFC3553"/>:</t>

<t><list style="hanging">
  <t hangText='Registry name:'>
  acme</t>
  <t hangText='Specification:'>
  RFC 8555</t>
  <t hangText='Repository:'>
  http://www.iana.org/assignments/acme</t>
  <t hangText='Index value:'>
  No transformation needed.</t>
</list></t>

</section>
<section anchor="new-registries" title="New Registries">

<t>IANA has created the following registries:</t>

<t><list style="numbers">
  <t>ACME Account Object Fields (<xref target="iana-account"/>)</t>
  <t>ACME Order Object Fields (<xref target="iana-order"/>)</t>
  <t>ACME Authorization Object Fields (<xref target="iana-authz"/>)</t>
  <t>ACME Error Types (<xref target="iana-error"/>)</t>
  <t>ACME Resource Types (<xref target="iana-resource"/>)</t>
  <t>ACME Directory Metadata Fields (<xref target="iana-meta"/>)</t>
  <t>ACME Identifier Types (<xref target="iana-identifier"/>)</t>
  <t>ACME Validation Methods (<xref target="iana-validation"/>)</t>
</list></t>

<t>All of these registries are under a heading of “Automated Certificate Management
Environment (ACME) Protocol” and are administered under a Specification
Required policy <xref target="RFC8126"/>.</t>

<section anchor="iana-account" title="Fields in Account Objects">

<t>The “ACME Account Object Fields” registry lists field names that are defined
for use in ACME account objects.  Fields marked as “configurable” may be included in a
newAccount request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Requests: Either the value “none” or a list of types of requests
where the field is allowed in a request object, taken from the
following values:
  <list style="symbols">
      <t>“new” - Requests to the “newAccount” URL</t>
      <t>“account” - Requests to an account URL</t>
    </list></t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="account-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Requests</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>contact</c>
      <c>array of string</c>
      <c>new, account</c>
      <c>RFC 8555</c>
      <c>externalAccountBinding</c>
      <c>object</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>termsOfServiceAgreed</c>
      <c>boolean</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>onlyReturnExisting</c>
      <c>boolean</c>
      <c>new</c>
      <c>RFC 8555</c>
      <c>orders</c>
      <c>string</c>
      <c>none</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-order" title="Fields in Order Objects">

<t>The “ACME Order Object Fields” registry lists field names that are defined
for use in ACME order objects.  Fields marked as “configurable” may be included in a
newOrder request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="order-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>identifiers</c>
      <c>array of object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notBefore</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>notAfter</c>
      <c>string</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>error</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>authorizations</c>
      <c>array of string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>finalize</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>certificate</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-authz" title="Fields in Authorization Objects">

<t>The “ACME Authorization Object Fields” registry lists field names that are 
defined for use in ACME authorization objects.  Fields marked as
“configurable” may be included in a newAuthz request.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Configurable: Boolean indicating whether the server should accept
values provided by the client</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="authorization-objects"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Configurable</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>identifier</c>
      <c>object</c>
      <c>true</c>
      <c>RFC 8555</c>
      <c>status</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>expires</c>
      <c>string</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>challenges</c>
      <c>array of object</c>
      <c>false</c>
      <c>RFC 8555</c>
      <c>wildcard</c>
      <c>boolean</c>
      <c>false</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-error" title="Error Types">

<t>The “ACME Error Types” registry lists values that are used within URN
values that are provided in the “type” field of problem documents in ACME.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Type: The label to be included in the URN for this error, following
“urn:ietf:params:acme:error:”</t>
  <t>Description: A human-readable description of the error</t>
  <t>Reference: Where the error is defined</t>
</list></t>

<t>Initial contents: The types and descriptions in the table in <xref target="errors"/> above,
with the Reference field set to point to this specification.</t>

</section>
<section anchor="iana-resource" title="Resource Types">

<t>The “ACME Resource Types” registry lists the types of resources that ACME
servers may list in their directory objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The value to be used as a field name in the directory object</t>
  <t>Resource type: The type of resource labeled by the field</t>
  <t>Reference: Where the resource type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Resource Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>newNonce</c>
      <c>New nonce</c>
      <c>RFC 8555</c>
      <c>newAccount</c>
      <c>New account</c>
      <c>RFC 8555</c>
      <c>newOrder</c>
      <c>New order</c>
      <c>RFC 8555</c>
      <c>newAuthz</c>
      <c>New authorization</c>
      <c>RFC 8555</c>
      <c>revokeCert</c>
      <c>Revoke certificate</c>
      <c>RFC 8555</c>
      <c>keyChange</c>
      <c>Key change</c>
      <c>RFC 8555</c>
      <c>meta</c>
      <c>Metadata object</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-meta" title="Fields in the &quot;meta&quot; Object within a Directory Object">

<t>The “ACME Directory Metadata Fields” registry lists field names that are
defined for use in the JSON object included in the “meta” field of an ACME 
directory object.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Field name: The string to be used as a field name in the JSON object</t>
  <t>Field type: The type of value to be provided, e.g., string, boolean, array of
string</t>
  <t>Reference: Where this field is defined</t>
</list></t>

<t>Initial contents: The fields and descriptions defined in <xref target="directory"/>.</t>

<texttable>
      <ttcol align='left'>Field Name</ttcol>
      <ttcol align='left'>Field Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>termsOfService</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>website</c>
      <c>string</c>
      <c>RFC 8555</c>
      <c>caaIdentities</c>
      <c>array of string</c>
      <c>RFC 8555</c>
      <c>externalAccountRequired</c>
      <c>boolean</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-identifier" title="Identifier Types">

<t>The “ACME Identifier Types” registry lists the types of identifiers that
can be present in ACME authorization objects.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The value to be put in the “type” field of the identifier object</t>
  <t>Reference: Where the identifier type is defined</t>
</list></t>

<t>Initial contents:</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>dns</c>
      <c>RFC 8555</c>
</texttable>

</section>
<section anchor="iana-validation" title="Validation Methods">

<t>The “ACME Validation Methods” registry lists identifiers for the ways that
CAs can validate control of identifiers.  Each method’s entry must specify
whether it corresponds to an ACME challenge type.  The “Identifier Type” field
must be contained in the Label column of the “ACME Identifier Types” registry.</t>

<t>Template:</t>

<t><list style="symbols">
  <t>Label: The identifier for this validation method</t>
  <t>Identifier Type: The type of identifier that this method applies to</t>
  <t>ACME: “Y” if the validation method corresponds to an ACME challenge type;
“N” otherwise</t>
  <t>Reference: Where the validation method is defined</t>
</list></t>

<t>This registry may also contain reserved entries (e.g., to avoid
collisions).  Such entries should have the “ACME” field set to “N”
and the “Identifier Type” set to “RESERVED”.</t>

<t>Initial Contents</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Identifier Type</ttcol>
      <ttcol align='left'>ACME</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>http-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>dns-01</c>
      <c>dns</c>
      <c>Y</c>
      <c>RFC 8555</c>
      <c>tls-sni-01</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
      <c>tls-sni-02</c>
      <c>RESERVED</c>
      <c>N</c>
      <c>RFC 8555</c>
</texttable>

<t>When evaluating a request for an assignment in this registry, the designated
expert should ensure that the method being registered has a clear,
interoperable definition and does not overlap with existing validation methods.
That is, it should not be possible for a client and server to follow the
same set of actions to fulfill two different validation methods.</t>

<t>The values “tls-sni-01” and “tls-sni-02” are reserved because they
were used in pre-RFC versions of this specification to denote
validation methods that were removed because they were found not to be secure in some cases.</t>

<t>Validation methods do not have to be compatible with ACME in order to be
registered.  For example, a CA might wish to register a validation method
to support its use with the ACME extensions to CAA
<xref target="I-D.ietf-acme-caa"/>.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>ACME is a protocol for managing certificates that attest to identifier/key
bindings.  Thus, the foremost security goal of ACME is to ensure the integrity of
this process, i.e., to ensure that the bindings attested by certificates are
correct and that only authorized entities can manage certificates.  ACME
identifies clients by their account keys, so this overall goal breaks down into
two more precise goals:</t>

<t><list style="numbers">
  <t>Only an entity that controls an identifier can get an authorization for that
identifier</t>
  <t>Once authorized, an account key’s authorizations cannot be improperly
used by another account</t>
</list></t>

<t>In this section, we discuss the threat model that underlies ACME and the ways
that ACME achieves these security goals within that threat model.  We also
discuss the denial-of-service risks that ACME servers face, and a few other
miscellaneous considerations.</t>

<section anchor="threat-model" title="Threat Model">

<t>As a service on the Internet, ACME broadly exists within the Internet threat
model <xref target="RFC3552"/>.  In analyzing ACME, it is useful to think of an ACME server
interacting with other Internet hosts along two “channels”:</t>

<t><list style="symbols">
  <t>An ACME channel, over which the ACME HTTPS requests are exchanged</t>
  <t>A validation channel, over which the ACME server performs additional requests
to validate a client’s control of an identifier</t>
</list></t>

<figure title="Communications Channels Used by ACME"><artwork><![CDATA[
+------------+
|    ACME    |     ACME Channel
|   Client   |--------------------+
+------------+                    |
                                  V
                            +------------+
                            |    ACME    |
                            |   Server   |
                            +------------+
+------------+                    |
| Validation |<-------------------+
|   Server   |  Validation Channel
+------------+
]]></artwork></figure>

<t>In practice, the risks to these channels are not entirely separate, but they are
different in most cases.  Each channel, for example, uses a
different communications pattern: the ACME channel will comprise inbound HTTPS
connections to the ACME server and the validation channel outbound HTTP or DNS
requests.</t>

<t>Broadly speaking, ACME aims to be secure against active and passive attackers on
any individual channel.  Some vulnerabilities arise (noted below) when an
attacker can exploit both the ACME channel and one of the others.</t>

<t>On the ACME channel, in addition to network-layer attackers, we also need to
account for man-in-the-middle (MitM) attacks at the application layer and for
abusive use of the protocol itself.  Protection against application-layer MitM
addresses potential attackers such as Content Distribution Networks (CDNs) and
middleboxes with a TLS MitM function.  Preventing abusive use of ACME means
ensuring that an attacker with access to the validation channel can’t obtain
illegitimate authorization by acting as an ACME client (legitimately, in terms
of the protocol).</t>

<t>ACME does not protect against other types of abuse by a MitM on the ACME channel.
For example, such an attacker could send a bogus “badSignatureAlgorithm”
error response to downgrade a client to the lowest-quality signature algorithm that
the server supports.  A MitM that is present on all connections (such as a 
CDN) can cause denial-of-service conditions in a variety of ways.</t>

</section>
<section anchor="integrity-of-authorizations" title="Integrity of Authorizations">

<t>ACME allows anyone to request challenges for an identifier by registering an
account key and sending a newOrder request using that account key.  The
integrity of the authorization process thus depends on the identifier validation
challenges to ensure that the challenge can only be completed by someone who
both (1) holds the private key of the account key pair and (2) controls the
identifier in question.</t>

<t>Validation responses need to be bound to an account key pair in order to avoid
situations where a MitM on ACME HTTPS requests can switch out a legitimate domain holder’s
account key for one of his choosing.  Such MitMs can arise, for
example, if a CA uses a CDN or third-party reverse proxy in front of
its ACME interface.  An attack by such an MitM could have the
following form:</t>

<t><list style="numbers">
  <t>Legitimate domain holder registers account key pair A</t>
  <t>MitM registers account key pair B</t>
  <t>Legitimate domain holder sends a newOrder request signed using account key A</t>
  <t>MitM suppresses the legitimate request but sends the same request signed
using account key B</t>
  <t>ACME server issues challenges and MitM forwards them to the legitimate domain
holder</t>
  <t>Legitimate domain holder provisions the validation response</t>
  <t>ACME server performs validation query and sees the response provisioned by the
legitimate domain holder</t>
  <t>Because the challenges were issued in response to a message signed with account key
B, the ACME server grants authorization to account key B (the MitM) instead of
account key A (the legitimate domain holder)</t>
</list></t>

<figure title="Man-in-the-Middle Attack Exploiting a Validation Method without
Account Key Binding"><artwork><![CDATA[
Domain                                         ACME
Holder                  MitM                  Server
  |                      |                      |
  | newAccount(A)        |                      |
  |--------------------->|--------------------->|
  |                      |                      |
  |                      | newAccount(B)        |
  |                      |--------------------->|
  | newOrder(domain, A)  |                      | 
  |--------------------->|                      |
  |                      | newOrder(domain, B)  | 
  |                      |--------------------->|
  |                      |                      |
  |   authz, challenges  |   authz, challenges  |
  |<---------------------|<---------------------|
  |                      |                      |
  | response(chall, A)   | response(chall, B)   |
  |--------------------->|--------------------->|
  |                      |                      |
  |  validation request  |                      |
  |<--------------------------------------------|
  |                      |                      |
  | validation response  |                      |
  |-------------------------------------------->|
  |                      |                      |
  |                      |                      | Considers challenge
  |                      |                      | fulfilled by B
  |                      |                      |
]]></artwork></figure>

<t>All of the challenges defined in this document have a binding between the account private key and
the validation query made by the server, via the key authorization. The key
authorization reflects the account public key and is provided to the server in
the validation response over the validation channel.</t>

<t>The association of challenges to identifiers is typically done by requiring the
client to perform some action that only someone who effectively controls the
identifier can perform.  For the challenges in this document, the actions are as follows:</t>

<t><list style="symbols">
  <t>HTTP: Provision files under .well-known on a web server for the domain</t>
  <t>DNS: Provision DNS resource records for the domain</t>
</list></t>

<t>There are several ways that these assumptions can be violated, both by
misconfiguration and by attacks.  For example, on a web server that allows
non-administrative users to write to .well-known, any user can claim to own the
web server’s hostname by responding to an HTTP challenge.  Similarly, if
a server that can be used for ACME
validation is compromised by a malicious actor, then that malicious actor can
use that access to obtain certificates via ACME.</t>

<t>The use of hosting providers is a particular risk for ACME validation.  If the
owner of the domain has outsourced operation of DNS or web services to a hosting
provider, there is nothing that can be done against tampering by the hosting
provider.  As far as the outside world is concerned, the zone or website
provided by the hosting provider is the real thing.</t>

<t>More limited forms of delegation can also lead to an unintended party gaining
the ability to successfully complete a validation transaction.  For example,
suppose an ACME server follows HTTP redirects in HTTP validation and a
website operator provisions a catch-all redirect rule that redirects requests
for unknown resources to a different domain.  Then the target of the redirect
could use that to get a certificate through HTTP validation since the
validation path will not be known to the primary server.</t>

<t>The DNS is a common point of vulnerability for all of these challenges.  An
entity that can provision false DNS records for a domain can attack the DNS
challenge directly and can provision false A/AAAA records to direct the ACME
server to send its HTTP validation query to a remote server of the attacker’s
choosing.  There are a few different mitigations that ACME servers
can apply:</t>

<t><list style="symbols">
  <t>Always querying the DNS using a DNSSEC-validating resolver (enhancing
security for zones that are DNSSEC-enabled)</t>
  <t>Querying the DNS from multiple vantage points to address local attackers</t>
  <t>Applying mitigations against DNS off-path attackers, e.g., adding entropy to
requests <xref target="I-D.vixie-dnsext-dns0x20"/> or only using TCP</t>
</list></t>

<t>Given these considerations, the ACME validation process makes it impossible for
any attacker on the ACME channel or a passive attacker on the validation
channel to hijack the authorization process to authorize a key of the attacker’s
choice.</t>

<t>An attacker that can only see the ACME channel would need to convince the
validation server to provide a response that would authorize the attacker’s
account key, but this is prevented by binding the validation response to the
account key used to request challenges.  A passive attacker on the validation
channel can observe the correct validation response and even replay it, but that
response can only be used with the account key for which it was generated.</t>

<t>An active attacker on the validation channel can subvert the ACME process, by
performing normal ACME transactions and providing a validation response for his
own account key.  The risks due to hosting providers noted above are a
particular case.</t>

<t>Attackers can also exploit vulnerabilities in Internet routing
protocols to gain access to the validation channel (see, e.g.,
<xref target="RFC7132"/>).  In order to make such attacks more difficult, it is
RECOMMENDED that the server perform DNS queries and make HTTP
connections from multiple points in the network.  Since routing
attacks are often localized or dependent on the position of the
attacker, forcing the attacker to attack multiple points (the
server’s validation vantage points) or a specific point (the DNS / HTTP server) makes it more difficult to subvert ACME validation
using attacks on routing.</t>

</section>
<section anchor="denial-of-service-considerations" title="Denial-of-Service Considerations">

<t>As a protocol run over HTTPS, standard considerations for TCP-based and
HTTP-based DoS mitigation also apply to ACME.</t>

<t>At the application layer, ACME requires the server to perform a few potentially
expensive operations.  Identifier validation transactions require the ACME
server to make outbound connections to potentially attacker-controlled servers,
and certificate issuance can require interactions with cryptographic hardware.</t>

<t>In addition, an attacker can also cause the ACME server to send validation
requests to a domain of its choosing by submitting authorization requests for
the victim domain.</t>

<t>All of these attacks can be mitigated by the application of appropriate rate
limits.  Issues closer to the front end, like POST body validation, can be
addressed using HTTP request limiting.  For validation and certificate requests,
there are other identifiers on which rate limits can be keyed.  For example, the
server might limit the rate at which any individual account key can issue
certificates or the rate at which validation can be requested within a given
subtree of the DNS.  And in order to prevent attackers from circumventing these
limits simply by minting new accounts, servers would need to limit the rate at
which accounts can be registered.</t>

</section>
<section anchor="server-side-request-forgery" title="Server-Side Request Forgery">

<t>Server-Side Request Forgery (SSRF) attacks can arise when an attacker can cause
a server to perform HTTP requests to an attacker-chosen URL.  In the ACME HTTP
challenge validation process, the ACME server performs an HTTP GET request to a
URL in which the attacker can choose the domain.  This request is made before
the server has verified that the client controls the domain, so any client can
cause a query to any domain.</t>

<t>Some ACME server implementations include information from the validation server’s
response (in order to facilitate debugging).  Such implementations enable an
attacker to extract this information from any web server that is accessible to
the ACME server, even if it is not accessible to the ACME client.
For example, the ACME server might be able to access servers behind
a firewall that would prevent access by the ACME client.</t>

<t>It might seem that the risk of SSRF through this channel is limited by the fact
that the attacker can only control the domain of the URL, not the path.
However, if the attacker first sets the domain to one they control, then they
can send the server an HTTP redirect (e.g., a 302 response) which will cause the
server to query an arbitrary URL.</t>

<t>In order to further limit the SSRF risk, ACME server operators should ensure
that validation queries can only be sent to servers on the public Internet, and
not, say, web services within the server operator’s internal network.  Since the
attacker could make requests to these public servers himself, he can’t gain
anything extra through an SSRF attack on ACME aside from a layer of
anonymization.</t>

</section>
<section anchor="ca-policy-considerations" title="CA Policy Considerations">

<t>The controls on issuance enabled by ACME are focused on validating that a
certificate applicant controls the identifier he claims.  Before issuing a
certificate, however, there are many other checks that a CA might need to
perform, for example:</t>

<t><list style="symbols">
  <t>Has the client agreed to a subscriber agreement?</t>
  <t>Is the claimed identifier syntactically valid?</t>
  <t>For domain names:
  <list style="symbols">
      <t>If the leftmost label is a ‘*’, then have the appropriate checks been
applied?</t>
      <t>Is the name on the Public Suffix List?</t>
      <t>Is the name a high-value name?</t>
      <t>Is the name a known phishing domain?</t>
    </list></t>
  <t>Is the key in the CSR sufficiently strong?</t>
  <t>Is the CSR signed with an acceptable algorithm?</t>
  <t>Has issuance been authorized or forbidden by a Certificate Authority
Authorization (CAA) record (<xref target="RFC6844"/>)?</t>
</list></t>

<t>CAs that use ACME to automate issuance will need to ensure that their servers
perform all necessary checks before issuing.</t>

<t>CAs using ACME to allow clients to agree to terms of service should keep in mind
that ACME clients can automate this agreement, possibly not involving a human
user.</t>

<t>ACME does not specify how the server constructs the URLs that it
uses to address resources.  If the server operator uses URLs that
are predictable to third parties, this can leak information about
what URLs exist on the server, since an attacker can probe for
whether a POST-as-GET request to the URL returns 404 (Not Found) or
401 (Unauthorized).</t>

<t>For example, suppose that the CA uses highly structured URLs with
guessable fields:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/:accountID</t>
  <t>Orders: https://example.com/:accountID/:domainName</t>
  <t>Authorizations: https://example.com/:accountID/:domainName</t>
  <t>Certificates: https://example.com/:accountID/:domainName</t>
</list></t>

<t>Under that scheme, an attacker could probe for which domain names are
associated with which accounts, which may allow correlation of ownership
between domain names, if the CA does not otherwise permit it.</t>

<t>To avoid leaking these correlations, CAs SHOULD assign URLs with an
unpredictable component.
For example, a CA might assign URLs for each resource type from an
independent namespace, using unpredictable IDs for each resource:</t>

<t><list style="symbols">
  <t>Accounts: https://example.com/acct/:accountID</t>
  <t>Orders: https://example.com/order/:orderID</t>
  <t>Authorizations: https://example.com/authz/:authorizationID</t>
  <t>Certificates: https://example.com/cert/:certID</t>
</list></t>

<t>Such a scheme would leak only the type of resource, hiding the
additional correlations revealed in the example above.</t>

</section>
</section>
<section anchor="operational-considerations" title="Operational Considerations">

<t>There are certain factors that arise in operational reality that operators of
ACME-based CAs will need to keep in mind when configuring their services.
See the subsections below for examples.</t>

<section anchor="key-selection" title="Key Selection">

<t>ACME relies on two different classes of key pair:</t>

<t><list style="symbols">
  <t>Account key pairs, which are used to authenticate account holders</t>
  <t>Certificate key pairs, which are used to sign and verify CSRs (and whose
public keys are included in certificates)</t>
</list></t>

<t>Compromise of the private key of an account key pair has more serious consequences than
compromise of a private key corresponding to a certificate.  While
the compromise of a certificate key pair allows the attacker to impersonate the
entities named in the certificate for the lifetime of the certificate, the
compromise of an account key pair allows the attacker to take full control of
the victim’s ACME account and take any action that the legitimate
account holder could take within the scope of ACME:</t>

<t><list style="numbers">
  <t>Issuing certificates using existing authorizations</t>
  <t>Revoking existing certificates</t>
  <t>Accessing and changing account information (e.g., contacts)</t>
  <t>Changing the account key pair for the account, locking out the
legitimate account holder</t>
</list></t>

<t>For this reason, it is RECOMMENDED that each account key pair be
used only for authentication of a single ACME account.  For example,
the public key of an account key pair MUST NOT be included in a
certificate.  If an ACME client receives a request from a user for
account creation or key rollover using an account key that the
client knows to be used elsewhere, then the client MUST return an
error.  Clients MUST generate a fresh account key for every account
creation or rollover operation.  Note that given the requirements of
<xref target="finding-an-account-url-given-a-key"/>, servers will not create
accounts with reused keys anyway.</t>

<t>ACME clients and servers MUST verify that a CSR submitted in a finalize request does not contain a
public key for any known account key pair.  In particular, when a server
receives a finalize request, it MUST verify that the public key in a CSR is not
the same as the public key of the account key pair used to authenticate that
request.  This assures that vulnerabilities in the protocols with which the
certificate is used (e.g., signing oracles in TLS <xref target="JSS15"></xref>) do not result in 
compromise of the ACME account. Because ACME accounts are uniquely identified by
their account key pair (see <xref target="finding-an-account-url-given-a-key"/>), the server
MUST not allow account key pair reuse across multiple accounts.</t>

</section>
<section anchor="dns-security" title="DNS Security">

<t>As noted above, DNS forgery attacks against the ACME server can result in the
server making incorrect decisions about domain control and thus mis-issuing
certificates. Servers SHOULD perform DNS queries over TCP, which provides better
resistance to some forgery attacks than DNS over UDP.</t>

<t>An ACME-based CA will often need to make DNS queries, e.g., to validate control
of DNS names.  Because the security of such validations ultimately depends on
the authenticity of DNS data, every possible precaution should be taken to
secure DNS queries done by the CA. Therefore, it is RECOMMENDED that ACME-based
CAs make all DNS queries via DNSSEC-validating stub or recursive resolvers. This
provides additional protection to domains that choose to make use of DNSSEC.</t>

<t>An ACME-based CA must only use a resolver if it trusts the resolver and every
component of the network route by which it is accessed. Therefore, it is
RECOMMENDED that ACME-based CAs operate their own DNSSEC-validating resolvers
within their trusted network and use these resolvers both for CAA record
lookups and all record lookups in furtherance of a challenge scheme (A, AAAA,
TXT, etc.).</t>

</section>
<section anchor="token-entropy" title="Token Entropy">

<t>The http-01 and dns-01 validation methods mandate the use of
a random token value to uniquely identify the challenge. The value of the token
is required to contain at least 128 bits of entropy for the following security
properties. First, the ACME client should not be able to influence the ACME
server’s choice of token as this may allow an attacker to reuse a domain owner’s
previous challenge responses for a new validation request. Second, the entropy
requirement makes it more difficult for ACME clients to implement a “naive”
validation server that automatically replies to challenges without being 
configured per challenge.</t>

</section>
<section anchor="malformed-certificate-chains" title="Malformed Certificate Chains">

<t>ACME provides certificate chains in the widely used format known colloquially
as PEM (though it may diverge from the actual Privacy Enhanced Mail
specification <xref target="RFC1421"/>, as noted in <xref target="RFC7468"/>). Some current software
will allow the configuration of a private key and a certificate in one PEM
file by concatenating the textual encodings of the two objects. In the context
of ACME, such software might be vulnerable to key replacement attacks. A
malicious ACME server could cause a client to use a private key of its choosing
by including the key in the PEM file returned in response to a query for a
certificate URL.</t>

<t>When processing a file of type “application/pem-certificate-chain”, a client
SHOULD verify that the file contains only encoded certificates.  If anything
other than a certificate is found (i.e., if the string “-----BEGIN” is ever
followed by anything other than “CERTIFICATE”), then the client MUST reject the
file as invalid.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>In addition to the editors listed on the front page, this document has benefited
from contributions from a broad set of contributors, all the way back to its
inception.</t>

<t><list style="symbols">
  <t>Andrew Ayer, SSLMate</t>
  <t>Karthik Bhargavan, INRIA</t>
  <t>Peter Eckersley, EFF</t>
  <t>Alex Halderman, University of Michigan</t>
  <t>Sophie Herold, Hemio</t>
  <t>Tim Hollebeek, DigiCert</t>
  <t>Eric Rescorla, Mozilla</t>
  <t>Seth Schoen, EFF</t>
  <t>Roland Shoemaker, Let’s Encrypt</t>
  <t>Rob Stradling, Sectigo</t>
  <t>Martin Thomson, Mozilla</t>
  <t>Jakub Warmuz, University of Oxford</t>
</list></t>

<t>This document draws on many concepts established by Eric Rescorla’s “Automated
Certificate Issuance Protocol” draft.  Martin Thomson provided helpful guidance
in the use of HTTP.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="FIPS180-4" target="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
  <front>
    <title>NIST FIPS 180-4, Secure Hash Standard</title>
    <author initials="National Institute of Standards and Technology, U.S." surname="Department of Commerce" fullname="NIST">
      <organization></organization>
    </author>
    <date year="2012" month="March"/>
  </front>
</reference>
<reference anchor="JSS15" target="https://dl.acm.org/citation.cfm?id=2813657">
  <front>
    <title>On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption</title>
    <author initials="J." surname="Somorovsky" fullname="Juraj Somorovsky">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="REST" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">
  <front>
    <title>Architectural Styles and the Design of Network-based Software Architectures</title>
    <author initials="R." surname="Fielding" fullname="Roy Thomas Fielding">
      <organization></organization>
    </author>
    <date year="2000"/>
  </front>
</reference>




<reference  anchor="RFC5280" target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'><organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<date year='2008' month='May' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference  anchor="RFC2986" target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC2818" target='https://www.rfc-editor.org/info/rfc2818'>
<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2000' month='May' />
<abstract><t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2818'/>
<seriesInfo name='DOI' value='10.17487/RFC2818'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC3629" target='https://www.rfc-editor.org/info/rfc3629'>
<front>
<title>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='F. Yergeau'><organization /></author>
<date year='2003' month='November' />
<abstract><t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t></abstract>
</front>
<seriesInfo name='STD' value='63'/>
<seriesInfo name='RFC' value='3629'/>
<seriesInfo name='DOI' value='10.17487/RFC3629'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC7797" target='https://www.rfc-editor.org/info/rfc7797'>
<front>
<title>JSON Web Signature (JWS) Unencoded Payload Option</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2016' month='February' />
<abstract><t>JSON Web Signature (JWS) represents the payload of a JWS as a base64url-encoded value and uses this value in the JWS Signature computation.  While this enables arbitrary payloads to be integrity protected, some have described use cases in which the base64url encoding is unnecessary and/or an impediment to adoption, especially when the payload is large and/or detached.  This specification defines a means of accommodating these use cases by defining an option to change the JWS Signing Input computation to not base64url- encode the payload.  This option is intended to broaden the set of use cases for which the use of JWS is a good fit.</t><t>This specification updates RFC 7519 by stating that JSON Web Tokens (JWTs) MUST NOT use the unencoded payload option defined by this specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7797'/>
<seriesInfo name='DOI' value='10.17487/RFC7797'/>
</reference>



<reference  anchor="RFC7518" target='https://www.rfc-editor.org/info/rfc7518'>
<front>
<title>JSON Web Algorithms (JWA)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification registers cryptographic algorithms and identifiers to be used with the JSON Web Signature (JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK) specifications.  It defines several IANA registries for these identifiers.</t></abstract>
</front>
<seriesInfo name='RFC' value='7518'/>
<seriesInfo name='DOI' value='10.17487/RFC7518'/>
</reference>



<reference  anchor="RFC8037" target='https://www.rfc-editor.org/info/rfc8037'>
<front>
<title>CFRG Elliptic Curve Diffie-Hellman (ECDH) and Signatures in JSON Object Signing and Encryption (JOSE)</title>
<author initials='I.' surname='Liusvaara' fullname='I. Liusvaara'><organization /></author>
<date year='2017' month='January' />
<abstract><t>This document defines how to use the Diffie-Hellman algorithms &quot;X25519&quot; and &quot;X448&quot; as well as the signature algorithms &quot;Ed25519&quot; and &quot;Ed448&quot; from the IRTF CFRG elliptic curves work in JSON Object Signing and Encryption (JOSE).</t></abstract>
</front>
<seriesInfo name='RFC' value='8037'/>
<seriesInfo name='DOI' value='10.17487/RFC8037'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7807" target='https://www.rfc-editor.org/info/rfc7807'>
<front>
<title>Problem Details for HTTP APIs</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Wilde' fullname='E. Wilde'><organization /></author>
<date year='2016' month='March' />
<abstract><t>This document defines a &quot;problem detail&quot; as a way to carry machine- readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs.</t></abstract>
</front>
<seriesInfo name='RFC' value='7807'/>
<seriesInfo name='DOI' value='10.17487/RFC7807'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC6844" target='https://www.rfc-editor.org/info/rfc6844'>
<front>
<title>DNS Certification Authority Authorization (CAA) Resource Record</title>
<author initials='P.' surname='Hallam-Baker' fullname='P. Hallam-Baker'><organization /></author>
<author initials='R.' surname='Stradling' fullname='R. Stradling'><organization /></author>
<date year='2013' month='January' />
<abstract><t>The Certification Authority Authorization (CAA) DNS Resource Record allows a DNS domain name holder to specify one or more Certification Authorities (CAs) authorized to issue certificates for that domain. CAA Resource Records allow a public Certification Authority to implement additional controls to reduce the risk of unintended certificate mis-issue.  This document defines the syntax of the CAA record and rules for processing CAA records by certificate issuers. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6844'/>
<seriesInfo name='DOI' value='10.17487/RFC6844'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC5890" target='https://www.rfc-editor.org/info/rfc5890'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<date year='2010' month='August' />
<abstract><t>This document is one of a collection that, together, describe the protocol and usage context for a revision of Internationalized Domain Names for Applications (IDNA), superseding the earlier version.  It describes the document collection and provides definitions and other material that are common to the set.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5890'/>
<seriesInfo name='DOI' value='10.17487/RFC5890'/>
</reference>



<reference  anchor="RFC6068" target='https://www.rfc-editor.org/info/rfc6068'>
<front>
<title>The 'mailto' URI Scheme</title>
<author initials='M.' surname='Duerst' fullname='M. Duerst'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='J.' surname='Zawinski' fullname='J. Zawinski'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document defines the format of Uniform Resource Identifiers (URIs) to identify resources that are reached using Internet mail. It adds better internationalization and compatibility with Internationalized Resource Identifiers (IRIs; RFC 3987) to the previous syntax of 'mailto' URIs (RFC 2368).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6068'/>
<seriesInfo name='DOI' value='10.17487/RFC6068'/>
</reference>



<reference  anchor="RFC2985" target='https://www.rfc-editor.org/info/rfc2985'>
<front>
<title>PKCS #9: Selected Object Classes and Attribute Types Version 2.0</title>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2000' month='November' />
<abstract><t>This memo represents a republication of PKCS #9 v2.0 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from that specification.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2985'/>
<seriesInfo name='DOI' value='10.17487/RFC2985'/>
</reference>



<reference  anchor="RFC2585" target='https://www.rfc-editor.org/info/rfc2585'>
<front>
<title>Internet X.509 Public Key Infrastructure Operational Protocols: FTP and HTTP</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='1999' month='May' />
<abstract><t>The protocol conventions described in this document satisfy some of the operational requirements of the Internet Public Key Infrastructure (PKI).  This document specifies the conventions for using the File Transfer Protocol (FTP) and the Hypertext Transfer Protocol (HTTP) to obtain certificates and certificate revocation lists (CRLs) from PKI repositories.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2585'/>
<seriesInfo name='DOI' value='10.17487/RFC2585'/>
</reference>



<reference  anchor="RFC5751" target='https://www.rfc-editor.org/info/rfc5751'>
<front>
<title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
<author initials='B.' surname='Ramsdell' fullname='B. Ramsdell'><organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<date year='2010' month='January' />
<abstract><t>This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 3.2.  S/MIME provides a consistent way to send and receive secure MIME data.  Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin. Encryption provides data confidentiality.  Compression can be used to reduce data size.  This document obsoletes RFC 3851.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5751'/>
<seriesInfo name='DOI' value='10.17487/RFC5751'/>
</reference>



<reference  anchor="RFC8446" target='https://www.rfc-editor.org/info/rfc8446'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2018' month='August' />
<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t><t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='8446'/>
<seriesInfo name='DOI' value='10.17487/RFC8446'/>
</reference>



<reference  anchor="RFC7638" target='https://www.rfc-editor.org/info/rfc7638'>
<front>
<title>JSON Web Key (JWK) Thumbprint</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This specification defines a method for computing a hash value over a JSON Web Key (JWK).  It defines which fields in a JWK are used in the hash computation, the method of creating a canonical form for those fields, and how to convert the resulting Unicode string into a byte sequence to be hashed.  The resulting hash value can be used for identifying or selecting the key represented by the JWK that is the subject of the thumbprint.</t></abstract>
</front>
<seriesInfo name='RFC' value='7638'/>
<seriesInfo name='DOI' value='10.17487/RFC7638'/>
</reference>



<reference  anchor="RFC4086" target='https://www.rfc-editor.org/info/rfc4086'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'><organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'><organization /></author>
<date year='2005' month='June' />
<abstract><t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts.  However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities.  The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t><t>Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult.  This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities.  It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='106'/>
<seriesInfo name='RFC' value='4086'/>
<seriesInfo name='DOI' value='10.17487/RFC4086'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>



<reference  anchor="RFC7468" target='https://www.rfc-editor.org/info/rfc7468'>
<front>
<title>Textual Encodings of PKIX, PKCS, and CMS Structures</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<author initials='S.' surname='Leonard' fullname='S. Leonard'><organization /></author>
<date year='2015' month='April' />
<abstract><t>This document describes and discusses the textual encodings of the Public-Key Infrastructure X.509 (PKIX), Public-Key Cryptography Standards (PKCS), and Cryptographic Message Syntax (CMS).  The textual encodings are well-known, are implemented by several applications and libraries, and are widely deployed.  This document articulates the de facto rules by which existing implementations operate and defines them so that future implementations can interoperate.</t></abstract>
</front>
<seriesInfo name='RFC' value='7468'/>
<seriesInfo name='DOI' value='10.17487/RFC7468'/>
</reference>



<reference  anchor="RFC8126" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CABFBR" target="https://cabforum.org/baseline-requirements-documents/">
  <front>
    <title>CA/Browser Forum Baseline Requirements</title>
    <author >
      <organization>CA/Browser Forum</organization>
    </author>
    <date year="2018" month="September"/>
  </front>
</reference>




<reference anchor="I-D.ietf-acme-ip">
<front>
<title>ACME IP Identifier Validation Extension</title>

<author initials='R' surname='Shoemaker' fullname='Roland Shoemaker'>
    <organization />
</author>

<date month='February' day='14' year='2019' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificates for IP addresses.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-ip-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-ip-05.txt' />
</reference>



<reference anchor="I-D.ietf-acme-telephone">
<front>
<title>ACME Identifiers and Challenges for Telephone Numbers</title>

<author initials='J' surname='Peterson' fullname='Jon Peterson'>
    <organization />
</author>

<author initials='R' surname='Barnes' fullname='Richard Barnes'>
    <organization />
</author>

<date month='October' day='30' year='2017' />

<abstract><t>This document specifies identifiers and challenges required to enable the Automated Certificate Management Environment (ACME) to issue certificate for telephonoe numbers.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-telephone-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-telephone-01.txt' />
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>



<reference anchor="W3C.REC-cors-20140116"
           target='http://www.w3.org/TR/2014/REC-cors-20140116'>
<front>
<title>Cross-Origin Resource Sharing</title>

<author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
    <organization />
</author>

<date month='January' day='16' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-cors-20140116' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-cors-20140116' />
</reference>



<reference  anchor="RFC5785" target='https://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor="RFC3553" target='https://www.rfc-editor.org/info/rfc3553'>
<front>
<title>An IETF URN Sub-namespace for Registered Protocol Parameters</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<date year='2003' month='June' />
<abstract><t>This document describes a new sub-delegation for the 'ietf' URN namespace for registered protocol items.  The 'ietf' URN namespace is defined in RFC 2648 as a root for persistent URIs that refer to IETF- defined resources.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='73'/>
<seriesInfo name='RFC' value='3553'/>
<seriesInfo name='DOI' value='10.17487/RFC3553'/>
</reference>



<reference anchor="I-D.ietf-acme-caa">
<front>
<title>CAA Record Extensions for Account URI and ACME Method Binding</title>

<author initials='H' surname='Landau' fullname='Hugo Landau'>
    <organization />
</author>

<date month='January' day='15' year='2019' />

<abstract><t>The CAA DNS record allows a domain to communicate issuance policy to CAs, but only allows a domain to define policy with CA-level granularity.  However, the CAA specification also provides facilities for extension to admit more granular, CA-specific policy.  This specification defines two such parameters, one allowing specific accounts of a CA to be identified by URI and one allowing specific methods of domain control validation as defined by the ACME protocol to be required.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-acme-caa-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-acme-caa-06.txt' />
</reference>



<reference  anchor="RFC3552" target='https://www.rfc-editor.org/info/rfc3552'>
<front>
<title>Guidelines for Writing RFC Text on Security Considerations</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='B.' surname='Korver' fullname='B. Korver'><organization /></author>
<date year='2003' month='July' />
<abstract><t>All RFCs are required to have a Security Considerations section. Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.   This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='72'/>
<seriesInfo name='RFC' value='3552'/>
<seriesInfo name='DOI' value='10.17487/RFC3552'/>
</reference>



<reference anchor="I-D.vixie-dnsext-dns0x20">
<front>
<title>Use of Bit 0x20 in DNS Labels to Improve Transaction Identity</title>

<author initials='P' surname='Vixie' fullname='Paul Vixie'>
    <organization />
</author>

<author initials='D' surname='Dagon' fullname='David Dagon'>
    <organization />
</author>

<date month='March' day='18' year='2008' />

<abstract><t>The small (16-bit) size of the DNS transaction ID has made it a frequent target for forgery, with the unhappy result of many cache pollution vulnerabilities demonstrated throughout Internet history. Even with perfectly and unpredictably random transaction ID's, random and birthday attacks are still theoretically feasible.  This document describes a method by which an initiator can improve transaction identity using the 0x20 bit in DNS labels.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-vixie-dnsext-dns0x20-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-vixie-dnsext-dns0x20-00.txt' />
</reference>



<reference  anchor="RFC7132" target='https://www.rfc-editor.org/info/rfc7132'>
<front>
<title>Threat Model for BGP Path Security</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<author initials='A.' surname='Chi' fullname='A. Chi'><organization /></author>
<date year='2014' month='February' />
<abstract><t>This document describes a threat model for the context in which External Border Gateway Protocol (EBGP) path security mechanisms will be developed.  The threat model includes an analysis of the Resource Public Key Infrastructure (RPKI) and focuses on the ability of an Autonomous System (AS) to verify the authenticity of the AS path info received in a BGP update.  We use the term &quot;PATHSEC&quot; to refer to any BGP path security technology that makes use of the RPKI.  PATHSEC will secure BGP, consistent with the inter-AS security focus of the RPKI.</t><t>The document characterizes classes of potential adversaries that are considered to be threats and examines classes of attacks that might be launched against PATHSEC.  It does not revisit attacks against unprotected BGP, as that topic has already been addressed in the BGP-4 standard.  It concludes with a brief discussion of residual vulnerabilities.</t></abstract>
</front>
<seriesInfo name='RFC' value='7132'/>
<seriesInfo name='DOI' value='10.17487/RFC7132'/>
</reference>



<reference  anchor="RFC1421" target='https://www.rfc-editor.org/info/rfc1421'>
<front>
<title>Privacy Enhancement for Internet Electronic Mail: Part I: Message Encryption and Authentication Procedures</title>
<author initials='J.' surname='Linn' fullname='J. Linn'><organization /></author>
<date year='1993' month='February' />
<abstract><t>This document defines message encryption and authentication procedures, in order to provide privacy-enhanced mail (PEM) services for electronic mail transfer in the Internet.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='1421'/>
<seriesInfo name='DOI' value='10.17487/RFC1421'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAGzUblwAA+y9+1obV7Yv+v98ijrq7zuBNJIBYwfTq3stGbBD4lsA20lW
9+kuSSUoW1IpqhJYTrIf67zAebEzrnOOWVUC7KTX2r335ut2QKqa9znu4ze6
3a6r8mqSHSSd/rIqpmmVD5PDbFHl43yYVlnyPJ2lF9k0m1XJ8ewqXxQz+n2j
f/j8eLPj0sFgkV0dJPinGxXDWTqFtkaLdFx186wad9PhNON/JtBcWTls9aJY
rA6Sshq562Lx/mJRLOfcRPIW/s5nF8lT/Mzl88VBUi2WZbW7vf1oe9eN4OWD
ZHd751EX/nJllc5Gf08nxQw+XWWlm+cHiUuSqhjy30lSFotqkY1L//dqav8c
FtN5Oqz8t8uB/2RWOPc+W8EIRwfJfw7DmmwlX5+fvzrbSl59e7KVfN97sP3o
b86ly+qyWBy4pAvtJEk+gz5Oe8njdDGjppOE1+Y0H16mi5H9olhcHCSHeTks
6M9smuaTg2QxGfxHPr/qlR+iNr/pJV8X4/E0nXX7s9Eiu7aNf5MOi0Hr99TH
8ZMntod35WX6H9l43IMvoz6Oesnz4SEOcGUaP0pneTaJv6Fmn2XVFyUcj+Fi
Na9sB8P58j8mWVVm/FWjH5jLt2lZZbNoCtOstB9TF69n+VW2KPNqlRTj5Dms
YX6RzqLJjN7TO/+xnMK3vWy0dC6fjYsFnumrDDYmOew/fvL49IDeklN/2L/3
eFFcl9kieVIsllPYljKb5LMsOc1+WuYLOvm8gn6Dk7BntbfpO39G97vbj7iv
dHGRwYm6rKp5eXDv3jAdjPFxXI97A+mwuzAdduEqLem3e25mp/Dk5NXZzv52
dy+axYuTs3P6KqHvtpKzbLhcZMnXaXmZnOElgRPXMglecXxbPqBdeQG9FbN0
kpzMSuhgCVQA1lybKRP4b3KeDS9nxaS4WG0lr3tnveQom6eLimgDPHxYTKfZ
YpjFC7Lb3b7fWBBcj3Ix7M3ysupdFFf35svBBO8ZjKG8N87n/A9NjH7r0q+9
+WgMbX1zdrbzIFqLl7Okusx4BeS4nD+Dhendp4F/9/rkMOlfpDDTKnmbpe/h
EpZw4PIZXOfDsz/sJFc7vQd6mGEMa5ftPB8UCziuF9nCrt453E//Wdt73/x/
/+/iIjkbXl5ns/f2TbgN9tPWd5eL9F1yVkyLRXFVvl/VX4+/qJ+70aQHlJhO
3TCvaIV7w/H03/PRn3f3d+4/fPAVvHZ6fHYeLWh/AZetyoYV9D2BY7CaZHwG
cJmPsjK/mOEiv8gqJOZdPM8jGMm4uk7hCJq3s7Z7JESxWCXnl8B+yuQJ0JgR
sAA7NaCj0cd6ora3247T9fV1Lx+WveUwRzJw73+M5V08WuW9UQ4bvuDp36uK
ee+ymjrnut1ukg7KagHE37lXdAiTb7MV3ILxAijLYklzSJYl8iei+skGcIDv
NxPDG2Bl6BlYArjiSZrMltMBkAdYoPlyMS/gqG05XLhpAecP145e5FtzfQmU
K8lLWllcJrhNchPw6xGsDxxTXLGyl8B6LaGt0Dc+xWubVzkMZOOwX27iucbW
3mYDZFc0OmKoMMCqSICm5uMVPJFWsKVJOp9PaDSOB28mlkyyC2gXKFE2WSWL
bA7bifSJWjcj2wh9mrd7rl/iFKpLmN01DnB2scV/0RB0/PD3CJg5fAP8/+IS
h1BMJnB6ZAnSUXJZDJMpUB9gRuW07LnzS3qJyWUyysrhIh/gPiTzRQGCQDGR
6QG1pmMLbMPPM4F/cLdwLVKWfzIaO7w7BMKAfUYDxAbMvBycpWU6G2a0H1no
Mp2UBf51lcOIknE6zCe8K7iwBfSwiJqZBilrvJzRdMstkEbgOMCVsNsA0lbB
Y+nxmZ3mo9Ekc+4PcFCrRTFa0tvOHdpD+fPP/9fpk8MHu/vbv/7adiToNILk
My1msLt0fHlF9Ahmru30Jb/p9Ll1py/5nNPnbjp97igfj7MFrm+1mme0r9Gt
BZkQj1ky8s+BGDqi5+DYREegGAe5Aic9KJZVvUcUJN9Be7BQnSNeuDfpJB/R
K51k4+jNpmtQjcEKDsoi8dSB94MGLMeLdufKN0SEBIaX4/hJeKBtm2cLHJ4u
xNGbRE+pP9ZIY+L1xyexERDR4WxewqkDwRAv3hVMrMCTNeEL7G/7f7I49TcZ
G49jVlTOjiWtqmw6ryJaYzr6ooSn00kXOMdklMBdgdNWraDFDbrW8D8YSDFH
uknNdV4uQOzLP/LSR0v68s0m3k7XOf4AUuAIno++Pn4T0+ktoLbZIr7s2ONM
Xsaxwx120agbI9Ul8RPqbTp3/AFEGWQSeuztwbB3BLvCjpAApUmZVYHEOaUk
TDFsC34zkRb5gdgjCut3IpcAmDE2evTGxZNP8VjBHxPsfJFkH+DQ5Bm2CotQ
FtMMaDPMYJK/B7HTfZk8zWbZgsYvYtK20JTdR/sPgaZYlfEMuRq8fMqLAqTg
7HSzB40cLisa9BwFdRoffINLXhB1Bh3iGlZsDpQQn34F1BMGfw0dl5f5PD59
5qJjG3B1kG3II2PgGcU1DgHnUYxKEjagxSWzga4QZiDllymwl9kFzAu/KufZ
EGeRzCfpEK8bNYeDgkWCFe7d3g4MKk2OXpzBkRiC5gh3ZwG0al7MUADBzcYW
WWBhCYfnIy2fZsMMb9wNo9y4LObZeDmZrDaJaI6mOYrOsDnFois3dQIvkVrE
XaQj0APhfLeOhfvfUolulsgj+H1e6Rro7nCDukVHsDuTImVREM9lNooPO55Q
ELRh+KYtPHHQGt6OM1lW9zavLunL7MMwmyu790cEVMjJ2AudEeVk7rHQ/lGq
AN7g8BPsFtV5UEGRbYjwQLd9hOIoiwP44JAey8tLmACcJdgcusDY2eUSmLOj
WwIrwkeLyAQKirhXs5Qk4+4knV0sUzoCLC0iE0/Gi2IqK5jAHiHjhxHPHPQy
TUE0BsUvxxEi74fOSfmhYXgCwLcZBrGi61xu8WrbTmAODjlXPlxOKjNMklZS
JC9W0hwjB14YeaaYjUGqFbpBnA3JQjpAmQVIH9zhEserUmmxQDo54i2m5YeD
McU7vUCGCVQtmWUwg53ufVjw5QJ5TVIMKmQaSKH1RMQcnnm+3IYkOb6CZuSG
D5CK4Nx56nA33yMX9msFkpIop/lH6DdIh4mXE+CmFCDcp8NJpgf/Gu4WyIvz
SbHCxXdw3siuQ2vCIhqK9114BFkCLFy5gjlCq4OMFxWOdD67zAdwPLXTj15G
qNLyPfJlNHvRZWqj4VtmAHwFI/lurWw7g3sC61zmA5gPqCfTDHUvXkMx48nx
tdxCZbggQYTLQEu7yGCbUyWeTPNKucVWCXKlqndhZ6NLeQ3XGcUiujb+stAJ
e11mXhPQM+5KeBrY6iLFUwWkDc4r3kdhvGGNkmiTmHdjy/CScGPaMtJBXU2D
CpJ34K2srMKX54t0BmRvUSXP0hU84s0HG+fPzjadys97wOtgX07gLPCIBxmK
PLjBdA8u80kmLGi4DBqP30L4vQjrD9qslapphKol4ru4d7gR0dLGIvUWm03L
5RwHXzo5FkR5oLVlKZshM2dxAfRhusLhlJOIB+8isXlSoDyQIlHacmmr2pYR
uYWpXBQ4Pjp7IsfQcLBrf/DgfRlsTeStkLIIJzp5pVyKtJV/P+ke9YL9OJ+D
iIE7Lnat82ySzS+R45+o/HOaXeVljjuxcXZ+cloXr21flX+blfOWDv0jtN00
J9QUSasbZFZBYpURJSYQVUF8qOq6RWJ0uwyImmO5c1bMuvr6SCVQUQRgpEAe
kYZmo9qGCI+ECzVLJw751hLaHeTM0sdZSjaKjTLLYFL6XFee68pzv/66KdNh
JsHWe21MBVIWVJmgCZu9TK+QGgNlvoD7InRNiBF2tEXTsq2RcoBiPHZV8unA
d0Qi8YekHGazdJEX0hGMDq5VsgKReJA5knb8Yo+CYhwROFj2dtnfngTYTdCU
jwJBeV6MsgmdrZfzjISo5NgLw0iBs+RimdPq4qqQQI3Hm2aCd4CoX+OW4iPA
FfFElm6DSZYIzPs7+7ABKqNDE8zZUiNn1jUROFjpe7LJkJS7AP1woZJbuWVo
oTdatCoMcas19S8v7QCAqC6ZEGPXPJ9I+kad+k3UjeEq3pIwvMyG8PZwkubA
N1lVhlHO8bXMckdndMzU2pOSbte+oacDbyEwdBwsSWw1sZDsMsR68HhaaU3X
yDYEfaPZhMSvBUqKMHYQzOjsppWbZqlegCWs3cKrTsN8AXQdZY8h6VRwaUFA
mHsaLVrhVqScAU1FflrXyGUo3rSRjVhVYl2eJ3mC85hllWFgSNvdDJjwsuoW
Y2B88A5JrDzpK6SOJEq8gstFEiweXFJ+Z8JX8ezC83xGefu3SB2lg1DorZBJ
T0g6hr1EDVU0+4ugHKKc3kVhM9YE8LSzOO/buyYmAqJgloJgsm4kYm7lQTPt
85rqtXLgWF+ls0xK67np7wshPsNJjteeB1/GQ9JD7i9Jza6phhJQguK7ilcU
JVBsoScdx70Zc1VYAeTLKYy5ZJ9JX7QFMQOjAQgmCJ3BgsfCsjeQ0LvXyC1Q
+gTdo8ARVTncGy/asB1gzuJ8TkZ46Q1HvJyPWI0qZMSgDOQXS1YPepuNqUzz
i0tdPlmLaP3mKdPVyEQm9GUO0kLVq20MHhlim6jz4pdiuhiAlI+e4RmrdNEg
kFikQ1lPMevKZZOLmqN2TUSgRc24YY91dN7opzSHVjH0vsDLZy0/jcMyQB8M
MEwVxKPzIBY6FhtIMvbnCwkB0c5BRrZwPGx4UNqNcH7YLWICzIF3SwxyuBLc
vwwahyZv9IBkk+OcjdYlbZu1YzDlM08jG5LLiiYD0PPI3cfPiSfGPI4L+xJv
bbBZlnA6Slhh2GDUpHCzyoYhVXmbWT6XeCWHCdJIzBClNTgAFQbKOwfhHEgg
PQYSBfA73Q89f9DaVZ6yuWQrOXt+tpVk1bD1FsOBKFRBqR9BIoOVXKdRbGrE
wIIqnaNV5iVxlthcVoHQVqK5i10HGy8Pz15tihmG9H2kFXA0Mrzb2aQ0lM+a
Wt9n2bxmr/LOhJRFHFRUh/A4L0kJo8UXR2wiV3HkOl3RhvhOZlm6QPmrTLK0
XNEbRK6VgB32u03bD2oO8v1anvBkuUBdAoUZPrF4pGG/VJzD++BaW5fB6cFG
ExgaLYDvgdQSs74kOUNpcTgBrcrhNxcL71Gj3aVRWp7jpVWiE1NgvrmeRC+D
ulgnjZUNenMVGaXKOUi31qIUG+4cEf4pDlTuN9JwNOeVy6lXsdQAMFIBA/jK
VV7A4SnZRcbS7Tksac7OeRZg38NgMIylTDrPX5+dd7b4v8mLl/T76fF3r09O
j4/w97Ov+8+e+V/4CQd/vHz9TL7H38Kbhy+fPz9+ccQvw6dJ7aPn/R86W2yX
f/nq/OTli/6zDo/eqsViSRgwWV7AtEj+KeMZPz585Xb2VIze2XkESiH/sb/z
1R78gUINS8NEQPlP3oo5iLEsDk4mDrhhDiQCRbYSFfnrWYI6WY9Xq7ou6CAm
QG1Z36ZjgmPsMCXoUB8dPi0d8X9YSkFqNzLH4IIslOiu0w3TutcvKDYLZ6xC
SdKfxRw5XSWLJTKNSIfYwklM/B/IaJHbkMrvhDywQYv5jtylkuV4cXBHqlOS
vFwQZYh6LDHwAy+8tEmNjYqMfEEJn+CsQdYHSzKGqJLJFMxYnlPXagC3ay39
wUBKtt63OyNXjqUDaprknJgJwooLO9b7GVi67EmSjy3/z0sXxo3mgXg/rNe0
VGOjDBatvqRNoJozSzqqc+MNnae5P0zNc5Rf4bLhc2qP0XdI+sQgDNQ/pqBL
wIlCisCqfOicm3ZerhZmy+E21FrspPPzQPMKM1YknmJn046cN3DzmHtIgTwv
ewntXeXZtdhQhK56OeTOt0LUAHWSuW/Sq/QMKAPIoC/J0Zq8KDiiI9n45uzl
i82wEMN0AfrCiCVjq4jv7z4IFIS18p470UsX9A48O9l0QFEvSYUmSuGo5BOp
K3JbSDBYgk/Z/AkMl9nCLJHt3nJeWI2EU6ZdeOpx3G3ynnd7pfGK5TMH9D0L
KgxLJCwAx2c69ovjYRvnC9iA+aX4CtWyoU019yrMhJknnlBzJeMzrMohL0C5
An5aLeTA0fGNhPfUzbJrv04gpPFaAzVnYkCGFha9rIoBK3exyDJv4FtMS7Tn
43hy2JuN8+Jsk1b3HkqtZVkM82Aij+ZC1izx38oXjqwIbCtlitnjCeLG4pHT
dUGZlsUcXRY/+1F0hUXMztarFjlepP/hfyQY6pCf+vQf9rM5aeY/D2UFT8IK
/k2/g6VK+riYeP/8p/2RP/ZHaZXq5+jqZZNj20+Xf/7iPmPE8tOXvXl9+uxO
rfyb9NnSBBMK5xrt/Off7ELAHsBSscFFN7bUaZZ2T34+4BC5P3e0i0M5EZ1f
oZuX7HXxx4uiNC5ydJOJmxJVsgWqpMsF0Lx3yKLJfGQOBBqBmYmkaNkoXMMW
cODcTg9k3ME0p5sZ6ECs+Ip8RfKo2+2Je92a3WaryD8QSEYzosbdx4g8OA3A
Almbol5hyUoaCF8f9N26vV7Sv05FwfNxC6ObPcdMmHgNgMium1PwiLGbqCRd
yEzCzSdLJLJjJCrhCFNAICv2KAzSAQYanyK3Mx5lFGDEsxJWAf3RfFiCUctb
ghzaYoQKoeiTj7KFd+OwYBcT/LwKoklsD3I2HrhBKKZLPJakQKOlYFwsmjIW
2YX8ngM9iSwEMB2OMgo+ZZkGvaeqVcwBRtm0mJHOkjmxs8TmkJqDaT3rSZLH
4kWli0D+evJxhwgsUETp6IthGVhsgS6SUsMhGyFdzvTenNHwsijQeI/ySuxA
lcgbL2XKyaDIgDkanxd5ZDryvcDqEkNC8za5agzfq22rk068Wi9bmk0m0UhJ
cohG4lvEoCwNZxj16IZ4mTvzXsUWg1X0In/hO+gJocJP635hDonSN70pJtg9
vQUnmEZNl8DoyeJgD/KWHddYKEi5joS4EG10e4BRcl7b8Bbpx9VNS1Mkq0g4
r0BZSgchOsBLs/80JvwS5/tPYKSBBZ6qdagf+fL8CE71LH7iKG4Yxr/pYgUH
nH7ylyB+nJ3+U+etP/3h+1lxPclGrEzcYdwxp6qP+9XLs/NuWnafHp/rkfov
mQf+HFrmWH/lt0sw9nqpDoRSzHlBESnvszrjMtcYVE00varsG2wVQTDmaCG8
0XUmxWIJ9zE6+P2uW+2ynTYGdaed697lzPsf3blu4xu4actJywH8fTcuTBK3
DjRiDc+isBTV60YZ0F3VUbIZxdmPJ6D0aLxXAdR7NoI3PId1Pmi6xt+BM86G
ufc4wJ/TdLEKnnKN6RAfLQhINhSm0ghVDomIYmF8GgVawkKnjfiUideQDVu2
rujASq0x0f38c3i+G57vhucx5ETCFEx79TwMYsNLozmHMCO7VpFMNWa7tw83
ldwHkd0dyVk81OSyuMbJlbFkhYuTzYbFyJqCNfMAuNo1cWOVitpXw3DyyEtE
BpzDyxQd5vDdMXaDF9f1ZQasp3ubWqnGJvSikDcIttrYw8ota67jaAU7JG9z
x/gDjAosWROZzZcVGyFG+UXG4fDwkYSjkP164FfBsbkG5/T6/El3HycqE0C5
i2089x/uPvr1114SLoZdU5b61U4chw+hwZNiX6CDfIExydyxWCNIzJeBbWS9
i94Wec74IJO1giJEHAXHnB2enIThyV5+mMs1gdn3uyCIZCBPm3DR5LV8CGJO
f7YiVcKtG0KwplNGBYUXifOfzB2oLEzZOwLf0Xr5tmj3n7PtLATFOYcJfcuZ
puVB29U1hgGlNdMnpddE5tl0wW5MY3/bkt1CQx1HAXsSvPHN27NN2a6vHuw8
gDtY+TwacZcGNa6UID1nAkTwwMRGUBT4XazGREZRtgn6XB0ddxw8iIeWXOPi
O+MsBYpaplHhlLs+fDxE4W0lMCPfeD0ksbB25S+8yo1OdPJn4mWp8u4im09S
soBV7OfZkjhatceqZsJT0VZenz7D7fyDfCzSMoh/xynoGEysxD9ItvhaEHSN
w6v9FRoR9xw1G0yZ0bpukd115bfZb4k1t1o7rI8MdTxaGJD6pXoJDRjUgtJn
ggH9Nje0GyzGcGLgngDVjG0D0r9o7iWzFp6k84ugCg5rIt6O68dOsXmsFZyI
9syDrfCiBFM1Nx1iVuwVEbbH74k/O/Jxm6gS/5ye1brvgxzQSDBV7bo2iiBR
Bk/vD7yz3jzqzKPw9Rfotu9u73wR3tuSKAB9CQ/8F6NZiU+Jo9yafstEHIQS
gM7KF4aDwQkS2gEn5+ef/50u+O4D8dr5sBMREYHIYtKuj4znV9H3Zfsiki0G
Gp/k+7z/gwQ2Cv9BfooHOGE3NgwjTTa2u6fn55sanUiq7Djzgd1+MzxX5QwE
uHLDyXJEtuy2e1lq5CV/0w3fYMglex/Z4MIij/N+YnXki3xDDp5FlpbFzFoK
Z+QjQ/O5LOWMWT2jL+DENKJNnB7QJc20l2gUK68J809alRTv3aLbvyC1PUvJ
0ob2MTIRIVFYjMhsR6FmQpp37+/glaXFs+/o9ss60UJSFB8ecUrg91RPjo0G
kmNfQtmVkqx5kUNMJkhbnD3Q2lSvNlUZEk92hubgbF51n2m2RjT8W2aMI8tm
ZCaYFBhz7sP9k2yxMJynfitCkoqJ6hyoe4CiW4dobyFzFCVPcBSuO1wUZdl9
ucgvYGinEmaTnF1yNMHG4cvTs00vOSrXD00R7xswRIFkZuuywB18e/+wd3p8
2IUJl93d7Z297Z2dh0SKKWSidqVRkKJ9o+a7h2z26/bxrukIo8WUbQQas8yS
zl+/7MCqPM5nqCCIAVZkV+IQBZnnY/IZCbosNOAkHu4tF5Mg/kRBAmfCIh4w
ncG923u4t4/CPG2syXyC2zlGxUjYdoYctU0oMa3uhlZZPJE74MdCbtUUWS9R
FBfJoT2UqHKyD3/x5y+sEKjiLN5tEEGBDByLYEurp0FteqtuaWWR4VKSNOmA
hJJwBEdMFpJlArWd9SOJhKV88XoKXxezNAqvmMq5SgbFaMV9QYvpHDRbyZrO
Fyq5kMvsjgIeb/yWmg+CJC+Oky/KyHe2nE0oxhmp4nVemu0T+6vwRhqgcWej
HMaGcifGzZq/n9ZcpoNfqRgF0805DuQWUU5XDC8/PcszYylUotVp7dj5b1eZ
RzvN+IqZBEYj7cIZh13OUx/ail3olstNSp5MMNUB15EW/wxf8GTKLnu9DYzd
IRVnupxUqNFby0N49vVMr+Mr3unk5dy2/dWjr2BLfYuSKxE1IEwRmviaqUV0
Gm54VXu0j4yyCmTD+LF6+/S85UhheZkOYXrol0knnVx0ko3+5ALDRi6nm2St
+ZIvOFM037ModUkHbkXWoVBIrzXFNyo5hNVKNp73DzeB+0vTrCVSML+XMunE
+wfYUwiUkokbr7EobXDR+4f3vsYmezxyGMUQhrGhpp18tkYG4ceBejYfpnPY
ha+6Xq/QF45zUkQ7767fdzi+gm71t9lqE6feeZ+P4HPCyjjapJgqvZIsi4cQ
GXs3vXBHU+8cn+0+eNgJp84shj8g+5oGJFJGrYXR0Vm/vYVAVOCp3QcPdh51
gC/B3UAoK81lJLbTGS6uOkqh9rfvf0UZQHi2ePoU+UUTFh5GjqulZEtkH+CU
lflV1hMDpBBlpsieQrDvTA/RAGiZeOdm2bX6kkN4kgSWi5EUDX7GDmOCjWj8
kZkW8atUflRKkcpEaPi9xunWQcWhQa41dTgiy5ISRZFIQm9lUmSjoxMU5mTo
rgmbkCifZggGK7yNiYR9uHkiaYgiQHUEU6xxsRwa9M18otVnUQtVvSj4S43d
SGlssAelU+lx8w44Oe8aDudEWdlij11V41aLDI4tGVVYmqSGSw4PRqKb7G1v
JxuPgQQK995k1XE1z/BSzw4wge0Aw/Gm5QHmsR1QOweDdOQ5sCdvGmoG9AEk
xWkwzPIobBALjyYioxS8pk2Vsgm6Eg60j5TYXPCeM3VlaQYFTE5Qw4bR0Dr2
OU1Az/MJajZksgmwO17E9lbHsDUazShJkPxZCxXgMWDoYcYUzYcpyqsOoRbI
TVxyvBPd2vgq8PW52w6623cw0R10t+wgIxIBka1tnM0PxrUT4ui8CZmvGqqS
QkVwUkoOw7z+xIYssazLG0TeSODgtYMr1jllQj0Q1JNpMVpikEVn1uFUGKAB
U7zyYgl9sLPbHeRwVG0bx6ENpkY2YJQTxSUO9VUXnrSUKGqGKT7RZKTb8uHe
3j5skA5QE5kwJNgfEXlVkys8V4Dm6bJH5M7SOQy8nKEBmNwkmg6JljNQtXIU
WJwGNtTiTH0kMVnGjIDo9SAvvLmm8CaBzBT3oaboBHUw6KJ7jhTA6l4UbYB4
KYKpQ1hX7+Bc//Ed7GqHI1dST4H96osEmpc2+uSWs+5vZINeub2dB8nG61mg
As8xlj7B4W6yGoKuVNw+61pVQ2Xy8x/mBcgk8PFFVkUerZrwja4HIca4rHXJ
Ha2aGtQRqTUFAZIkkkJMsrnG/USMlUwhiG+HAAvpwhkHMBKzY8KsCAGTZOCp
BevnPkgfGhs7s5jCkJCpmHYpNGgtV3AxTYFVfk5IJ+jbSEgjz0aBtCQduJCc
RthhqpkGg155ycRunFUUnqScLyBXyDg3WE6lzAsX1C9JU1I1EaawKQdGJyBm
JtxivzU0CeaivOx2wdJBcZVFAD0i+YsBCN9Cg7X7mC2KLtopMcEdRP6KFOjZ
BSfXssxBiQ8scHSkHWVXYogyqprKFpKwRysoV4kYIem/3Eey0engIX6bqXNv
nKmPBT2fQGPMoe6Y8/JyJntOAo6zSwLLZOe0wZbhZUnaNwc2yxxsfJOjYdsT
K19SLpZY0FAPRscaW4d84N9iOUFW+lL3c6txzysMalSLpAQAlzazrUynGFau
4XNp7ST7e4HPWcGqrqyz1dberZB2DKRoWBULDkQHOe0FajxOGzN2V/kAVJet
uk2xJXyjdNJDGUZWqlWYLX2lt5ihda0oKgx/mzNqkTdj1uiRRAlHhhaUPU9U
syIICY6tmrLr1+QT6aSFLFWUzsM2CTRy49fidiBzX/DS+xsrb3KKm27TpLig
rOU40VdOXUc3awE0Ed7ouAnhYAhnYpC5OhaBGjF8oiExppTBJEggmSBq68rN
GBvSTyWjicBjs8zC5OhCl0Xigwspk5mAFdRbEh2OUTYDHompzz7W+6g42zQ2
eT5opaQWUTLXIs/KgOcgmbNiaIuDFpM4FpRYjJNHImfbVsLSjn0Xd5zysQ1j
9j4MMhQi5akKp/5Nydpmn55HsdkSA4FMCW6XoJdqkjfPaeVoIjWjFg2CQBqY
GlLf7BjslwJdEhkA4pP866+c1h7ZqlRqYTkmdWxPkFmS7JpV/ujkiyQYfPgZ
vV+NN9i0VBJzlHEH20jwnzExaFjvYrrKwbYzJ4SdgQAkWVV2rE7oCPlZOM6a
OcFm1RY3BAFj3tioYDEqBV66VmxSpcIZcrqcRSlFNYkikD8lUtG2KBGkgFUf
cUM3G0ZYOp9HFcU2qo/XO8KBZVoeHeUQWfoYBX8Jh6/cjavGVOkD5hwI9/Rj
ikaRbHDQg6OgB5OXhZxrkXW9nV3y2mF6m7HZV0xDmmGNyxwL89I/zJExgwii
Yss6IJMM3c1eDvJqMOYg1Efv08k4JMZwRf8+dZD4HDtaWZXgHfFEadRfmPZl
7DWs20Y/lZZd7Shp5lrrpJMxqtrEpf6Q/N8/LYvqT9Ax/wJiOywtESixor7y
2/nzH9BKiP9/d112eZhdP8xfxVrWfhTUMljqimpsDsMImhufE3n091evvTfz
r+lAJTjjAa0kPIredvJGECWlPXZTyce3NJ7KgjoP16G7zsh+IfTilF3Erzw7
otAB762TYdUvssSoryjinRx54moG/TAdvpeQKhffVmG+U0RCE1Ep+Kg9N1Hi
6z/ApbVYEZogSLnYAm0TQCrI0uwxFijMW1OcNY8rp5XB0fuAUJED40xBujvE
QiQxgtruNYzFPjJH+w5XLph1ibLzYndJNoxd2S4ySlvzODVKPs/67fKmrqhd
V/cXY1Y+TQHF6vFyEtRhgrWMtB5ju5ZZOcKQq5u2NBgOOQE1T9ZGodm1mCs7
VhJ5MeS+znKJZDv1E9TP9VZAmGBKFoJEKVKSXuOVar/yuHwgTqCGjIcERxtB
3hh/f5tzToyl8Q2Mx4rqnjzgUw38+eAkeJ8jyDucrj8OJCtgIhIfKW7X4Vnm
+D9pIHbRtckLmuCDe0jmqi2lN6QTXacr1oZ44HRfUHu5kqQgYvVvUUhIgzHg
nYCheCOGBxss7XCTayb1FM1AEQkb6D8oKicUaTNYEFS+pEtyozVySxJ9Pbij
bBufz7sYmmm1O5ylHp9q1vlpb/1ztuEbLl0cVyAJNWNo+FKWpG5wJ42c14bP
wiJDZ5qcrYKCFdKJg0nDp6RlC6VdBVg844CpRw5wL1+Ujnsvh8WcpIJikg9X
m6BNNyVRvwxbwfgipIDHZuXKQNdA1XVKF9noC0SszATY1ntdAgITGgwWCJAp
1DJXlI9I1AM1zkVYMbJuhDhk8ZwW0CBQ7Z3dfTTiytFDsVRlJJ6TI/CRwCYk
o4/HwIcKOeb7TIclvEAhjCxkBs4Js5IqH/zKFlnKO8vRKIPmIT4Fi+wCa6lU
RZgudQxkyxwyA6VCpzlCJ6BGKc5a4l0cbqcOtCf5ByXHlZUCZgCnTTpkG/AC
rVP03pZjRXCwUmEQTZOziwmmr3GipbwZigSYwOqe+7q4zlgzZzDeiqMo81mN
sdQvkZXK2SCkkWx8SC1tDE4dbTP4KxnYMloEnh9FkFC2gMiyFenRqhwzXGFC
7IpAYEWwjJgnneHoZhNNqvFUjbGTHen6JOo1HMCA+I8ykqciGVhEIJj3eEke
oZphPgZGoKXzN8DzpTJawLXEiQwIcuOR/JPNORztWf7TksZJ10eixYT9XuYX
pOQPBHiXr81yBlceyHGlyWkgWKG5dZCVJBTZa43GGUI/ImTZnJEqAoOwdMJO
oJRbPlkJkYkY8Xo67KXhWWR89QFblmwS3fexW8nNsVstUVbhGkKnDuTKggKz
2EcUDdG7GHEm/ccvnvjiB/f3xNNYn1Ys03F0SKm5SC4x4/5z0n/26ut+ci85
Onl6cg7/7XQ7+O/fO5jcEw3kz8nOlyFajdtqnv+26EmJbZGLQEtjLRc2yjCo
bnRVVXmjtteqb7fKc6LCrREXg0Se6ok291KtpnRzGEJt4QjVka1dFA98McPE
caFwdDtR+iqGw+WCgmBv6t7dpuIlTRWv5Vyvnd2aY73lc00a4sBvOdcn7Avy
Q0vXD4zLK4hftDYIE4NI9WVm0fo3zAW4FZihq24hUVaRMjzLpzkmCSiWgSQt
i2aqMJVUkwOfNMGaPtgVg2RLJLRjxPdYUlQUxm+gpE5elcESOU7AgwvN4SQR
Ah55SVPiFjOO80gdIUyClO/b5FPs5xmPutNzAdNisor6iiKG4boCC+72x1QX
w97WKDLYpDhe6/LTaQ6MhtKISFFE4njBOOcn4xBxF5aBId3R6YiFCLZE3+ZL
ReiO7BsjycG+xIC+7OGhHpDeubaxcPYfWuQmq+Cd8Yet5ByHekg2QZd14WSM
iKN0OOQg9qfVJIsty6lRiKJlVRxbnfokn71PCA6WAZd4AZ/hpy1rvr+7j6Fg
hCcp/EWjIOpFWXxOjjljnBSJTiyECDSxYZfZZN6Jx8LlV+h6HFO0Cqjk9F+D
2OrxIegaYDhXIuoIkW32pFBeXo4wpSG7wqkpPdK4k7vkJvbiOweDceIoDlYE
vSY0ipoyRvrfxt733+M2PPj++81enFgZQ15xSr5VSxWQSRQRcpmz37kB72YI
kjkGMtq7OLJVSzYt1NAVlBRwayT7xHYWE0gbVe/RaTSCaeRy729/xcahQos4
SREXhp90VibnaKatePKyr3x1Q+CpFiyA995nAaxdfUsdPHV6rTbk2OAX4r95
wcmFc6xSchPB62yCGPMLBVy0JSz/gvXbfHjp7/7zi/vloLvmZ/03v8sPdK1R
f0eg7cFpoqo8Mutzo2sHs6DB6olB7DL/6h1nDVcBaeTqlNPazXfrul6fE58I
8nqpjXLE0aLetHYNaiFC1DSHxbi2WE2lbjhijXW0FM0SNMAFQdJtftpeJ6qR
tncdAijJdRkNwZqqZ21N3KFrHyDX7BrFHaT3YpCmMFmLexfoSj0i8G5dh8T7
Uw60C11HaAj0XdAjy4hsxo6wu866Gdi5btZtYaqfN2/sepim7d8ZpAqcdF9h
GGMQEqwP199MGFyYyN8g5yTIwz4bhxQ1Kb4a1HUxnSMudLPrM5+AS9wAcd3z
kBMd4ryVygJbE8JfdhIKWu3dMmsfslDv2ngP2Igm9qUZidyFhRAQH9En/GDX
I5hF+4Kfkyx4nZaGj0lYB6ZuspFzxK7NdpCEW7rW8g4SHO1hZWJqRqGJwX4b
TIW01LU2HnMlCmVxa7uG9tB7O6wUq8bP2n/gA7pH+Wj2hTjfWXhReemLGITo
bgsu1gXFyjML3vcQhOjAHDMQtkcRRJeYGCY+5we79npZ/bt4wSXh5Npqcp/V
p+maXJPALk+J1azrWsr6sfFZYZwC+pyqK3gHmGcxS9Mnm6PEro12dsOsWTsk
UTRI9L911poxdxKuh+naOhVwSgws1aj3gUcurzVwe9fcOJd2SCf1WUvXoerB
yIf94NNM5z531tXkBpJSC09FGQWDtrhHoSZ3IyFtXUcG2kbXIipgoS9gX0ss
bOahdQML+cxZL0M8cnS3b7nXDEYzs6+H9PByeAmk5VO6jk7aL+gtM0cnV4Bg
21m1Roi/46xhO/tDFlGEfMus32DdJCbSajzu+Ng1gp1UZIMgr1bEcu7UtQuF
KnIVpy9T4BWUJXXeqhSyJpVcXyJgX6QL5aWGtmOS7Ym46sRLhE+rGk1Ool4S
p2GhYTXK7wdNygVNivxa3DWOE8cchAWLBHjSf9EPKXoSe0qFo2D0XWqMS/wc
xjnoo7wkEZec8Q3bCVpzuHtF40eqh3EY3pppterkOvOTES1ShioyNbnJyOA6
ZlSh4GwFLdWiy5BuuoTuYT3qEEuU6sNv4hAwU+UL1jG+6HDTpVaBYtKgii8n
VvDmsYf9FtcxNNkRk/ZZEMySn/9gxLRfnTvDai85YURR5CmqDJkCiNPx8VYl
2cyG70xjBltMgLUWgdEt8sGy8m1xNSaSMi3cpCxa8L6k6LoliL/I/KfpLTpE
2wYXjfIBjzASKYNF/Kbn60XBdV0q6rHU7mqYL/Ay2Qy4WNQVfIcATSTJ2iFx
q94gHBhyWfkq5bYDPCFhHh0nQRYnY42jl/B780xbpp4GXITH3MbPP+fpLO2G
j+hend/QmjhPfAQ/RyZWxTyZZFfZxJvpGjOEAcfVV7QJ8uj51es5ezjpnIgW
F/JyyJaKJ9/X5lppaKgerCClhqGJqTFCr6BDw8ilUphtzVKS7yCM05E6cJmr
MQPnNReIKKmeoabofJzU0LC4OFOBKJzojcFoAeNXHAdBT7aOShmTshEhsCqu
jd4EH/DK97Rss7uxMf+6sEuebBCdAfGHLLXXhSNiWMSoaJtNsJ148UrFSGam
wWBr5g7QvpMBm4LZ7c1ssoP6wBUplCBJ7u30dpK97fu4cqDXQkPOpmodJDYt
S1qizCyHFu+D5N8QiKeMC+jcQ2J5z0cC/+VPi2zy5w7yhg8d536mZHWmtgc3
mgRDKtAWvyN8CN46owIRdTQ9iwRN50KFZW3AkpaD5D89yOHPEdzh54zNvxvG
eCKqFYHAlEN2A3u4teSvnb/rmhWLi7926g2Ze3NQG2A0SNC2a6/S18TH8Hvb
Syd67lf/169bv2EpmhrJ+jUhCQvYRU1BQXby144OdJZV/7zlMJ2sXQ367W/u
V3WF/yHC9H3uEbxCJSKfMHcdoL5ZsW8vFqFAXhKfSpxR3NEHjpAM6kDt9CHR
JgEsN7nz+JWR0iPzFX3Zhpna+CKYBiUeWDypQuZxlprjPOJgQSQggtVjyETw
cgYngkfl9P5ZStWt57CjsGfjlKPSbAPJgdRaB0mygaIs1wsV9xRmgYQPLdYa
ZvWqkNPeWWg64NuVoTaFVaK5byLLoWfsIbYc3qmnWFNEQW5YiUaHheHCtuJs
7bNxz4e+8vraXk11dl/WIULVb/RnnHtR17zMt7v+aGDmiK3d5wasviyxgu/D
Q104UV3zhCw43HhlNJ2QyYCv6sf+QU3Gi5+TCurdVAOsw9NyPOPn1x0ufoWO
WO0FuBoYGNcdY9l7AwWo4M3+/QCbEbdgXwpWev/a+2x1SJlh7QOFr7uwxZMu
4lriS410RvU82qWkTPXminm8MMoKC8D2mL0jEKj6URu5E4BEA+bogrCS2uTJ
SYG1xJCSUCm4KDEGOtvC1DuVPEkcEnHVcZVUypCxyBChaU6FOqdMIRo2WtzF
/q0ul3F27cJMai5/idJ6tL8fEFeWDW98LnGTHLDevJ1EWWz4ctpKO0Kiib2/
CFYzu0BdjrMzKT0Qu5MIPQRIcJRtp0o0py223cVoIPWsaq/kOSOoagI2jCef
cYnO2MYooDFSlU9Df311BGouqgkUBTvXM29FdGyur6o9xUwiU3VGka0lc3FO
rs41JPZo4SJ9TKsNefYF63gBYk8CUsuSa0poSU09Ewoza8bg1URng5npPQLk
xBwEUgRK21AMsjtY8RH1nri0lMQuk/8pPX7BQFqesHokymfk1adzIXi98CqG
3wGV9RvP8R/RQW8rKbD2xy/eXeDHf7nLQ3/sdv8SEqg/pdU/Bu9649c/1j+G
P/S9X0xbrb9Gv4f+Pve9N+Gz9l+j35M38J4B/uE/gGh85F9ZukkSA76UJJ43
3DLWO379pvXrN/R16scVfc3qNy35X7xbpWU7Gz23HZLGQ9Qq0pKbH37T8jWe
gb/E4teNp+yX5P+55ftfiA/c+NCbG89+CLdqL96EjPc0JNHOMKBYLutlPi87
v9YJF9tXLdlKfU1wC5DsxV1TptXBB/B6Xl6yibBRSc1n5reIkkaQ3NLqxi4q
y0BYYcxIZm3FaBnkh0II03EleUgoLkkQfKf7lw4nW01nWOsnH0rZpWcaxRCF
45kIPORcVOluZDnNL0m/xV3O/lu2Bd36Y1y98sHasKJPCCpqPIpOkqdZZUSa
MABEjGj5om2su9vb0QfSajOo5Zfk6+P+kSfFN69AS6ukwmY1+gCPUsJhRNBu
aHUnwcsqT2KrUkesEKrXaPVl/MUNrWoT2OoTOpGm+IBpVRE56PmG5rZckI+y
dQVOQ7lQ07SMNW4myHjS4Pp1fQXXnM68RCauHetNK9Bo1RdLi16VserUvSMd
Q8nv0uo/Z6xHWpvN0o01u2Uf8aNuadWdtzqzFNDdZxSQxKgYcGNT/iJCOXDW
ZoJp9wI1HmN2Y22nUmtzwNdTcS4deaEqysXG4F+v/Hhlh14ss8mVCnskHZKB
2GtnmeLpO29ij4tehChUQ0XY0CDAhZx1lYh9i1QvhBuQpCquJicDkiH2VEmx
8Mlb4jNl6hwqqYwW6fUsVELw2kjwYYqjRb9BvHKuJILNSQaUgmNEeqPDZSBK
/yQO5fmFtAAQit9QJJA5YQ3S20628SzWyOMvyQtgmQ1iKk9aksdPpnUiKE9a
MsZPNq6JtimioGmzHoTAASRGPGSeRVWToitET3rZUdvEiMWh+cTcGCogjqjv
JvsxIF80NCyKjZmLwyevXDhUQev2SfgGDybEVKvOg3uq/puoLYpqm6QgvdBl
kKKoDL1TxhloaHL9En1QheLoBPtsWkqYvBbXpkyLt6FwPSrE1ymDBGBuKYp3
dHKLAnU89Czf62iIxtfnz58lHZjZDL9Diw1l9GLqhCcL2EBYKPIesB+H20LL
OzqfayOmixgNu1behNXx0FWksDV66QTMStuID74MgLagbcbGQbyhjQ8Z5UrS
PYuphnHosa3lZdQ1ccU8w8RW4wc3EIydKZBij7Bq/bl5wEpLnSFAf2Ji6NER
qtBPTouXY8Fxqh9dpVSxgBXjkCSoOE51gBhbYLgukPvGsHWheBIHooQNH6Hl
kopRYv2BJ7UuPZxXKhz8cnymUFJafnhLcsA2D9xB0me6xpL4SnNHNL+GmkhC
7WEY63U2KGFg65qT/AyP6oWtT4qhVOVI9O1Q/xiBUl3TiN9cpGGasgODKuOY
7gM+axgHrigefGYaPqE+JhCSuUc3gXyyC9k5ro/hw+Dmy8WcUFTJjNWXOF8b
L1bHmEDj38P9vT3KtuB6L5xNKolfapXy7nWraFFRJUc5JKSRmPHb2D2MouNo
XIzYEUT2Drpu4IkjqurlXkDbHbab4sBZySoErwFaoaAvLDYEpzK9UDQVKWxu
Ko5gIjJCFxmOORTH3MJWEFOvfqMKSlg25K7rQnDNpg6KYpKlM9rME5GvNGiq
DdCwAzJUZoFsD/uqqGrBisnEtSBSRyDAN8f11kptu4bCK4VYKZhRvoDZatiU
ZLLFTA4rhPp6RBZnUHLUYpt0ZG3zvnmUT19+e4NTnpzx5FUP5vqDpLPWLw8P
saeD3KTWzXHbWzJr/x77Om57i8SV0BdR+1t7oqfoHeMTuektfozcK/xecIrc
9Br6Rlii4beIi6h/uRMT2RsbokfvgUL5VfdB9/62BhwISbSvXl9f9+zr+mhE
AjE6oWOe6vxNnlpzu+D5cTop0a72q/qt1XkNekRcWLwMwEVpzQEbyBeDGlQR
A9Q7YlM09CY0XLkhxsjmkokyBBxMFMENtTht1Um8PKAKmPYEqqQgTRlZv0P0
GkhEZ5RhDCiCIOOfmMsrR2ikaNRS5cU+aJQadVZ4wzhTym4+g43Bh51/kXzd
KPoigqp2clNTAhLR3lRPkMZ52nIqS/IwaazvLXwRNtV/TBpfnbUY9Altsgox
zGPlHQipPEkrReGzax+FW5qWSQhGSyHhm1RSyUR9Rsz167O3CUeYAmP0D2B/
OWunPceCehAhELTURxpT9RqKaAYlQINbm/7ZXl1g6l8ssht4EnEN5gSBNc3Y
DFrjMR6XNKTsA7PaCl4mU9APbUbYsQkfw6i6uhxmCwRIXCWeJjaRuqjeXZPf
CluzU2Op9pNnZhxlFFEME1QJ97KYjAQrwVRAoKKRlqpgKkWumpn5kPq2T/KU
nZcBcMo8X7JfxyX+JIhZ561sqTvgmWPYpXPEddZRF5aLjX8zwAHJe1LYO/PV
YP3wJZeaLNcI85KnLm3D692KgaIpV5ob72JfdCatkR+5D199ZBZCzvBDuak+
Xq0DAtmkKg7wvnTTEQhu/2EjvLaih5rfw9fESzptFwI6odOL3/Ngb2R6/Mi9
xcenRdbvNPnOHzjipkyewYylmKOuo0c79WXqfJe37o5Y7/UqrN+ato3pSY4O
ljlWfVMxKQNqolEUNbhfR+dPaVqjtxJ4bPQt58NP2WFvkDj8yW+BBFWpdS7C
I/fsDCYfhg7rU7IopnAbxx1qNoAdok1jcCaNgTJ1qKhmRplKdH5DCEbagm+g
cMwzuIjsm3fBN+8hJgT+QesIw8p4SGOq/ya1BH+L7PuZgai3vRYd7n8Hpbks
Fn/elTZo0iJ1+4si9/PmFu+dvwSV+Xh/Mb4o9LLe8sbe8c7DweDZg/zsWt64
9yXXICEuT7mwl1joYRy4czJArEFQ/b68d6c+Ztnjr394Nr7enjKJaBEi2RLZ
ECH5fMtVicTHRrFY9s9ZRk/xGKVTSYnx4CRo+YIKWhcS8q3pegvG9Spid+BS
oH55GM4He7fbHkKUcKNQfGS0kkIMRs4xWmcEDio3Z0vqCq9awmFQHHZMdhBN
zaPK0cR6ny4P83tJuzgslAOOS4eyGlEyDrXk8C8VmCnOS0hGh8vduFYhlGSy
2DhTGyClulRwvMRhGxJErGnDY1GGWQRMSgUuEtrFm1fHQyUU3vv3HwkWqjUe
aCFeApNRyBJO79EloTpgPF0Pgckry8ZDFyW6mO3whNTIU1bkNqGT2rMXwHma
aIzhHIQCDbicJ9e24UkiK4oPRE3rjFtBOyj4OQ7ipEQNLmLEJ98Xa7MYLvXE
FWiDDdYrtpuXNFyWcG8ar00MJDMbvAfk6TEVM7zh5IQLGQFfhVcjK210aeUz
lBWdHJdobuaw0FgYHelzhsJv/k4j4Qy0diEdhyEJcET5BGsM79OEKKMtCUkn
S1JdVj0XX4d6wPbN2DHO1ahf2+E3y4WaWSyirKWhll7OKCnaUE3HxS7Xk2YV
FyRMGBUAd1NwMhXUUEVnOWPKNbptXAhcokMKyTOp8C1LFCJ65DeBZataJz6e
hiz9CI4oSoVCAhMQ65+wFazOR6AiFYugOwc7IRbvMp/7GMNAUOygNIVpzQBY
dye/vUqMG5pxJ9QQCaNyAqKJ2eZ6pkj5NX651BKO8t2Kfb11IX5WD3SIpHUB
SmsV2J3z4QY36XMsABNuDAE8QOPYGksW5IcVh4pfv3oMh3js4feSc4cNYkBt
m4P+kFpEbXlc8yCgvwGVzoZ9ni8nHqWuRjt8EnfoxEUBsje5d3wtJwvLo0A8
BMDjkWaj3NJI+LiTJioSAH66u73zsLu9093dPt/ZO9h+dLD9Ve/Rox/hORfl
6gSx+Odaio5JybEWUVRRNR3phlfix1mnJQuzcgw7yO2d8+3tA/rfj2KIFmoe
PbUfPYWPxYfjDhI+2a3vverP8jez8sdhXt4q4fMbi72vf3r2cXG2mJ90wmT0
7N2ug1ul4p5/jVsx5+LGhvC5e9N+df/D46dpMbiu6/N9EAasiDMWEEPcGm9C
itOIUcEUrH/0Rw0RRYwdSo4rppcU3E+72kv69YfY60TyIvpy+K4xQDFQ5WyR
l+9N1Wq2MmsAvzxHqeIl5q2GBzc6f/2y19msvVAbl3JuQTtTQn+2ZD2nPyHj
E1w19MIlxx9AQaXC74OVUxDX/W3CvqvTPV+0MkZRYt2obQWMPBryhm2RYF0M
Dqn0M9Z5gkY2zj/IDGpZBjHIzjJT4iZDjB+uVyd2SpXgCsu4fcJ2m1FUnOHZ
RLBtFN60ds1EJTE0hKUPgUaaTpcc1Uph4VSrvFEQgQofc6AK+zSlXACW5uR6
mizPsJ5SCeixE7tSL7F154oBtVxyvgM2qcLfmlZ9TTknxhqj8WSxwqMJDo0V
UGkrvOER2McTPIDIyuK3nJdnDvsEhlFy5S+1jlHlrmGuQKzEFLawJsQMhUcK
tq01eM2Wm8kY+BjzjyxdTHJNSC7J2TxrCQABNX5WpprxE0O4o6CKIxQ/tAdA
UCsWo+/4Tn29D73Sbm1XoZZfba18HUZz7mciDDi/wqjjhLKN75amoEFDdqGw
ijLOs3brd9FbAcVKglE0hP+UUYKKQISHslEmCNvCmvBBRzDVBR53OO2UK8PV
T72lQhPQmwIvSpcBmY9DHHyJduk9CMANwQ/JotbNSH0tC0lOjxqJ6lyEwyGN
2hRDNuW3RQtJi3KrL2CbdVDqVIrGFs5J000fvPR6IaXOUeYFHYNMYOIsfWQE
AuVWl0oqFBiBt4YKFUr5NvK1RuNqelyjr9vMZlqyofZoDPLjCEMkxErEJoIW
PFwbj18/z85b4fVUeZcvQ8VvCVB8ac0lQp5qsV+E0OiCASpYmlC9UC+phmzm
cbA1UZx6upjDgheo8QbZ2UxWshlt9eW0dam9izunmKCAnW7PY1Avavq4Nako
nfWUNWyVgrvIxnyulYcvBlWkp4VqxRb5fJPMJ7ve7ULeweTonfGqTTb88qJL
eAOkcdH/Fxsg63yBDZFOKwP8VkMkVe2MDZGx7TGmQKj3heuw3vhYNgwwMa2X
EhuhqbqxA1GYhctSHRlT5usqS268cZzGSLNwN/aaePRqvcojDz70Sa8HDD+S
cNN84i0OggMU7A6eptJiB5TwiKnGmajaIZYC8tivHMUhPZMlQFaL8MBpUUrz
rsQg++pI8r4/a2RK9W+anXEGNI7Adt5nLWRVpUWvH6yJXDCHsK1AMErhzEhi
yUDTodLSpZFpo6HSRUBMMYyOVjsyFRYY6bNNqZGDwFHZtWPgbMjugOhokrxt
aUTjZ5tO9oCNoBHEhJjTJLSq56mbXxGzfI5xShrVKqF6hHj1nVVONyrySZIS
LGhP9mudRUxNyDqMvzN9gtkyyhGX9GJd2mjtRFsIpdIGM7u22iVsQsU6ybaY
w1ehmINqpTHYHJc3o0J4dYVQKMcgu8gNsAdFsXYPsQppRYzgWKtJsLLpOh9m
f+3+tdtpwMXTIPYfwSBo7zhCler10Gx67fvsNph0/vXLjgoh43xRVpzPvBnB
adlaJG3CFqajjF1DpBeqAef7Klu1yV7YKUqZOrDofrjaVYiuSdv5N8GsXouu
qV91pbpxo9fo2HcB5vCXxoT5GW5BQA7GIBJa+Txb4YPu9n00w91oKzRxlw0s
n/XGQkfoRWTo8uMPRkfJtaUimTcav/Dde/PFm78//mp1vOrveQwhPxh8F+YQ
vmibN7+BEIf4+dHT1Wn2bnoIGtlXV3svxkdPj74d98ODni3KMu11d3ZpmXYP
th8cPNjv7Tz8kdOJjYnTnwoN+Wx66gMWTEP9CNz1RtWjGEuJeM8pU+fd+bF0
kMZ4oKSpK7j1NcFUv55N8vdiMSJ6r/KQ6M8E/7glLhCFGlcLni8/4EV8J2EE
tZmIGchaZZoPYfFyEJicpCaZKH+pDjHIyGdU+uKtXIdqEmkYrt5sKX7/hIMb
J3qlGu2zh6HGse5QQkOwJlks57jmUgKqOAiDZ0cM7qIgqs2BEriOFA9C/hwQ
L4aXGOlfXLE+4ICnEUSllqpt6MMhqsLEAzLjoiadfaDU5BKqTojh8c2FQreR
iBsqAnvXPLXIQ1k5Mu1EOqwNYZAJhQo2WilNqm1IzfuwU2JrCOmA3aqIwYq8
C01kOGJ6IBGxDCgc1oiON7kPIyGvZwxLpkJGczqNmNogfzors5pz7Q1oDDTq
Z8nF+OIJ9twzuIjXOZa6qVWWI5KvhfIEAFKMX7LSrIr1MCvMHGsUmbz7qy7A
T4urrPSbx1SSlM/sT1LumS+8IrLe/L4qk9zCGnASOUoRxkKMuIAJj4QTXftU
fWPRxwE3wrjd/y0ghsi7gjXxi4hVidTwXKx7zC9+RYXSOfiw/uwfI2yStpm4
s+B5pFeekGrkzP7Qx+FvZ8FRzG+uBlFi+nvT8vkb14Iar0pdK3TFGZ2hc3+l
+cA1GBUiWPTbhLa70Q04m6xkuZr6WwNIbpqQZVBCNVRHD5ey7UUCXRILResp
5xFZmyVf59Lqk5ZJqXpborXMtV0RCQJpDoaiPaA9J4uydtTN6da9/lgVdrim
j1rIgCxQzsG3LPS5DW/d2dyilN5g+qmHctfMQhzYEbIiEJZt1hLdQbSKq8pE
XjTo2lsYb0UvUstJW0L3H9teSNovibmZ4TzjLqKwcMsL8mOQ8e/0wrEB0//F
dmuvZUwsWq/9DUNqpwc3vdBKKNa+0Fp4ovHR7UBRNw7pv+iFP9YOz61nqd7k
rT3c/QXhQPoEez7oz/MApWNf4AtDT4TLyO97La5tSG9u/rP2QlQEyhIE+hF6
8Smso9XNguzjpfG03ZFtvIyDg+phcDHziDx5HG/fQhKDX7GV4HJQrpV35WEr
8rgWedd7rNfXu5M+JMLJhTCSUCqBncQs37J5V4KpVcxRi4eL7VCeL0TofVrL
esusTzarOCmhxkyZJXpuRrGNaOBlA6mYVfFRMqmSythYlwa/sgtITDlexfhp
lDzzKlFvAg6C7bK0ivHOyyxSDkCT9w24oE5tw/gzPAdij5dlcHWe1M6BmF60
kN9f5Iu++P4/1r/Q4dTeaCHM+AU7glsZ3w2di/Dc/MJHytW/0HN5l1EZKfuT
RnUYgZfQR8wjRQb/RYPgzKs1EiIce93Y3rgW9vQ5Mm+URkHybpQR1U6yYnEL
1meIIcmaVuNSRVONvBxDwd0KlWGYetiIxZas+SC1GgfnehkOl7hVGCOxMLq3
MYrrTWqc/+HlbX6+jnGHTy0X/mN8lgxTjH6Ud2pebq/xhDJL30ub0KPHpcnn
au18GsOLc7jx5ASrQhnw8Eux9ZQ+mhh9+pFzQa08ToK12CjGhQWC8eMyvcoL
dfeFGiv6AAWccL5wUq5mw8tFMeOYDwZ3z8QNdh1CKlrsHl5R6tt2YURoRimT
NaHb+ZSwbatssnItvTVifahXJdH+4CHK+VNGf4ZpMcyok4SDgNtAuGc13qoH
XCMN6pHtHPToxnDaL1sqRqKfdVn5gcVVtE0tcArkIKzYYVoCPzSpxLzI1M9F
UWFNi1Qap5hrE58TbvXXxXVGwzbRRlPCByt9oRqNbcGyf4z6SK1uJVx5E5cT
jUXkfAmLYlOk0L3byAseKjwU5hRmC+/PPNeeeKmkLyveZDOqoEYIhLVd8Ihb
GtqhZl2PtxsiiCgLTYKfozjGdH2Rexd5ccwIE5OJSVtgSwNj0uLGy283BabS
hiWSbLIIWIAmyF0lLiLhPJsticMUxHg0HKzcoACevcFGANL3DdpO61Q21U1k
xwhnbHd7L9l4USSSXFkTTWi5a3ghieZluq/hSB4kxoniGjmbdiQHSfHkajZ5
8mrn+uTydPLD2e678/T7Qd8dpsPLrHvIuKEHsLbdskLEoM/M6LRukFeL4sMK
rg2auy+k8IDUmva4Yo3zQ0YMsno6RdejaB6WeOhkoTdsJi/NiUdjOaZJlqoH
tqOlZTu+QpaJY6sdvWgBWtJrhTzwsnQExxrHktvi2eqdbMxnqxbaQTXtnVmU
6Lxx6XBlM6HKRXJLmQshupYQ0jqq9OF8ynconCTLQeBn2YL84cTCpsXIe9+9
AB9LL7nJbNCAXRCifNf0UXkzZG2MzNNC4Z2nGkY+8sDxCd3COHecYwXKajmo
pbhbKkJzBI1N3EMcWaTgKBxqd3BnuI8zPIsYQkqzKNskLAktpwMVueEbZTM+
ESHj9+4bwzNOidodK9f4VLwov8WC71LHjKrFh4N8pic0Oik5m5A90J0GzBI3
q4FopSEFGJqbFMX7ZDm38jYq3DYyVT/HUs6UxZbAeowZt4IsnbI0y8WkewH3
HD7B8g0c7fdJQB+/6wZFrIFuSwMU6ibmcEP+flFmfzQAVgiIygWbDmjdHu7B
SmxIVEA6uUA/+fHZ7oOHGhbw7vo9hg30ej3JGRJhCp57eLZ/8tPLpz98lT3b
nZRPi/Mff8jHHh/jtoAAi3eFIQabFNUwT1cIN9s2ulvgNFqAPO4I5XELmAfm
6vvxlVpiG+d2+uOrl7MfilflzqvLd+XHJ7BI3dnlw+93fqpePnn1+MHOo5N6
jk+DU13MUBhG24xEA4WS4CK8RqgY5B/QCGXVZ+l2RjojYaNcZ2jGKEOSsTYh
OJ7+CjoP5keJGXhZ5UmKg6/nYo6XuADiSY2iubQUm5PXaYqejUUh3pKcWEd2
FNCder6Jw9CjkG2Aq9KgZ96lzrGAy5mf1cisHbIejr+jexsxkl4bgJ+GqRNM
Sabam7pwndZIl6h4zlHSSFMzCxFmW5zbocxscP7oSVboPBDZ2DRCmH0enCmy
BvTUqCA9aldl1IWPcPMjpw75AnQE6slUK/WBXwG22D8smL5kAqyNWOqTCEjE
Py55A/4h8WkPtx/u//or7tSU05Kp0mLm/pGORosunql/6FL8oyr+wVXeZxym
SJlDWgp5RttHFsQwLBmK8ymrntVMs6wSDR6OJOZ0pS05LRxpUSWheHeAavUo
FWJJalQJXpasTThbrpdXNQQXBkyYqJgqEM1GPeIOZ3q5VO7R3Ga48tsc6J9W
oQZYdKaM806DZRlNcU5ZXvVjc+vUwvlzUup4wGXD1OFEhGyNXLBm5t6ErLNu
rDhin2WiLZABzuqwmISF/IBkSwL7YrjdEJ7uq8TkrChzFhTX89FdsbWCaNKM
rEOJGdyqB9UZUvEYBdGowxiiABqF91jsXI9iUAP/3nK14BhZLzqNbcibcrTp
YCsSoGvnktJzBPbZrEiMtzxdVgWiuQwJ/ZcW1flFHRCqRQq0E14+pZrBW0zN
/d3hrSEpHKtMc3VyMZ4iYkhAZ9NWYzLplQtjUkWSh+oZH+X5cgDSDQl4Po+F
omtp/t+8PUs28l7WkzKzKL5oPqQx/HjVHU/OEk9qxVvPvM0vsvOqbCualNYu
jfDLfCwXXBWsf7DB1RlGm04Vyq0gSls5lt5ora0hwAf2WYH0UeDa92i8Zrlc
zhfO0kyNBFLUixAp15wiCcv2KqAPb6Lvu7YFCg2QBYjHEqpj0SZHFhdTpExr
hxezaMVqQG6UlLMWr2pHil2MbgOtiu0jR/vl3tHu9Fm5/2bWvSjeLl99l33b
/2xkK9mkg2R92vlwWN3Lrl6Ov7188frh9vWFWxfL+0+DoLsjxlxjpALM1QI3
h6UrRmItMzp78hQ1KTi832arJqck207ZDoCI4rTHOqU7Hepe50E1vEwjisAY
O1lUfS7U7woaIJlzZw2uG+yUXMmtxbTIdhOReJQdUNCTwVmUi7bmxtbMGLkx
j5qIYEsD1ONdsveUfeKRwTXxOC65Nzv/iaTdSMD1y6uo7hLWzsrGaK2OLZgW
rqZHI3tHJtPUcC0VYDtecSXOc/MV8/I02NWVk49z4XgqYVibtiX/XoCjMgDG
4MVs3PvybrIsNAQ9YJ1AtAYrd7MnIjZP6VFF6sqohaKxyhl1NygmEftNNn5u
e5T1WbRG2CVjGz1niPrxSUC0LoWftZ2tkf1axa/1N2EPb8LjdKS1mSR2l2S1
G0oVy2iOYDAvioqm1enFEMmvCXbU04nGqWBYUj7jFl2upn3mwXWB2+bridNM
tNqVfT+GhTS2xnZ93HEbISQi0sO31tgjZKuFi0roYrcYd+lp/EWEUIqyo3bj
gPANqduRyv1kLS+YjCygsUbqNRR8o9snsW5vDgSrAEyCeK5NBaV2QNJAIO1Z
EcF1vV7tXAxrbDY5KMAte015C0FMCMfFca0NPAA1G68cg4N1FrUGt/tvsquh
wPZJXLlTN7+lHx6czqrLo5/mf/9hvPf3r3+cPXk27d/V/NZs/05GuJtNbIrH
+Hsa2S6Pvv94NXy3f/5wPHgymM56vd7i6OP3Hz9efZyfrh7uvdgu2iQVSeFA
5nuu8M9yVZ3rW3lTkmNS61rxqiCFLDURpQ/7X5QeVtrrleTzqLTAwc0UImc/
b433V4UT7awuR1HyA81pRC/WMa0lZMXPQvJkVIkbNdRLrJ47Qx+3uNU0Li0w
GJwtAnpmH/DcozhmlDcnvJEHEpjrJ7OZ+24DiMMgH42yWWAyyU1MBjVLLiXo
0flFpnHrXNBr0HXjgredOpEmpByaKaK1l1LRxTwg4s05C6Ax8p/H+PGnhhcj
OKpt7QytlORDRgzCbxrQ16zjnhOgWUXBSkXLKaPPc1pZXuZ4CiS6byzFmDDF
SnUwqpRmLSeXmVfJa3oXbFPid6mmWp3v7wxGPy6KH3dPzt+egWQ4P5/2r/9Z
oMGmDMTD7raiBTc27gbSLRvF1FsfewY3awl6KtB/JemalvhpB5EIGFetw5fP
69eULDVykflhv/M3kmu9evf+nZIf//x2/+Ty/qvy+qi778kfU75jBWdRgUv8
WLHzgZCp2VqjCa7q5b6ljgvJ3E6dgkDHaoXcWfdXJUNMZmqq8QUuAoZIXALG
NRSAXCJvGPm+XIFaNA1wKQR1NFyWVTHFZPO0SpFnceBLNiMYq6gbwbDfEjKe
SJU+IdnWde5jjaweaH3wko3/vH9IahKjE+BvFgmGjabses9w3/NymgBVRTss
lSuCBtm8A282gMgGvE6YDC6OaX5W+xRVxjpS4Mp7rt3VFHaUrLYY/eBDPsUY
0qGklucTxLBW4Eu/zNQc+jJo9LTmDI9uFkBNd3ZNKi5dNJ0vOURAlpv0pVo5
9gaKkBQ9+AI60moIhSmQZlRSEdxV9VIFGzvJy9Y3HKedBssBRW588/ZbWhpt
T4W4ZqQYb4f6D1yQN9WP4GGeSNqz+eSm8jtsW5e91fBQAW9eTvUtMuCZt7Tw
WsUnw2YA131mh31tROLcTDOSsi+3VZ9D4bCW8i7KaaUhOEwSxLwI5xX6hWUQ
NLUgoMVprKQVCwKMHz2eVW5NzkXgiP7uNKfkedD/hN7we19G9pEv79VF828f
bj9++2rx/Lunj86OPjw+Ovv7h8pDy//+nvF/mt976w6ed35kDcs4CAABN621
Xe+vzXobTQnWvHYNyDQPFFyX/3PWFn94fXmMLWsMHZcKpTkThwLrpV/eC29a
lQXewHPNlF9PeBithxto03YenL/Nfzr54bvxydG4/+y7K9B2Pjw63J1e7H/z
9NWHyYPByZ5h96AiiFGoUa+tzWPkizmur9Wm0mckzlsGaGN/TOBve80s7whz
n+AIC9HxNCk1H7fE0XsN5dbic3Xjn8No4VUoOxd7YddNB2jS28tspst9k2Hb
BrbO3G2DQ3sNIkdS4j8HScB4yOYaebeEm0Yr5A094blIyAnbWIuhuGVUwZbc
btRJNhgRnTxChTO9rxO1aBCVwi/ZmmXZHKPydnrJG21FVJ0IIT6UhaHQli5y
bmAZyJZ2m68iLwoMnd9F/l0ay5Iyb3e/l5xSar5Eoeqtjc3dwh9rdEgvQeDg
bq85HGyxCJ45Wq6cSlKz7JlW2ql70Hw7knS4hZoTgWgUiaElgUKJwI3ExmyN
Z+RNJ2mMR6HPbbLt3mfuYeQEYjsiUGUZINFRBm8LC40rSk7TlQ9BUNt6sPPX
St+1Soj1/XBms2qeSbWoKB1hT21sFrjtZpqo1oZMpJfEGYeL5t6tGquFuU/x
YlAMjrj3a36GAMseGc6xOPQp3hrUTn7+g1qEscLiAj7u4ue/mkBdWzLOYPUa
BzoHgpU3lB0MFgTj35EECL4gU7hk07ykwqjwK1mnM6Ct07zKL1TUz0HZGDLi
GUbGYAE7hE+NW2ClzYyUj/O6obVlMbia88ZXZg4BwsptyfVNhafpwE84tgp2
wUG3pboG9GkVTPHE8qivJPsycoKpJRybQwckNSCVgYNhrdYWqz0e71RdaN7J
Fcp0c6vywrohylPODzH4CrkaEEYM6ksMqhdwZ2wDqo7hHmjEBp51PYLhmJ77
VLioN61Db/aJ81q4hPmSwoxcKILuEYTINKs6eezrU8+OzMQZQRxYiI9iWAu8
aQH9PaMi3ZAj4z0skcAceeUyVpdwf0C4hNFKaeJ62GarV7hZISBrE2s4eE6c
mmagGMY9GSEZMPMDHdZPDvVZzxeiWgiyp6KxW2U9mw3Tebmc+O1v7IdIjPls
li06yBS2Ir89e360qIgl6dQhWYHMy4j5XEw1mEf4mjc9EePh55Q4VZdxOgCF
cpmzF7G1SE0HsWgxJQRnWizGRBc/MxkImI/KpaS8H8bHuC36hWZzt/62nOch
QeKBgyYQ0qW3G9TaFFR/5s1yhjzW5palaDWaXoyB51vyMk/zRe+GTjx7Y7NA
va+GDWBNW6bkfJRt5xuivcL9DIDi5NUwFJkoXRtNxomU6K73WN6m4OpVTVhi
uuXhk6vrgl+nhiNrtyIuRXSUo55nfJw5q4c644X2Bb+lKLZ9DyZErmg43SWm
13P4NF+VAYYhwKwnjFIa5BV7NTI4FsI/XQQbV+McwjG0cpJs9HoGgtk/zfeU
Jsg4zNULfXNCpNSzr9vpIsYQ6H5vne811IL+l3W6nj36Pn05/PDqwfPhfHY+
fPvq5PKH5eO7WnZMMew7GXZutpm0TdHaqPRcBAPJJw4w2EZuGCSO4w7lzdct
LcaoEU/jMauIo2YS7T8yknyf7T9+tHd6dH+7//Hdbpb2er39x9MfT06r4dm3
r85G+xevO7+DfUWMLC9nouuzEBfYo69DayRNtpdIwl2LmovydB04vlrNMd6W
9UIPJCYKscWki8KTuN4pOShSAwrI8nd7aCUuJeUfCYHqEinGWG5MEQMd+lBg
+9drnW3atzcIVJ6cYU/wDeJx3G80G2vmsak9MBWKp7K6aQ/V6lpT4fGGQi16
OrvZo2Ye3DbR0GpjunXhCCe6kTbCCWDeDxu9MH81gNlRd8jpPI9l1qGcuee+
ajamly5W3BvCm8/BqILwi4O28u80rThh1SoZ1kBgnBOS7wEtBBtBz+03xye3
+pbhsXyHzamR1Q5MA0LtZzAAugAElfso6ncWarGQF7GUED3bXG7MJWlpz4mM
o13iahyN3o2GkWb2g48mu1wTRIm1lgnDYGh3wg7dC5JI2I3EhydH7RscW+Fq
efIv4a0Fo1KaIXkkz9gMWo/sSl0jtKGmodF73igZ4PTqnlxKZIlEU1Gamssl
js1lmdXCRR4lGyAgjGHuHJLomlG6yd2jdC3CB/G9utKpJ9BYREy2BAvpGn3n
1Moxi5S2GrxHnVlwrSmfF6bwmqEA0PrKP7Z2j8hVaGGx2ldkQDoysYM2oTud
WWAyM1U4kvNC9lAFWY3ca0RTap6SrfWK44kAmkzWiTVPjUSC9GCzeinkygYj
EeX3jVCFhL/QQY0Kez8CgvHGwnRmADEUBDQG1hJQLlxmSurxufolhwVJHZpL
w1E18kBqhjew/ms5asZPQPwbnrclGFHloeSuxvjXp4u1hVM5uR87ycbrWSiW
cteIKvNKZ638/r9O7OSsWn7z9u1ZPtx7++bF2U/Z62l5eXHn1OXPjJ0MqR/2
RqwRVLN08fHNs9H96YPnex+++XgKgurgzflPs69Ot/f73758M77/w225xXW9
2OAoBKW0Ruw0SFj1axskbEOPg/CbE8L5BEWvG2KEffSh6pIWRdyOwUcMM2Sg
MURHEFntdJRHq6BdIYvLFA8arCL2AEoszfq8wXqGSBgmRN09dhPHClEZU9+i
ixeRGwxUwpIbqYIWkJiQBHKNKxD8F3A3uZiZUHdQFayx0Mb6m51Q4CACdCLj
ElaViohXmC5SK013QN9/jbh94XOFS1PBwjA8RtVyUe11wX2TZWglZBybShSe
A7cZAsavJyg/o7xcLOe+FoRmWXtpvowgEXER0YDnM9hDdvJ1umJfRWBobYMS
LBYgS2ScJ6xks1Unwhkie6mBc2zlIhpCexv2iUdMcqb6i0DENOFPqAFSRIyu
xYLtN2cvX3jlBZP4atAncU08i0BRq+HSMChyIoETqDBJ4K9PnC3yvP8H/5Sq
7o3kEAbjDIBnsG+fXej9/1Rc/30rrq+HMOG9+lcVFh58/83Os/uT4/fPn35V
nT6c97e3h5M7J1r4+d9NSGir7PxZtZ0/rbpzCPa6qcDz3sH29h/p37BIa+s8
m4fXyDhfP/zx++rpu/MfV69nr7JvMbXj+ri/d/5+8nh0eT/be7B3cZuMUxeN
GXoWeDdGxCgAvBV+UlNcnnMibHgM0bK4OBRLNUFcqTw2LUGdhMtFcr/F6TMB
WZnlAIPM+xpDKSqMy7rG0ra5Rva7KFjWw44qHL4CTSQULDtfUFA1LwLROsqb
DJARjYQS1LZC9gdPvIqIRUwJqrq9wEXJ7V4puTHzVerHWbYkEUmo8waK/0Xs
sqYSoDFApeEOVIteC4OEFNlITNFS8cKt7pBeHic5PP+hv7x6OU+Lk3x1fZ59
zD++f3D1+UkOt+ePN6qON/LHQznI9srx2w/aqkH9vvXb//vq0P+LV45vIWu1
W9FawzxyCmrgDTvKWW3TMAumfGUkbcZ+8HBPDAo9QpQGY5wqgXp3DL3wWNRB
zFzOg1rI4RlKU1wrTWHw1bqYutW87IkpuHxzJWiWikXtxLADD0RvF65em9c6
pOuS5zraEtU7DRO1FEdygE3tqXqZjUb1EqpMQuFa0qOLSL83+92+dXVllpgG
M6eotrCP7QoY7rh1mB7ECMHmqaCjiAnPeb459YWaYSmmc9GRBxibS30izpTs
8rhWeb5YNHfTF7D3MahyG+xJURuBWb9BNsEQzlIhLEOV87X3wDJcSidu19ji
FfiiDBeA8sjPVU8jtkehfQaD9OwUMSfLxZqwpD4+wfUZfTxHcBKp/8MeLU1m
0VvFgvjuo/2HKIjjYLDFXJDhZBGbWUGoYZsYoaPjUynDCwdzAw3jB+6xFGg3
IVBLRET1jW3FAA06a7ay8+qi5UYCXioG1Hl1/Ly3uU5hWE81/2U1iOdnT3bf
7c7S67dfv/rw4f3x/R+/qb797q4axE1s5E7pISWx8ecnJ49fnR8+/tA/edw/
evzk+Xcgbz85e5h+O/oxe1quyuKw2Pv60SsaVpu4vny5eD0+OXn/4HSFr86u
H+72VzvDycP+4zZ+5g91ZqW1INmJHLnILrD4oAewN1F3MT211gYRMrGLJnSX
xOWhh09sIf6mRDYKcf9pRcF6JV6kzuZpnx2AEook8TLie5aTTqD6czGdFrMX
2Dt61pHBxDi2iAe3ZC5PpT+LhUTYefzAU2WiFRCJwbLKwgV/8Ouvyk0VjI2a
6k8q6tK3QcAQGPGEd/mc7Gd27lT6jobvqPOVodG9zSQ5s7iOijVGmj/arKJi
7QQ6R3ySFauV4KY17QkcDQuCfgh0xBLPdlxDVmhgXAQ5bKiwJwJegSDeK7WU
81gHxI4P+40c9zb1rjXEn81MuFVwxGIPHgXsafoFnD/y2zP4vpkHE7zwpLFi
EzJNMEgrfbdv63H2RhnoKO7V3yG/4cZqxjMnvBwzd6bMBDVNxmlGvGd2szZ3
PRY/JXkGGQIvNTmdEJAbxtQxKucgIIOiJbZUjQ2Hfp2WEveeeRgEzZj24Els
mArw7GxOt1UMXSzhTDKNZYwrIdg6QJQBS6gqVlY2VkWBPpWDFiHK4LmEpRnJ
kfjUwxmdTBmhckyWaGsFi1p2qc3uQZn5FkCBOnLiiWnsqydiNARg8afUq4Y8
R8ACFaOdUgSA9VjeKBnhp8WArBm4r+rtMVWEXJsAymK0EvFr9liIQN4YF8qa
FKhLSHGbCi9143a0VNG0Erxfzt3tbUe+K910jTePJE+JvL/TRNyNEyFq4mVv
Ntc2zBZ4TCzrOww5NLn4odX3AEw7HcA9JL84ta0q0IH1cXl5TSTmht7TkJ5d
EonNOAoJvMkayrhoY0jZ4FkqeMpOqIWUVHC+NiCPkc9+NEKK0zU0LdJdKe4C
8emhIT9KSWUAvn6d5hXjvdMx4LLawNP0ltvPZV4ctvplVDmluRt5KaK3bsVZ
0Bjq18PXEUPvBBaGI7hxpUuYbbbqMpWLMgS8rKBQkTnGcwOD5uHZc2KQYcQH
V+e3HsWOAyXoSgpWGw+sY56up4AtOMfkqLiekX+p1vhaE1pLdYrDp+P9nW/e
Pi5/2v9udXLx6jB/9N2j7/9brWdrK6mTqWt3+//Yzv6ntZ0JZKY5uTcWnofn
7k371f0Pj5+mxeC6DSzq1SKLjTPWIqde3VqIJ+UFLKeetq2rqes0kUc80hmW
M6nlAaXNMAGkV1TLgh3hjgR2BA3SkCkBNzEo5cJ345FI8Fo4bM4k6W1ZJBKv
fn3gRL0gwamDu1GpSkWoSwkSu8oX1ZKKs7P3XurIF5MJlzXBdlHnKaUqks6F
Rx5XhVQrF0Hj19q1BdxI/p5NVqHYRMQ/QYhxaa0B5NwLWLPlvMfiMC60CFqc
272caVEgiwjDg5bMHDXRTVY+TXXLWfwUX+VRp8UKW5A6WRuJYikau+WNpFgx
J4iCMEYRIjx5J+JuR8sSTNuxdG06T5nVXSwcV+rzxaeMSciQmoz0zaqjxioG
pSkG8xf5DMYc/Pgshc/r906Lt+M8fNHjAlUpjAXH5Mzo8U6QO0XgDGACMAYM
tLfxDIxUhJSpoz4smw6oXwZDJ2U2eoZ+871qLapVMyW61m5Ub9axWowLj4Yb
kycviATvo42/sIZGE3VRC2fAbfA160To0FT/lmPjxKAdfRdCSDb/G+Iw1kcc
cPXOf1V74fK7+dm7yelg7+q7N4fv3vzQX61ev/20yip0yj8x4sDCtUQyhX7Y
KlnciGcyW54dnZwN3j7dnz6/OP7q616v993qzetnD/dXH8f3f0yv5w2c6RCR
PfDG56wGuJC2kI4Q3uiCFTA+7qhEsRlkTaV6heJvti4hBRbKTG04Jox4HJFz
W5gKFLnREA2do2KKXJrYYM9XQzRlWZujaks0UhBjdBJM85mvruLY4N4wejXY
TLyo66PUnTCaYS3zxuxHKfKCr3eBh8cEEDLfROnFcSssA6QXmJiCCtlgkg7f
YxFobOj9DDSO5BLe6QqgfRCUg8dMBtdu4WvObyuq8BHFjLg2UEprU9lK1plT
Qh6EOOrQ0uV7ZyPX7bEXtPdSiGKwzKnujo85baXEHhEgn82X1VrOK8aFcL/r
O7fmPXxLUYk14T24UpezCUo2ZjqogYIgifiLA4YT8Ei+ZI9QN6D3AMSTkgB2
6HR4CXJBhuEtHQrUySZsJYyskPD+vABqralBCBMdpFsbIYRCxtCAkgRmn9fH
YHNoqGyDa0a2mKoN0buhDM6arH8FEaVwzbYN9S66YrSKbXFkhOMcwlJNtWTn
CdoIBeKt9zJbd3LL4KU9xRpRbV8JkYmJJWFoZK0BYnWI4oSsEJRPEWTJykLt
NsTIzRMQVaXWiPgkvYoS22MiZM9s2jVfYyYrLI764dNZ2lX0GZZwWWgxBwbd
3hpJTDXLpUBRDBNr97aElk+fHD54tI8FjSgDJsDJphPSCyostnKcghBHFl0+
E0KLsg+oRnJQgjyN6ZtmFo5nQSoLMxILSQNr28Wdr1ZxaEUb9qb05eZpdUlC
OMacYwHbarGkkI3hJVbT9Ak6+Po4q7iCDqoHOh1WDYQz5wtH9DpbLjDdaygF
sxDNSgs5AHWYV/k0nawV2epK+m+V3PqUCHBw++n4V5XxmlaNFlGv0/lsgaxh
0LsBT7d1XT/Ttueogvjj46cnL5LD49Pzkycnh/3zY/rU/edx62n3wZl/47eP
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
3W5cRVxlh2qrjLvZzv4PaWKA6MRPAgA=

-->

</rfc>

